<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Math(数学)</title>
    <url>/2016/10/18/math/</url>
    <content><![CDATA[<blockquote>
<p>Math is the base.</p>
</blockquote>
<h2 id="LeetCode真题"><a href="#LeetCode真题" class="headerlink" title="LeetCode真题"></a>LeetCode真题</h2><h3 id="7-Reverse-Integer"><a href="#7-Reverse-Integer" class="headerlink" title="7. Reverse Integer"></a>7. Reverse Integer</h3><p>倒置一个整数， 此答案忽略了原题中的范围判断。<br><a href="https://leetcode.com/problems/reverse-integer/description/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: -123</span><br><span class="line">Output: -321</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法一：str</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse_int</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> int(str(x)[::<span class="number">-1</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> -int(str(x)[:<span class="number">0</span>:<span class="number">-1</span>])</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：math</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(self, x: int)</span> -&gt; int:</span></span><br><span class="line">    sign = <span class="number">1</span> <span class="keyword">if</span> x &gt;= <span class="number">0</span> <span class="keyword">else</span> <span class="number">-1</span></span><br><span class="line">    ans, tail = <span class="number">0</span>, abs(x)</span><br><span class="line">    <span class="keyword">while</span> tail:</span><br><span class="line">        ans = ans*<span class="number">10</span> + tail%<span class="number">10</span></span><br><span class="line">        tail //= <span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> ans * sign <span class="keyword">if</span> ans &lt; <span class="number">2</span>**<span class="number">31</span> <span class="keyword">else</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="9-Palindrome-Number"><a href="#9-Palindrome-Number" class="headerlink" title="9. Palindrome Number"></a>9. Palindrome Number</h3><p>判断一个数是否是回文数，这里把负数认为是不符合条件的。<br><a href="https://leetcode.com/problems/palindrome-number/description/" target="_blank" rel="noopener">查看原题</a></p>
<ul>
<li><p>方法一：str</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_palindrome</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> str(x) == str(x)[::<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：math</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_palindrome</span><span class="params">(x)</span>:</span></span><br><span class="line">    l, r = x, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> l &gt; <span class="number">0</span>:</span><br><span class="line">        r = r*<span class="number">10</span> + l%<span class="number">10</span></span><br><span class="line">        l //= <span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> r == x</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="13-Roman-to-Integer"><a href="#13-Roman-to-Integer" class="headerlink" title="13. Roman to Integer"></a>13. Roman to Integer</h3><p>罗马数字转换整型。<br><a href="https://leetcode.com/problems/roman-to-integer/description/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [3,4,5,1,2] </span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>

<ul>
<li><p>解法</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">roman_to_int</span><span class="params">(s)</span>:</span></span><br><span class="line">    roman = &#123;<span class="string">'I'</span>: <span class="number">1</span>, <span class="string">'V'</span>: <span class="number">5</span>, <span class="string">'X'</span>: <span class="number">10</span>, <span class="string">'L'</span>: <span class="number">50</span>, </span><br><span class="line">             <span class="string">'C'</span>: <span class="number">100</span>, <span class="string">'D'</span>: <span class="number">500</span>, <span class="string">'M'</span>: <span class="number">1000</span>&#125;</span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</span><br><span class="line">        <span class="keyword">if</span> i == len(s)<span class="number">-1</span> <span class="keyword">or</span> roman[s[i]] &gt;= roman[s[i+<span class="number">1</span>]]</span><br><span class="line">            total += roman[s[i]]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            total -= roman[s[i]]</span><br><span class="line">    <span class="keyword">return</span> total</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="69-Sqrt-x"><a href="#69-Sqrt-x" class="headerlink" title="69. Sqrt(x)"></a>69. Sqrt(x)</h3><p>实现开方，返回整数部分。<br><a href="https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/description/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 8</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: The square root of 8 is 2.82842..., and since </span><br><span class="line">             the decimal part is truncated, 2 is returned.</span><br></pre></td></tr></table></figure>

<ul>
<li><p>牛顿迭代法</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_sqrt</span><span class="params">(x)</span>:</span></span><br><span class="line">    r = x</span><br><span class="line">    <span class="keyword">while</span> r**<span class="number">2</span> &gt; x:</span><br><span class="line">        r = (r+x//r) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> r</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="367-Valid-Perfect-Square"><a href="#367-Valid-Perfect-Square" class="headerlink" title="367. Valid Perfect Square"></a>367. Valid Perfect Square</h3><p>判断一个数是不是某个数的平方。<br><a href="https://leetcode.com/problems/valid-perfect-square/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 16</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法一：牛顿迭代法。同69。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isPerfectSquare</span><span class="params">(self, num)</span>:</span></span><br><span class="line">    r = num</span><br><span class="line">    <span class="keyword">while</span> r**<span class="number">2</span> &gt; num:</span><br><span class="line">        r = (r + num // r) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> r**<span class="number">2</span> == num</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="171-Excel-Sheet-Column-Number"><a href="#171-Excel-Sheet-Column-Number" class="headerlink" title="171. Excel Sheet Column Number"></a>171. Excel Sheet Column Number</h3><p>excel表格列表数字转换，二十六进制。<br><a href="https://leetcode.com/problems/excel-sheet-column-number/description/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A -&gt; 1</span><br><span class="line">B -&gt; 2</span><br><span class="line">C -&gt; 3</span><br><span class="line">...</span><br><span class="line">Z -&gt; 26</span><br><span class="line">AA -&gt; 27</span><br><span class="line">AB -&gt; 28     A -&gt; 1</span><br></pre></td></tr></table></figure>

<ul>
<li><p>解法</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">titleToNumber</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br><span class="line">    OFFSET = ord(<span class="string">'A'</span>)<span class="number">-1</span></span><br><span class="line">    <span class="keyword">return</span> sum((ord(x)-OFFSET)*<span class="number">26</span>**i <span class="keyword">for</span> i, x <span class="keyword">in</span> enumerate(s[::<span class="number">-1</span>]))</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="168-Excel-Sheet-Column-Title"><a href="#168-Excel-Sheet-Column-Title" class="headerlink" title="168. Excel Sheet Column Title"></a>168. Excel Sheet Column Title</h3><p>excel转换，数字转字母。十进制-&gt;26进制。<br><a href="https://leetcode.com/problems/excel-sheet-column-title" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">letters &#x3D; [&quot;c&quot;, &quot;f&quot;, &quot;j&quot;]</span><br><span class="line">target &#x3D; &quot;d&quot;</span><br><span class="line">Output: &quot;f&quot;</span><br><span class="line"></span><br><span class="line">Input:</span><br><span class="line">letters &#x3D; [&quot;c&quot;, &quot;f&quot;, &quot;j&quot;]</span><br><span class="line">target &#x3D; &quot;g&quot;</span><br><span class="line">Output: &quot;j&quot;</span><br><span class="line"></span><br><span class="line">Input:</span><br><span class="line">letters &#x3D; [&quot;c&quot;, &quot;f&quot;, &quot;j&quot;]</span><br><span class="line">target &#x3D; &quot;j&quot;</span><br><span class="line">Output: &quot;c&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>解法</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convertToTitle</span><span class="params">(self, n)</span>:</span></span><br><span class="line">    res = <span class="string">''</span></span><br><span class="line">    <span class="keyword">while</span> n:</span><br><span class="line">        res = chr((n<span class="number">-1</span>)%<span class="number">26</span>+<span class="number">65</span>) + res</span><br><span class="line">        <span class="comment"># n //= 26</span></span><br><span class="line">        n = (n<span class="number">-1</span>) // <span class="number">26</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="172-Factorial-Trailing-Zeroes"><a href="#172-Factorial-Trailing-Zeroes" class="headerlink" title="172. Factorial Trailing Zeroes"></a>172. Factorial Trailing Zeroes</h3><p>求n的阶乘末尾有几个0。<br><a href="https://leetcode.com/problems/factorial-trailing-zeroes/description/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 5</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: 5! &#x3D; 120, one trailing zero.</span><br></pre></td></tr></table></figure>

<ul>
<li><p>思路：每一对2和5可以产生一个0，在n的阶乘中，5比2多，所以问题变成求5的个数，而25这种数有两个5，所以递归求解</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trailing_zeroes</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> n == <span class="number">0</span> <span class="keyword">else</span> n//<span class="number">5</span> + trailing_zeroes(n//<span class="number">5</span>)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="204-Count-Primes"><a href="#204-Count-Primes" class="headerlink" title="204. Count Primes"></a>204. Count Primes</h3><p>求小于n的整数中，有多少个质数。<br><a href="https://leetcode.com/problems/count-primes/description/" target="_blank" rel="noopener">查看原题</a></p>
<ul>
<li><p>解法</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">countPrimes</span><span class="params">(self, n)</span>:</span></span><br><span class="line">    is_prime = [<span class="literal">False</span>]*<span class="number">2</span> + [<span class="literal">True</span>]*(n<span class="number">-2</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, int(n ** <span class="number">0.5</span>)+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> is_prime[i]:</span><br><span class="line">            is_prime[i*i:n:i] = [<span class="literal">False</span>] * len(is_prime[i*i:n:i])</span><br><span class="line">    <span class="keyword">return</span> sum(is_prime)</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="50-Pow-x-n"><a href="#50-Pow-x-n" class="headerlink" title="50. Pow(x, n)"></a>50. Pow(x, n)</h3><p>实现pow函数。<br><a href="https://leetcode.com/problems/powx-n/description/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 2.00000, 10</span><br><span class="line">Output: 1024.00000</span><br><span class="line"></span><br><span class="line">Input: 2.00000, -2</span><br><span class="line">Output: 0.25000 .</span><br></pre></td></tr></table></figure>

<ul>
<li><p>说明：常规方法在Leetcode 上内存会爆掉。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myPow</span><span class="params">(self, x, n)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> n &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span> / self.pow_with_unsigned(x, -n)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.pow_with_unsigned(x, n)</span><br><span class="line">              </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pow_with_unsigned</span><span class="params">(self, x, n)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        res = self.pow_with_unsigned(x, n &gt;&gt; <span class="number">1</span>)</span><br><span class="line">        res *= res</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> n &amp; <span class="number">1</span> == <span class="number">1</span>:</span><br><span class="line">            res *= x</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="233-Number-of-Digit-One"><a href="#233-Number-of-Digit-One" class="headerlink" title="233. Number of Digit One"></a>233. Number of Digit One</h3><p>1~n数字中1的个数。<br><a href="https://leetcode.com/problems/number-of-digit-one/description/" target="_blank" rel="noopener">查看原题</a></p>
<ul>
<li><p>解法</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">countDigitOne</span><span class="params">(self, n)</span>:</span>    </span><br><span class="line">    countr, i = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= n:</span><br><span class="line">        divider = i * <span class="number">10</span></span><br><span class="line">        countr += (n // divider) * i + min(max(n % divider - i + <span class="number">1</span>, <span class="number">0</span>), i)</span><br><span class="line">        i *= <span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> countr</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="263-Ugly-Number"><a href="#263-Ugly-Number" class="headerlink" title="263. Ugly Number"></a>263. Ugly Number</h3><p>判断一个数是否是丑数。<br><a href="https://leetcode.com/problems/ugly-number-ii/description/" target="_blank" rel="noopener">查看原题</a></p>
<ul>
<li><p>根据定义实现。&lt; num是为了判断num=0的情况。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isUgly</span><span class="params">(self, num)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">while</span> num % f == <span class="number">0</span> &lt; num:</span><br><span class="line">            num //= f</span><br><span class="line">    <span class="keyword">return</span> num == <span class="number">1</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="264-Ugly-Number-II"><a href="#264-Ugly-Number-II" class="headerlink" title="264. Ugly Number II"></a>264. Ugly Number II</h3><p>输出第n个丑数。<br><a href="https://leetcode.com/problems/ugly-number-ii/" target="_blank" rel="noopener">查看原题</a></p>
<ul>
<li><p>解法</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nthUglyNumber</span><span class="params">(self, n)</span>:</span></span><br><span class="line">    q = [<span class="number">1</span>]</span><br><span class="line">    t2, t3, t5 = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n<span class="number">-1</span>):</span><br><span class="line">        a2, a3, a5 = q[t2]*<span class="number">2</span>, q[t3]*<span class="number">3</span>, q[t5]*<span class="number">5</span></span><br><span class="line">        to_add = min(a2, a3, a5)</span><br><span class="line">        q.append(to_add)</span><br><span class="line">        <span class="keyword">if</span> a2 == to_add:</span><br><span class="line">            t2 += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> a3 == to_add:</span><br><span class="line">            t3 += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> a5 == to_add:</span><br><span class="line">            t5 += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> q[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="67-Add-Binary"><a href="#67-Add-Binary" class="headerlink" title="67.Add Binary"></a>67.Add Binary</h3><p>实现二进制加法。<br><a href="https://leetcode.com/problems/add-binary/description/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: a &#x3D; &quot;11&quot;, b &#x3D; &quot;1&quot;</span><br><span class="line">Output: &quot;100&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法一：按照加法的二进制思想来计算，不过Runtime大约100ms。后来试着将list comprehension拆成一个for循环，也并没有提高速度。居然beats只有4%，难道大部分人都用的bin。讨论区简单翻了了一下，没有找到一个高效的pythonic的方法。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addBinary</span><span class="params">(self, a, b)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(a) &gt; len(b):</span><br><span class="line">        b = b.zfill(len(a))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        a = a.zfill(len(b))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> int(b):</span><br><span class="line">        sum_not_carry = <span class="string">''</span>.join([str(int(a[i]) ^ int(b[i])) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(a))])</span><br><span class="line">        carry = <span class="string">''</span>.join([str(int(a[i]) &amp; int(b[i])) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(a))])</span><br><span class="line">        a, b = <span class="string">"0"</span>+sum_not_carry, carry+<span class="string">'0'</span></span><br><span class="line">    <span class="keyword">return</span> a.lstrip(<span class="string">'0'</span>) <span class="keyword">if</span> a != <span class="string">'0'</span> <span class="keyword">else</span> <span class="string">'0'</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="202-Happy-Number"><a href="#202-Happy-Number" class="headerlink" title="202. Happy Number"></a>202. Happy Number</h3><p>判断是否是欢乐数。进行所有位的平方和运算，最后为1的是欢乐数。<br><a href="https://leetcode.com/problems/happy-number/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 19</span><br><span class="line">Output: true</span><br><span class="line">Explanation: </span><br><span class="line">1**2 + 9**2 &#x3D; 82</span><br><span class="line">8**2 + 2**2 &#x3D; 68</span><br><span class="line">6**2 + 8**2 &#x3D; 100</span><br><span class="line">1**2 + 0**2 + 0**2 &#x3D; 1</span><br></pre></td></tr></table></figure>

<ul>
<li><p>思路，使用一个字典映射0~9的平方值，然后如果死循环的话，各位数的和一定存在着一种循环，所以用一个set来判断是否重复。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isHappy</span><span class="params">(self, n)</span>:</span></span><br><span class="line">    squares = &#123;str(k): k**<span class="number">2</span> <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">10</span>)&#125;</span><br><span class="line">    sum_digit = set()</span><br><span class="line">    <span class="keyword">while</span> n != <span class="number">1</span>:</span><br><span class="line">        n = sum(squares[digit] <span class="keyword">for</span> digit <span class="keyword">in</span> str(n))</span><br><span class="line">        <span class="keyword">if</span> n <span class="keyword">in</span> sum_digit:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            sum_digit.add(n)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="231-Power-of-Two"><a href="#231-Power-of-Two" class="headerlink" title="231. Power of Two"></a>231. Power of Two</h3><p>判断一个数是否是2的n次方。思路也就是判断这个数的二进制形式是否只有一个’1’。<br><a href="https://leetcode.com/problems/power-of-two" target="_blank" rel="noopener">查看原题</a></p>
<ul>
<li><p>方法一：二进制统计1。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isPowerOfTwo</span><span class="params">(self, n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> n &gt; <span class="number">0</span> <span class="keyword">and</span> bin(n).count(<span class="string">'1'</span>) == <span class="number">1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>方法三：如果一个数n的二进制只有一个1，那么n&amp;(n-1)一定为0。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isPowerOfTwo</span><span class="params">(self, n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> n &gt; <span class="number">0</span> <span class="keyword">and</span> (n&amp;n<span class="number">-1</span>) == <span class="number">0</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="342-Power-of-Four"><a href="#342-Power-of-Four" class="headerlink" title="342. Power of Four"></a>342. Power of Four</h3><p>判断一个数是否是4的n次方。<br><a href="https://leetcode.com/problems/power-of-four/" target="_blank" rel="noopener">查看原题</a></p>
<ul>
<li><p>方法一：从简单入手通过231题，了解到了2的n次方特点是，二进制形式只有一个’1’，那么4的n次方就是不但只有一个’1’，后面还跟了偶数个’0’。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isPowerOfFour</span><span class="params">(self, num)</span>:</span></span><br><span class="line">    <span class="comment"># return num &gt; 0 and (num &amp; num-1)==0 and bin(num)[2:].count('0')&amp;1==0</span></span><br><span class="line">    <span class="keyword">return</span> num &gt; <span class="number">0</span> <span class="keyword">and</span> (num &amp; num<span class="number">-1</span>)==<span class="number">0</span> <span class="keyword">and</span> len(bin(num))&amp;<span class="number">1</span>==<span class="number">1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>方法三：也可以使用正则。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isPowerOfFour</span><span class="params">(self, num)</span>:</span></span><br><span class="line">    <span class="keyword">import</span> re</span><br><span class="line">    <span class="keyword">return</span> bool(re.match(<span class="string">r'^0b1(00)*$'</span>,bin(num)))</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="292-Nim-Game"><a href="#292-Nim-Game" class="headerlink" title="292. Nim Game"></a>292. Nim Game</h3><p>说，有这么一堆石头，一次只能拿1~3个，拿到最后一个石头的人获胜。求n堆石头，你先拿是否可以获胜。<br><a href="https://leetcode.com/problems/nim-game/" target="_blank" rel="noopener">查看原题</a></p>
<ul>
<li><p>思路：找规律，发现只有最后剩4个石头的时候，此时轮到谁，谁输。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">canWinNim</span><span class="params">(self, n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> n % <span class="number">4</span> != <span class="number">0</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="400-Nth-Digit"><a href="#400-Nth-Digit" class="headerlink" title="400. Nth Digit"></a>400. Nth Digit</h3><p>找出无限整数序列中的第n个数字。<br><a href="https://leetcode.com/problems/nth-digit/description/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">11</span><br><span class="line">Output:</span><br><span class="line">0</span><br><span class="line">Explanation:</span><br><span class="line">The 11th digit of the sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ... is a 0, which is part of the number 10.</span><br></pre></td></tr></table></figure>

<ul>
<li><p>思路，根据n的位数，将无限序列分为几个范围。</p>
<ol>
<li><p>寻找范围。寻找n处于哪个范围，是1<del>9，还是10</del>99，例如n=15。则需要跳过1<del>9的范围，而这个范围有size*step个数字，所以问题变成在10</del>99范围上寻找第15-1*9=6个数。</p>
</li>
<li><p>定位数字。10~99范围中是从10开始的，每一个数都有两位数字，所以最终数字为10+(6-1)//2，因为索引从0开始，所以需要-1。</p>
</li>
<li><p>定位数字的位。上一步找到了数字为12，对size求余就可以知道，’12’[(6-1)%2]=’2’。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findNthDigit</span><span class="params">(self, n)</span>:</span></span><br><span class="line">    start, step, size = <span class="number">1</span>, <span class="number">9</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; size * step:</span><br><span class="line">        n, start, step, size = n-size*step, start*<span class="number">10</span>, step*<span class="number">10</span>, size+<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> int(str(start + (n<span class="number">-1</span>)//size)[(n<span class="number">-1</span>) % size])</span><br></pre></td></tr></table></figure>

</li>
</ol>
</li>
</ul>
<h3 id="415-Add-Stings"><a href="#415-Add-Stings" class="headerlink" title="415. Add Stings"></a>415. Add Stings</h3><p>给定两个字符串表示的数字，把它们相加，这两个数的长度小于5100，不能使用任何BitIntegr库或是直接将其转换为整数。ps: 题中要求不将输入直接转换成int，所以我个人认为int还是可以使用的，有一些答案中是使用了ord来做运算。<br><a href="https://leetcode.com/problems/add-strings/" target="_blank" rel="noopener">查看原题</a></p>
<ul>
<li><p>使用zip_longest。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addStrings</span><span class="params">(self, num1, num2)</span>:</span></span><br><span class="line">    <span class="keyword">from</span> itertools <span class="keyword">import</span> zip_longest</span><br><span class="line">    nums = list(zip_longest(num1[::<span class="number">-1</span>], num2[::<span class="number">-1</span>], fillvalue=<span class="string">'0'</span>))</span><br><span class="line">    carry, res = <span class="number">0</span>, <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> digits <span class="keyword">in</span> nums:</span><br><span class="line">        d1, d2 = map(int, digits)</span><br><span class="line">        carry, val = divmod(d1+d2+carry, <span class="number">10</span>)</span><br><span class="line">        res = res + str(val)</span><br><span class="line">    res = res <span class="keyword">if</span> carry==<span class="number">0</span> <span class="keyword">else</span> res+str(carry)        </span><br><span class="line">    <span class="keyword">return</span> res[::<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="492-Construct-the-Rectangle"><a href="#492-Construct-the-Rectangle" class="headerlink" title="492. Construct the Rectangle"></a>492. Construct the Rectangle</h3><p>给定一个面积，求组成这个面积的长高差最小。<br><a href="https://leetcode.com/problems/construct-the-rectangle/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 4</span><br><span class="line">Output: [2, 2]</span><br><span class="line">Explanation: The target area is 4, and all the possible ways to construct it are [1,4], [2,2], [4,1]. </span><br><span class="line">But according to requirement 2, [1,4] is illegal; according to requirement 3,  [4,1] is not optimal compared to [2,2]. So the length L is 2, and the width W is 2.</span><br></pre></td></tr></table></figure>

<ul>
<li><p>解法</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">constructRectangle</span><span class="params">(self, area)</span>:</span></span><br><span class="line">    <span class="keyword">import</span> math</span><br><span class="line">    w = int(math.sqrt(area))</span><br><span class="line">    <span class="keyword">while</span> area % w != <span class="number">0</span>:</span><br><span class="line">        w -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> [area//w, w]</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="504-Base-7"><a href="#504-Base-7" class="headerlink" title="504. Base 7"></a>504. Base 7</h3><p>10进制转7进制。<br><a href="https://leetcode.com/problems/base-7/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 100</span><br><span class="line">Output: &quot;202&quot;</span><br><span class="line">Input: -7</span><br><span class="line">Output: &quot;-10&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>需要注意负数。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convertToBase7</span><span class="params">(self, num: int)</span> -&gt; str:</span></span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">0</span>: <span class="keyword">return</span> <span class="string">'0'</span></span><br><span class="line">    n, ans = abs(num), <span class="string">''</span></span><br><span class="line">    <span class="keyword">while</span> n:</span><br><span class="line">        n, val = divmod(n, <span class="number">7</span>)</span><br><span class="line">        ans = str(val) + ans</span><br><span class="line">    <span class="keyword">return</span> ans <span class="keyword">if</span> num &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">'-'</span>+ans</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="970-Powerful-Integers"><a href="#970-Powerful-Integers" class="headerlink" title="970. Powerful Integers"></a>970. Powerful Integers</h3><p>求满足x^i+y^j &lt;= bound的所有和。<br><a href="https://leetcode.com/contest/weekly-contest-118/problems/powerful-integers/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: x &#x3D; 2, y &#x3D; 3, bound &#x3D; 10</span><br><span class="line">Output: [2,3,4,5,7,9,10]</span><br><span class="line">Explanation: </span><br><span class="line">2 &#x3D; 2^0 + 3^0</span><br><span class="line">3 &#x3D; 2^1 + 3^0</span><br><span class="line">4 &#x3D; 2^0 + 3^1</span><br><span class="line">5 &#x3D; 2^1 + 3^1</span><br><span class="line">7 &#x3D; 2^2 + 3^1</span><br><span class="line">9 &#x3D; 2^3 + 3^0</span><br><span class="line">10 &#x3D; 2^0 + 3^2</span><br></pre></td></tr></table></figure>

<ul>
<li><p>这题难得地方在于两个循环的临界值，貌似我这样写也不是最优解，原题的Solution中给定了2**18&gt;bound的最大值。所以两个范围都是18。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">powerfulIntegers</span><span class="params">(self, x, y, bound)</span>:</span></span><br><span class="line">    res = set()</span><br><span class="line">    imax = self.get_max(x, bound) + <span class="number">1</span></span><br><span class="line">    jmax = self.get_max(y, bound) + <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(imax):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(jmax):</span><br><span class="line">            <span class="keyword">if</span> x**i + y**j &lt;= bound:</span><br><span class="line">                res.add(x**i+y**j)</span><br><span class="line">    <span class="keyword">return</span> list(res)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_max</span><span class="params">(self, n, bound)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(bound//n + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> n ** i &gt;= bound:</span><br><span class="line">                <span class="keyword">return</span> i</span><br><span class="line">        <span class="keyword">return</span> bound//n + <span class="number">1</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="973-K-Closest-Points-to-Origin"><a href="#973-K-Closest-Points-to-Origin" class="headerlink" title="973. K Closest Points to Origin"></a>973. K Closest Points to Origin</h3><p>求离原点最近的K个坐标点。<br><a href="https://leetcode.com/contest/weekly-contest-119/problems/k-closest-points-to-origin/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: points &#x3D; [[1,3],[-2,2]], K &#x3D; 1</span><br><span class="line">Output: [[-2,2]]</span><br><span class="line">Explanation: </span><br><span class="line">The distance between (1, 3) and the origin is sqrt(10).</span><br><span class="line">The distance between (-2, 2) and the origin is sqrt(8).</span><br><span class="line">Since sqrt(8) &lt; sqrt(10), (-2, 2) is closer to the origin.</span><br><span class="line">We only want the closest K &#x3D; 1 points from the origin, so the answer is just [[-2,2]].</span><br></pre></td></tr></table></figure>

<ul>
<li><p>easy</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">kClosest</span><span class="params">(self, points, K)</span>:</span></span><br><span class="line">    res = sorted(points, key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>]**<span class="number">2</span> + x[<span class="number">1</span>]**<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> res[:K]</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="976-Largest-Perimeter-Triangle"><a href="#976-Largest-Perimeter-Triangle" class="headerlink" title="976. Largest Perimeter Triangle"></a>976. Largest Perimeter Triangle</h3><p>给定一个边长数组，求能组成的三角形的最长周长。<br><a href="https://leetcode.com/contest/weekly-contest-119/problems/largest-perimeter-triangle/" target="_blank" rel="noopener">查看原题</a></p>
<ul>
<li><p>就是长度为3的滑动窗口。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">largestPerimeter</span><span class="params">(self, A)</span>:</span></span><br><span class="line">    res = sorted(A, reverse=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(res)<span class="number">-2</span>):</span><br><span class="line">        <span class="keyword">if</span> sum(res[i+<span class="number">1</span>:i+<span class="number">3</span>]) &gt; res[i]:</span><br><span class="line">            <span class="keyword">return</span> sum(res[i:i+<span class="number">3</span>])</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="628-Maximum-Product-of-Three-Numbers"><a href="#628-Maximum-Product-of-Three-Numbers" class="headerlink" title="628. Maximum Product of Three Numbers"></a>628. Maximum Product of Three Numbers</h3><p>数组中三个数的最大乘积。元素范围[-1000, 1000]。<br><a href="https://leetcode.com/problems/maximum-product-of-three-numbers/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,2,3,4]</span><br><span class="line">Output: 24</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法一：排序。在正数个数大于等于3的时候，显然最大的三个数就可以产生最大的乘积。而当正数个数不够的时候，那么必须需要两个最小的负数（即绝对值最大），和一个最大的正数。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maximumProduct</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">    ary = sorted(nums)</span><br><span class="line">    <span class="keyword">return</span> max((ary[<span class="number">0</span>]*ary[<span class="number">1</span>]*ary[<span class="number">-1</span>], ary[<span class="number">-3</span>]*ary[<span class="number">-2</span>]*ary[<span class="number">-1</span>]))</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：使用heapq.</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maximumProduct</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">    <span class="keyword">import</span> heapq</span><br><span class="line">    <span class="keyword">from</span> operator <span class="keyword">import</span> mul</span><br><span class="line">    <span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line">    three_max = heapq.nlargest(<span class="number">3</span>, nums)</span><br><span class="line">    two_min = heapq.nsmallest(<span class="number">2</span>, nums)</span><br><span class="line">    <span class="keyword">return</span> max(reduce(mul, three_max), reduce(mul, two_min + three_max[:<span class="number">1</span>]))</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="728-Self-Dividing-Numbers"><a href="#728-Self-Dividing-Numbers" class="headerlink" title="728. Self Dividing Numbers"></a>728. Self Dividing Numbers</h3><p>自整除数字，一个数字能够被本身的每个数字整除，并且不能有0，求某个范围内所有的数。<br><a href="https://leetcode.com/problems/self-dividing-numbers/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">left &#x3D; 1, right &#x3D; 22</span><br><span class="line">Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]</span><br></pre></td></tr></table></figure>

<ul>
<li><p>Brute Force. 此题强行使用列表生成式没有意义。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selfDividingNumbers</span><span class="params">(self, left, right)</span>:</span></span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(left, right+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> str(i):</span><br><span class="line">            <span class="keyword">if</span> int(char)==<span class="number">0</span> <span class="keyword">or</span> i % int(char)!=<span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            res.append(i)</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="836-Rectangle-Overlap"><a href="#836-Rectangle-Overlap" class="headerlink" title="836. Rectangle Overlap"></a>836. Rectangle Overlap</h3><p>矩形是否重叠，矩形的边平行于坐标轴。<br><a href="https://leetcode.com/problems/rectangle-overlap/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: rec1 &#x3D; [0,0,2,2], rec2 &#x3D; [1,1,3,3]</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure>

<ul>
<li><p>解法</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isRectangleOverlap</span><span class="params">(self, rec1: <span class="string">'List[int]'</span>, rec2: <span class="string">'List[int]'</span>)</span> -&gt; 'bool':</span></span><br><span class="line">    <span class="keyword">return</span> rec2[<span class="number">0</span>] &lt; rec1[<span class="number">2</span>] <span class="keyword">and</span> rec1[<span class="number">0</span>] &lt; rec2[<span class="number">2</span>] <span class="keyword">and</span> \</span><br><span class="line">           rec2[<span class="number">1</span>] &lt; rec1[<span class="number">3</span>] <span class="keyword">and</span> rec1[<span class="number">1</span>] &lt; rec2[<span class="number">3</span>]</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="991-Broken-Calculator"><a href="#991-Broken-Calculator" class="headerlink" title="991. Broken Calculator"></a>991. Broken Calculator</h3><p>坏掉的计算器，只能*2或者-1，使X变为Y。<br><a href="https://leetcode.com/problems/broken-calculator/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: X &#x3D; 5, Y &#x3D; 8</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: Use decrement and then double &#123;5 -&gt; 4 -&gt; 8&#125;.</span><br></pre></td></tr></table></figure>

<ul>
<li><p>如果从X到Y问题会变得复杂，不确定什么时候该*2或者是-1。所以逆向思维从Y变成X。因为如果Y是奇数，那么必定在+1操作后要/2，这里将其合并。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">brokenCalc</span><span class="params">(self, X: <span class="string">'int'</span>, Y: <span class="string">'int'</span>)</span> -&gt; 'int':</span></span><br><span class="line">    <span class="keyword">return</span> X - Y <span class="keyword">if</span> X &gt;= Y <span class="keyword">else</span> <span class="number">1</span>+(Y&amp;<span class="number">1</span>)+self.brokenCalc(X, (Y+<span class="number">1</span>)//<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="908-Smallest-Range-I"><a href="#908-Smallest-Range-I" class="headerlink" title="908. Smallest Range I"></a>908. Smallest Range I</h3><p>给定一个数组，和一个K，数组里的数加上-k&lt;=x&lt;=k的任意一个数字后，求数组最大数和最小数的，最小差。<br><a href="https://leetcode.com/problems/smallest-range-i/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: A &#x3D; [0,10], K &#x3D; 2</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: B &#x3D; [2,8]</span><br></pre></td></tr></table></figure>

<ul>
<li><p>解法</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">smallestRangeI</span><span class="params">(self, A: <span class="string">'List[int]'</span>, K: <span class="string">'int'</span>)</span> -&gt; 'int':</span></span><br><span class="line">    <span class="keyword">return</span> max(max(A) - min(A) - <span class="number">2</span>*K, <span class="number">0</span>)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="949-Largest-Time-for-Given-Digits"><a href="#949-Largest-Time-for-Given-Digits" class="headerlink" title="949. Largest Time for Given Digits"></a>949. Largest Time for Given Digits</h3><p>给定四个数字，返回能生成的最大时间。24小时制。<br><a href="https://leetcode.com/problems/largest-time-for-given-digits/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,2,3,4]</span><br><span class="line">Output: &quot;23:41&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>解法</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">largestTimeFromDigits</span><span class="params">(self, A: <span class="string">'List[int]'</span>)</span> -&gt; 'str':</span></span><br><span class="line">    p = itertools.permutations(A)</span><br><span class="line">    <span class="keyword">return</span> max([<span class="string">'&#123;&#125;&#123;&#125;:&#123;&#125;&#123;&#125;'</span>.format(*d) <span class="keyword">for</span> d <span class="keyword">in</span> p </span><br><span class="line">                <span class="keyword">if</span> d[:<span class="number">2</span>] &lt; (<span class="number">2</span>, <span class="number">4</span>) <span class="keyword">and</span> d[<span class="number">2</span>] &lt; <span class="number">6</span>] <span class="keyword">or</span> [<span class="string">''</span>])</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="914-X-of-a-Kind-in-a-Deck-of-Cards"><a href="#914-X-of-a-Kind-in-a-Deck-of-Cards" class="headerlink" title="914. X of a Kind in a Deck of Cards"></a>914. X of a Kind in a Deck of Cards</h3><p>有这样一堆数字卡牌，问是否存在一个X&gt;=2，使得将同样数字的卡牌分为每X个一组，并且刚好所有的卡牌分完。<br><a href="https://leetcode.com/problems/x-of-a-kind-in-a-deck-of-cards" target="_blank" rel="noopener">查看原题</a></p>
<ul>
<li><p>使用Counter来统计每个数字的个数，然后求这些数字的最大公约数是否大于等于2，这里思路卡了一下，因为没想到最大公约数可以通过reduce来计算，没考虑到是可以累积的。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hasGroupsSizeX</span><span class="params">(self, deck)</span>:</span></span><br><span class="line">    <span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line">    <span class="keyword">from</span> math <span class="keyword">import</span> gcd</span><br><span class="line">    <span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line">    <span class="keyword">return</span> reduce(gcd, Counter(deck).values()) &gt;= <span class="number">2</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="470-Implement-Rand10-Using-Rand7"><a href="#470-Implement-Rand10-Using-Rand7" class="headerlink" title="470. Implement Rand10() Using Rand7()"></a>470. Implement Rand10() Using Rand7()</h3><p>使用rand7实现rand10<br><a href="https://leetcode.com/problems/implement-rand10-using-rand7/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 3</span><br><span class="line">Output: [8,1,10]</span><br></pre></td></tr></table></figure>

<ul>
<li><p>解法</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rand10</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        x = (rand7()<span class="number">-1</span>)*<span class="number">7</span> + rand7()<span class="number">-1</span></span><br><span class="line">        <span class="keyword">if</span> x &lt; <span class="number">40</span>: </span><br><span class="line">            <span class="keyword">return</span> x%<span class="number">10</span> + <span class="number">1</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1006-Clumsy-Factorial"><a href="#1006-Clumsy-Factorial" class="headerlink" title="1006. Clumsy Factorial"></a>1006. Clumsy Factorial</h3><p>将一个阶乘的式子用*/+-替代，给出结果。<br><a href="https://leetcode.com/problems/clumsy-factorial/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 10</span><br><span class="line">Output: 12</span><br><span class="line">Explanation: 12 &#x3D; 10 * 9 &#x2F; 8 + 7 - 6 * 5 &#x2F; 4 + 3 - 2 * 1</span><br></pre></td></tr></table></figure>

<ul>
<li><p>解法</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clumsy</span><span class="params">(self, N: int)</span> -&gt; int:</span></span><br><span class="line">    op = itertools.cycle([<span class="string">'*'</span>, <span class="string">'//'</span>, <span class="string">'+'</span>, <span class="string">'-'</span>])</span><br><span class="line">    <span class="keyword">return</span> eval(<span class="string">''</span>.join(str(n)+next(op) <span class="keyword">if</span> n!=<span class="number">1</span> <span class="keyword">else</span> str(n) </span><br><span class="line">                        <span class="keyword">for</span> n <span class="keyword">in</span> range(N, <span class="number">0</span>, <span class="number">-1</span>)))</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1022-Smallest-Integer-Divisible-by-K"><a href="#1022-Smallest-Integer-Divisible-by-K" class="headerlink" title="1022. Smallest Integer Divisible by K"></a>1022. Smallest Integer Divisible by K</h3><p>最小的由1组成的能被K整除。<br><a href="https://leetcode.com/problems/smallest-integer-divisible-by-k/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 2</span><br><span class="line">Output: -1</span><br><span class="line">Explanation: There is no such positive integer N divisible by 2.</span><br></pre></td></tr></table></figure>

<ul>
<li><p>如果有2或5的质因数，那么不能整除。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">smallestRepunitDivByK</span><span class="params">(self, K: int)</span> -&gt; int:</span></span><br><span class="line">    <span class="keyword">if</span> K % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">or</span> K % <span class="number">5</span> == <span class="number">0</span>: <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    r = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> N <span class="keyword">in</span> range(<span class="number">1</span>, K + <span class="number">1</span>):</span><br><span class="line">        r = (r * <span class="number">10</span> + <span class="number">1</span>) % K</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> r: <span class="keyword">return</span> N</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1028-Convert-to-Base-2"><a href="#1028-Convert-to-Base-2" class="headerlink" title="1028. Convert to Base -2"></a>1028. Convert to Base -2</h3><p>10进制转成-2进制。<br><a href="https://leetcode.com/problems/convert-to-base-2/" target="_blank" rel="noopener">查看原题</a></p>
<ul>
<li><p>在二进制上加一个负号。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">baseNeg2</span><span class="params">(self, N: int)</span> -&gt; str:</span></span><br><span class="line">    ans = []</span><br><span class="line">    <span class="keyword">while</span> N:</span><br><span class="line">        ans.append(N &amp; <span class="number">1</span>)</span><br><span class="line">        N = -(N &gt;&gt; <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(map(str, ans[::<span class="number">-1</span>] <span class="keyword">or</span> [<span class="number">0</span>]))</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="313-Super-Ugly-Number"><a href="#313-Super-Ugly-Number" class="headerlink" title="313. Super Ugly Number"></a>313. Super Ugly Number</h3><p>根据指定的质数序列，找出第n个超级丑数。<br><a href="https://leetcode.com/problems/super-ugly-number/" target="_blank" rel="noopener">查看原题</a></p>
<ul>
<li><p>解法</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nthSuperUglyNumber</span><span class="params">(self, n: int, primes: List[int])</span> -&gt; int:</span></span><br><span class="line">    <span class="keyword">import</span> heapq <span class="keyword">as</span> hq</span><br><span class="line">    uglies = [<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gen_ugly</span><span class="params">(prime)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> ugly <span class="keyword">in</span> uglies:</span><br><span class="line">            <span class="keyword">yield</span> ugly * prime</span><br><span class="line">            </span><br><span class="line">    merged = hq.merge(*map(gen_ugly, primes))</span><br><span class="line">    <span class="keyword">while</span> len(uglies) &lt; n:</span><br><span class="line">        ugly = next(merged)</span><br><span class="line">        <span class="keyword">if</span> ugly != uglies[<span class="number">-1</span>]:</span><br><span class="line">            uglies.append(ugly)</span><br><span class="line">    <span class="keyword">return</span> uglies[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="869-Reordered-Power-of-2"><a href="#869-Reordered-Power-of-2" class="headerlink" title="869. Reordered Power of 2"></a>869. Reordered Power of 2</h3><p>重新排列一个数字的各位数，判断是否能组成2的幂。<br><a href="https://leetcode.com/problems/reordered-power-of-2/" target="_blank" rel="noopener">查看原题</a></p>
<ul>
<li><p>2的幂是指数上升的，所以，在范围内的数一共也没有几个。那么使用Counter来判断是否能组成这个数。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reorderedPowerOf2</span><span class="params">(self, N: int)</span> -&gt; bool:</span></span><br><span class="line">    c = Counter(str(N))</span><br><span class="line">    <span class="keyword">return</span> any(c==Counter(str(<span class="number">1</span>&lt;&lt;i)) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">30</span>))</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1025-Divisor-Game"><a href="#1025-Divisor-Game" class="headerlink" title="1025. Divisor Game"></a>1025. Divisor Game</h3><p>两个人做游戏，黑板上有个数N，每次找到一个0 &lt;x&lt;N的数，并且N能被x整除，然后替换这个N，直到找不出这样x，就输了。问给出这样一个数N，第一个人是否能赢。<br><a href="https://leetcode.com/problems/divisor-game/" target="_blank" rel="noopener">查看原题</a></p>
<ul>
<li><p>只要N为偶数就能赢</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">divisorGame</span><span class="params">(self, N: int)</span> -&gt; bool:</span></span><br><span class="line">    <span class="keyword">return</span> N &amp; <span class="number">1</span> == <span class="number">0</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1037-Valid-Boomerang"><a href="#1037-Valid-Boomerang" class="headerlink" title="1037. Valid Boomerang"></a>1037. Valid Boomerang</h3><p>验证三个坐标点是否共线。<br><a href="https://leetcode.com/problems/valid-boomerang/" target="_blank" rel="noopener">查看原题</a></p>
<ul>
<li><p>需要注意的是，除数为0 的情况，所以这里改成了乘法。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isBoomerang</span><span class="params">(self, points: List[List[int]])</span> -&gt; bool:</span></span><br><span class="line">    <span class="keyword">return</span> (points[<span class="number">1</span>][<span class="number">1</span>]-points[<span class="number">0</span>][<span class="number">1</span>])*(points[<span class="number">2</span>][<span class="number">0</span>]-points[<span class="number">1</span>][<span class="number">0</span>]) != \</span><br><span class="line">           (points[<span class="number">2</span>][<span class="number">1</span>]-points[<span class="number">1</span>][<span class="number">1</span>])*(points[<span class="number">1</span>][<span class="number">0</span>]-points[<span class="number">0</span>][<span class="number">0</span>])</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1041-Robot-Bounded-In-Circle"><a href="#1041-Robot-Bounded-In-Circle" class="headerlink" title="1041. Robot Bounded In Circle"></a>1041. Robot Bounded In Circle</h3><p>一个面向北的机器人进行三种操作，一种是前进，或者向左向右转。问一系列的操作中，无限循环时，机器人是否在绕圈。<br><a href="https://leetcode.com/problems/robot-bounded-in-circle/" target="_blank" rel="noopener">查看原题</a></p>
<ul>
<li><p>在一次之后，如果面向的不再是北，那么最后将会绕圈。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isRobotBounded</span><span class="params">(self, instructions: str)</span> -&gt; bool:</span></span><br><span class="line">    x, y, dx, dy = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> inst <span class="keyword">in</span> instructions:</span><br><span class="line">        <span class="keyword">if</span> inst == <span class="string">'G'</span>: x, y = x+dx, y+dy</span><br><span class="line">        <span class="keyword">elif</span> inst == <span class="string">'L'</span>: dx, dy = -dy, dx</span><br><span class="line">        <span class="keyword">elif</span> inst == <span class="string">'R'</span>: dx, dy = dy, -dx</span><br><span class="line">    <span class="keyword">return</span> (x == y == <span class="number">0</span>) <span class="keyword">or</span> (dx, dy) != (<span class="number">0</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1137-N-th-Tribonacci-Number"><a href="#1137-N-th-Tribonacci-Number" class="headerlink" title="1137. N-th Tribonacci Number"></a>1137. N-th Tribonacci Number</h3><p>三个数的斐波那契数列。<br><a href="https://leetcode.com/problems/n-th-tribonacci-number/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: n &#x3D; 4</span><br><span class="line">Output: 4</span><br><span class="line">Explanation:</span><br><span class="line">T_3 &#x3D; 0 + 1 + 1 &#x3D; 2</span><br><span class="line">T_4 &#x3D; 1 + 1 + 2 &#x3D; 4</span><br></pre></td></tr></table></figure>

<ul>
<li><p>解法</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tribonacci</span><span class="params">(self, n: int)</span> -&gt; int:</span></span><br><span class="line">    a, b, c = <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(n):</span><br><span class="line">        a, b, c = b, c, a+b+c</span><br><span class="line">    <span class="keyword">return</span> c</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1073-Adding-Two-Negabinary-Numbers"><a href="#1073-Adding-Two-Negabinary-Numbers" class="headerlink" title="1073. Adding Two Negabinary Numbers"></a>1073. Adding Two Negabinary Numbers</h3><p>两个-2进制的数相加。<br><a href="https://leetcode.com/problems/adding-two-negabinary-numbers/" target="_blank" rel="noopener">查看原题</a></p>
<ul>
<li><p>转成十进制相加，再转回-2进制。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addNegabinary</span><span class="params">(self, arr1: List[int], arr2: List[int])</span> -&gt; List[int]:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_ten</span><span class="params">(arr)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> sum(d*(<span class="number">-2</span>)**i <span class="keyword">for</span> i, d <span class="keyword">in</span> enumerate(arr[::<span class="number">-1</span>]))</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_neg_binary</span><span class="params">(n)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> n:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'0'</span></span><br><span class="line">        ans = <span class="string">''</span></span><br><span class="line">        <span class="keyword">while</span> n:</span><br><span class="line">            remainder = n % (<span class="number">-2</span>)</span><br><span class="line">            ans += str(abs(remainder))</span><br><span class="line">            n //= <span class="number">-2</span></span><br><span class="line">            n += (remainder &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> ans[::<span class="number">-1</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> to_neg_binary(to_ten(arr1) + to_ten(arr2))</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1154-Day-of-the-Year"><a href="#1154-Day-of-the-Year" class="headerlink" title="1154. Day of the Year"></a>1154. Day of the Year</h3><p>根据输入的日期，返回它是一年中的第几天。<br><a href="https://leetcode.com/problems/ordinal-number-of-date/" target="_blank" rel="noopener">查看原题</a></p>
<ul>
<li><p>使用了datetime库，开始还自己手动减</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dayOfYear</span><span class="params">(self, date: str)</span> -&gt; int:</span></span><br><span class="line">    <span class="keyword">import</span> datetime</span><br><span class="line">    date = datetime.datetime.strptime(date, <span class="string">'%Y-%m-%d'</span>)</span><br><span class="line">    <span class="keyword">return</span> date.timetuple().tm_yday</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1155-Number-of-Dice-Rolls-With-Target-Sum"><a href="#1155-Number-of-Dice-Rolls-With-Target-Sum" class="headerlink" title="1155. Number of Dice Rolls With Target Sum"></a>1155. Number of Dice Rolls With Target Sum</h3><p>扔一个f面的 骰子d次，结果为target的次数。<br><a href="https://leetcode.com/problems/number-of-dice-rolls-with-target-sum/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: d &#x3D; 2, f &#x3D; 6, target &#x3D; 7</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: </span><br><span class="line">You throw two dice, each with 6 faces.  There are 6 ways to get a sum of 7:</span><br><span class="line">1+6, 2+5, 3+4, 4+3, 5+2, 6+1.</span><br></pre></td></tr></table></figure>

<ul>
<li><p>解法</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">numRollsToTarget</span><span class="params">(self, d: int, f: int, target: int)</span> -&gt; int:</span></span><br><span class="line">    last_p = collections.defaultdict(int)</span><br><span class="line">    last_p.update(&#123;d: <span class="number">1</span> <span class="keyword">for</span> d <span class="keyword">in</span> range(<span class="number">1</span>, f+<span class="number">1</span>)&#125;)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, d+<span class="number">1</span>):</span><br><span class="line">        new_p = collections.defaultdict(int)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i, i*f+<span class="number">1</span>):</span><br><span class="line">            new_p[j] = sum(last_p[j-k] <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">1</span>, f+<span class="number">1</span>))</span><br><span class="line">        last_p = new_p</span><br><span class="line">    <span class="keyword">return</span> last_p[target] % (<span class="number">10</span>**<span class="number">9</span>+<span class="number">7</span>)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1093-Statistics-from-a-Large-Sample"><a href="#1093-Statistics-from-a-Large-Sample" class="headerlink" title="1093. Statistics from a Large Sample"></a>1093. Statistics from a Large Sample</h3><p>统计大量的样本数据，求最小值，最大值，平均值，众数。<br><a href="https://leetcode.com/problems/statistics-from-a-large-sample/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: count &#x3D; [0,1,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]</span><br><span class="line">Output: [1.00000,3.00000,2.37500,2.50000,3.00000]</span><br></pre></td></tr></table></figure>

<ul>
<li><p>中位数的求法这里没想到，使用二分可以完美的解决奇偶问题。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sampleStats</span><span class="params">(self, count: List[int])</span> -&gt; List[float]:</span></span><br><span class="line">    n = sum(count)</span><br><span class="line">    mi = next(i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">255</span>) <span class="keyword">if</span> count[i]) * <span class="number">1.0</span></span><br><span class="line">    ma = next(i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">255</span>, <span class="number">-1</span>, <span class="number">-1</span>) <span class="keyword">if</span> count[i]) * <span class="number">1.0</span></span><br><span class="line">    mean = sum(i * val <span class="keyword">for</span> i, val <span class="keyword">in</span> enumerate(count)) * <span class="number">1.0</span> / n</span><br><span class="line">    mode = count.index(max(count)) * <span class="number">1.0</span></span><br><span class="line">    cc = list(itertools.accumulate(count))</span><br><span class="line">    left = bisect.bisect(cc, (n<span class="number">-1</span>)//<span class="number">2</span>)</span><br><span class="line">    right = bisect.bisect(cc, n//<span class="number">2</span>)</span><br><span class="line">    median = (left + right) / <span class="number">2.0</span></span><br><span class="line">    <span class="keyword">return</span> mi, ma, mean, median, mode</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1103-Distribute-Candies-to-People"><a href="#1103-Distribute-Candies-to-People" class="headerlink" title="1103. Distribute Candies to People"></a>1103. Distribute Candies to People</h3><p>发糖果，按照顺序每个人比上一人多一颗，发到最后再循环。<br><a href="https://leetcode.com/problems/distribute-candies-to-people/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: candies &#x3D; 7, num_people &#x3D; 4</span><br><span class="line">Output: [1,2,3,1]</span><br><span class="line">Explanation:</span><br><span class="line">On the first turn, ans[0] +&#x3D; 1, and the array is [1,0,0,0].</span><br><span class="line">On the second turn, ans[1] +&#x3D; 2, and the array is [1,2,0,0].</span><br><span class="line">On the third turn, ans[2] +&#x3D; 3, and the array is [1,2,3,0].</span><br><span class="line">On the fourth turn, ans[3] +&#x3D; 1 (because there is only one candy left), and the final array is [1,2,3,1].</span><br></pre></td></tr></table></figure>

<ul>
<li><p>解法</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">distributeCandies</span><span class="params">(self, candies: int, n: int)</span> -&gt; List[int]:</span></span><br><span class="line">    ans = [<span class="number">0</span>] * n</span><br><span class="line">    cur = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> candies &gt; <span class="number">0</span>:</span><br><span class="line">        ans[cur%n<span class="number">-1</span>] += min(candies, cur)</span><br><span class="line">        candies -= cur</span><br><span class="line">        cur += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1109-Corporate-Flight-Bookings"><a href="#1109-Corporate-Flight-Bookings" class="headerlink" title="1109. Corporate Flight Bookings"></a>1109. Corporate Flight Bookings</h3><p>通过给定的一些区间，确定每天的座位数。<br><a href="https://leetcode.com/problems/corporate-flight-bookings/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: bookings &#x3D; [[1,2,10],[2,3,20],[2,5,25]], n &#x3D; 5</span><br><span class="line">Output: [10,55,45,25,25]</span><br></pre></td></tr></table></figure>

<ul>
<li><p>记录变化的状态，然后累加求结果。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">corpFlightBookings</span><span class="params">(self, bookings: List[List[int]], n: int)</span> -&gt; List[int]:</span></span><br><span class="line">    ans = [<span class="number">0</span>] * (n+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> s, e, v <span class="keyword">in</span> bookings:</span><br><span class="line">        ans[s<span class="number">-1</span>] += v</span><br><span class="line">        ans[e] -= v</span><br><span class="line">    <span class="keyword">return</span> list(itertools.accumulate(ans))[:<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1175-Prime-Arrangements"><a href="#1175-Prime-Arrangements" class="headerlink" title="1175. Prime Arrangements"></a>1175. Prime Arrangements</h3><p>质数排列。<br><a href="https://leetcode.com/problems/prime-arrangements/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: n &#x3D; 5</span><br><span class="line">Output: 12</span><br><span class="line">Explanation: For example [1,2,5,4,3] is a valid permutation, but [5,2,3,4,1] is not because the prime number 5 is at index 1.</span><br></pre></td></tr></table></figure>

<ul>
<li><p>解法</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">numPrimeArrangements</span><span class="params">(self, n: int)</span> -&gt; int:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countPrimes</span><span class="params">(n)</span>:</span></span><br><span class="line">        is_prime = [<span class="literal">False</span>]*<span class="number">2</span> + [<span class="literal">True</span>]*(n<span class="number">-2</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, int(n ** <span class="number">0.5</span>)+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> is_prime[i]:</span><br><span class="line">                is_prime[i*i:n:i] = [<span class="literal">False</span>] * len(is_prime[i*i:n:i])</span><br><span class="line">        <span class="keyword">return</span> sum(is_prime)</span><br><span class="line">    c = countPrimes(n+<span class="number">1</span>)</span><br><span class="line">    ans = math.factorial(c) * math.factorial(n-c)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> ans % (<span class="number">10</span>**<span class="number">9</span>+<span class="number">7</span>)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1360-Number-of-Days-Between-Two-Dates"><a href="#1360-Number-of-Days-Between-Two-Dates" class="headerlink" title="1360. Number of Days Between Two Dates"></a>1360. Number of Days Between Two Dates</h3><p>计算两个日期之间的天数。<br><a href="https://leetcode.com/problems/number-of-days-between-two-dates/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: date1 &#x3D; &quot;2020-01-15&quot;, date2 &#x3D; &quot;2019-12-31&quot;</span><br><span class="line">Output: 15</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法一：简单的datetime模块方式。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">daysBetweenDates</span><span class="params">(self, date1: str, date2: str)</span> -&gt; int:</span></span><br><span class="line">    <span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">    d1 = datetime.strptime(date1, <span class="string">'%Y-%m-%d'</span>)</span><br><span class="line">    d2 = datetime.strptime(date2, <span class="string">'%Y-%m-%d'</span>)</span><br><span class="line">    <span class="keyword">return</span> abs((d2-d1).days)</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：有个公式，如果将1月二月看成是13月和14月，那么月份转化天数有个公式(153 * m + 8) // 5</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">daysBetweenDates</span><span class="params">(self, date1: str, date2: str)</span> -&gt; int:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(date)</span>:</span></span><br><span class="line">        y, m, d = map(int, date.split(<span class="string">'-'</span>))</span><br><span class="line">        <span class="keyword">if</span> m &lt; <span class="number">3</span>:</span><br><span class="line">            m += <span class="number">12</span></span><br><span class="line">            y -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">365</span> * y + y // <span class="number">4</span> + y // <span class="number">400</span> - y // <span class="number">100</span> + d + (<span class="number">153</span> * m + <span class="number">8</span>) // <span class="number">5</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> abs(f(date1) - f(date2))</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1363-Largest-Multiple-of-Three"><a href="#1363-Largest-Multiple-of-Three" class="headerlink" title="1363. Largest Multiple of Three"></a>1363. Largest Multiple of Three</h3><p>组成的最大的3的倍数。<br><a href="https://leetcode.com/problems/largest-multiple-of-three/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: digits &#x3D; [8,1,9]</span><br><span class="line">Output: &quot;981&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法一：简单的datetime模块方式。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">largestMultipleOfThree</span><span class="params">(self, A)</span>:</span></span><br><span class="line">    total = sum(A)</span><br><span class="line">    count = collections.Counter(A)</span><br><span class="line">    A.sort(reverse=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(i)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> count[i]:</span><br><span class="line">            A.remove(i)</span><br><span class="line">            count[i] -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> A: <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> any(A): <span class="keyword">return</span> <span class="string">'0'</span></span><br><span class="line">        <span class="keyword">if</span> sum(A) % <span class="number">3</span> == <span class="number">0</span>: <span class="keyword">return</span> <span class="string">''</span>.join(map(str, A))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> total % <span class="number">3</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> f(<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">if</span> total % <span class="number">3</span> == <span class="number">1</span> <span class="keyword">and</span> count[<span class="number">1</span>] + count[<span class="number">4</span>] + count[<span class="number">7</span>]:</span><br><span class="line">        <span class="keyword">return</span> f(<span class="number">1</span>) <span class="keyword">or</span> f(<span class="number">4</span>) <span class="keyword">or</span> f(<span class="number">7</span>)</span><br><span class="line">    <span class="keyword">if</span> total % <span class="number">3</span> == <span class="number">2</span> <span class="keyword">and</span> count[<span class="number">2</span>] + count[<span class="number">5</span>] + count[<span class="number">8</span>]:</span><br><span class="line">        <span class="keyword">return</span> f(<span class="number">2</span>) <span class="keyword">or</span> f(<span class="number">5</span>) <span class="keyword">or</span> f(<span class="number">8</span>)</span><br><span class="line">    <span class="keyword">if</span> total % <span class="number">3</span> == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> f(<span class="number">1</span>) <span class="keyword">or</span> f(<span class="number">1</span>) <span class="keyword">or</span> f(<span class="number">4</span>) <span class="keyword">or</span> f(<span class="number">4</span>) <span class="keyword">or</span> f(<span class="number">7</span>) <span class="keyword">or</span> f(<span class="number">7</span>)</span><br><span class="line">    <span class="keyword">return</span> f(<span class="number">2</span>) <span class="keyword">or</span> f(<span class="number">2</span>) <span class="keyword">or</span> f(<span class="number">5</span>) <span class="keyword">or</span> f(<span class="number">5</span>) <span class="keyword">or</span> f(<span class="number">8</span>) <span class="keyword">or</span> f(<span class="number">8</span>)</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Bit manipulation(位运算)</title>
    <url>/2016/09/28/bit-manipulation/</url>
    <content><![CDATA[<blockquote>
<p>这才是计算机运算的本质</p>
</blockquote>
<h2 id="关于位运算"><a href="#关于位运算" class="headerlink" title="关于位运算"></a>关于位运算</h2><p>位运算就是直接对整数在内存中的二进制位进行操作。</p>
<h2 id="LeetCode真题"><a href="#LeetCode真题" class="headerlink" title="LeetCode真题"></a>LeetCode真题</h2><h3 id="191-Number-of-1-Bits"><a href="#191-Number-of-1-Bits" class="headerlink" title="191. Number of 1 Bits"></a>191. Number of 1 Bits</h3><p>计算数字的二进制中有多少个1。<br><a href="https://leetcode.com/problems/number-of-1-bits/description/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 11</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: Integer 11 has binary representation 00000000000000000000000000001011</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法一：常规解法，使用1与n作与运算，如果不是0说明，含有一个1。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hamming_weight</span><span class="params">(n)</span>:</span></span><br><span class="line">    bits, mask = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">        <span class="keyword">if</span> n&amp;mask != <span class="number">0</span>:</span><br><span class="line">            bits += <span class="number">1</span></span><br><span class="line">        mask &lt;&lt;= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> bits</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：关键点是，一个数n和n-1的与运算操作，相当于去掉了最右面的1。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hamming_weigth</span><span class="params">(n)</span>:</span></span><br><span class="line">    bits = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n:</span><br><span class="line">        bits += <span class="number">1</span></span><br><span class="line">        n = (n<span class="number">-1</span>) &amp; n</span><br><span class="line">    <span class="keyword">return</span> bits</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="136-Single-Number"><a href="#136-Single-Number" class="headerlink" title="136. Single Number"></a>136. Single Number</h3><p>找出数组中不重复的元素。其它元素出现两次。<br><a href="https://leetcode.com/problems/single-number/description/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [4,1,2,1,2]</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure>

<ul>
<li><p>解</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">single_num</span><span class="params">(nums)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> x, y: x ^ y, nums)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="137-Single-Number-II"><a href="#137-Single-Number-II" class="headerlink" title="137. Single Number II"></a>137. Single Number II</h3><p>找出数组中出现一次的元素，其它元素出现三次。<br><a href="https://leetcode.com/problems/single-number-ii/description/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [2,2,3,2]</span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法一：找出单独元素每一位的值。如果把所有数字的二进制每一位加起来，如果某一位可以被3整除，则表示单独元素的该位为0，否则为1。以下使用count来表示每一位1的个数。假设count%3!=0为True，说明该元素i位为1，然后是用|=更新ans在第i个位置的值，这里也可以使用+=，但是效率稍慢。convert的作用是因为python中的int是个对象，且没有最大限制，不是在第32位使用1来表示负数。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleNumber</span><span class="params">(self, nums, n=<span class="number">3</span>)</span>:</span></span><br><span class="line">    ans = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> ((num &gt;&gt; i) &amp; <span class="number">1</span>):</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">        ans |= ((count%n!=<span class="number">0</span>) &lt;&lt; i)</span><br><span class="line">    <span class="keyword">return</span> self.convert(ans)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert</span><span class="params">(self, x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x &gt;= <span class="number">2</span>**<span class="number">31</span>:</span><br><span class="line">        x -= <span class="number">2</span>**<span class="number">32</span></span><br><span class="line">    <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法2：状态机解法</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleNumber</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">    ones, twos = <span class="number">0</span>, <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">        ones = (ones ^ nums[i]) &amp; ~twos</span><br><span class="line">        twos = (twos ^ nums[i]) &amp; ~ones</span><br><span class="line">    <span class="keyword">return</span> ones</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="260-Single-Number-III"><a href="#260-Single-Number-III" class="headerlink" title="260. Single Number III"></a>260. Single Number III</h3><p>找出数组中两个唯一出现一次的元素，其余元素均出现两次。<br><a href="https://leetcode.com/problems/single-number-iii/description/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:  [1,2,1,3,2,5]</span><br><span class="line">Output: [3,5]</span><br></pre></td></tr></table></figure>

<ul>
<li><p>思想：将这两个元素分到两个组，由于这两个数不相等，所以亦或结果不为0，也就是说二进制中至少有一位1，记为第n位。我们以第n位是否为1，把数组分为两个子数组。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleNumber</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">    total_xor = self.get_xor(nums)</span><br><span class="line">    mask = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> total_xor&amp;mask == <span class="number">0</span>:</span><br><span class="line">        mask &lt;&lt;= <span class="number">1</span></span><br><span class="line">    p1 = [num <span class="keyword">for</span> num <span class="keyword">in</span> nums <span class="keyword">if</span> num&amp;mask==<span class="number">0</span>]</span><br><span class="line">    p2 = [num <span class="keyword">for</span> num <span class="keyword">in</span> nums <span class="keyword">if</span> num&amp;mask!=<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> [self.get_xor(p1), self.get_xor(p2)]</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_xor</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">    <span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line">    <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> x, y: x ^ y, nums)</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="371-Sum-of-Two-Integers"><a href="#371-Sum-of-Two-Integers" class="headerlink" title="371. Sum of Two Integers"></a>371. Sum of Two Integers</h3><p>不用加减乘除做加法。<br><a href="https://leetcode.com/problems/sum-of-two-integers/description/" target="_blank" rel="noopener">查看原题</a></p>
<ul>
<li><p>实际上加法分为三个步骤</p>
<p>相加但不进位，1^0=1，1^1=0，0^0=0，所以第一步用异或。<br>只求进位的结果，只有两个1才会进位，所以用&amp;，然后左移1位，表示要进的位。<br>把前两步的结果再重复1，2步，直到没有进位产生，即b=0。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSum</span><span class="params">(self, a, b)</span>:</span></span><br><span class="line">    <span class="comment"># 32 bits integer max</span></span><br><span class="line">    MAX = <span class="number">0x7FFFFFFF</span>  <span class="comment"># 2**31-1</span></span><br><span class="line">    <span class="comment"># 32 bits interger min  </span></span><br><span class="line">    MIN = <span class="number">0x80000000</span>  <span class="comment"># -2**31</span></span><br><span class="line">    <span class="comment"># mask to get last 32 bits</span></span><br><span class="line">    mask = <span class="number">0xFFFFFFFF</span>  <span class="comment"># 2*32-1</span></span><br><span class="line">    <span class="keyword">while</span> b != <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># ^ get different bits and &amp; gets double 1s, &lt;&lt; moves carry</span></span><br><span class="line">        a, b = (a ^ b) &amp; mask, ((a &amp; b) &lt;&lt; <span class="number">1</span>) &amp; mask</span><br><span class="line">    <span class="comment"># if a is negative, get a's 32 bits complement positive first</span></span><br><span class="line">    <span class="comment"># then get 32-bit positive's Python complement negative</span></span><br><span class="line">    <span class="keyword">return</span> a <span class="keyword">if</span> a &lt;= MAX <span class="keyword">else</span> ~(a ^ mask)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="190-Reverse-Bits"><a href="#190-Reverse-Bits" class="headerlink" title="190. Reverse Bits"></a>190. Reverse Bits</h3><p>返回一个数的二进制的倒序的十进制。<br><a href="https://leetcode.com/problems/reverse-bits/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 43261596</span><br><span class="line">Output: 964176192</span><br><span class="line">Explanation: 43261596 represented in binary as 00000010100101000001111010011100, </span><br><span class="line">             return 964176192 represented in binary as 00111001011110000010100101000000.</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法一：使用原生库。ljust表示在右侧补’0’。或者使用format来补0。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverseBits</span><span class="params">(self, n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> int(bin(n)[:<span class="number">1</span>:<span class="number">-1</span>].ljust(<span class="number">32</span>, <span class="string">'0'</span>), <span class="number">2</span>)</span><br><span class="line">    <span class="comment"># return int('&#123;:0&lt;32s&#125;'.format(bin(n)[:1:-1]), 2)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：自己实现进制转换，使用位运算优化。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverseBits</span><span class="params">(self, n)</span>:</span></span><br><span class="line">    code = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">        code = (code&lt;&lt;<span class="number">1</span>) + (n&amp;<span class="number">1</span>)</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> code</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="389-Find-the-Difference"><a href="#389-Find-the-Difference" class="headerlink" title="389. Find the Difference"></a>389. Find the Difference</h3><p>s和t两个由小写字母组成的字符串，t是由s打乱顺序并再随机添加一个小写字母组成。<br><a href="https://leetcode.com/problems/find-the-difference/description/" target="_blank" rel="noopener">查看原题</a></p>
<ul>
<li><p>方法一：使用Collection。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findTheDifference</span><span class="params">(self, s, t)</span>:</span></span><br><span class="line">    <span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line">    <span class="keyword">return</span> next((Counter(t) - Counter(s)).elements())</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：使用异或。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findTheDifference</span><span class="params">(self, s, t)</span>:</span></span><br><span class="line">    <span class="keyword">from</span> operator <span class="keyword">import</span> xor</span><br><span class="line">    <span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line">    <span class="keyword">return</span> chr(reduce(xor, map(ord, s+t)))</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="401-Binary-Watch"><a href="#401-Binary-Watch" class="headerlink" title="401. Binary Watch"></a>401. Binary Watch</h3><p>有这样一个二进制的手表，输入一个n，表示有几个亮着的灯，返回所有可能出现的时间。时间范围为12小时制，即hours(0-11)，minutes(0-59)。<br><a href="https://leetcode.com/problems/binary-watch/description/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: n &#x3D; 1</span><br><span class="line">Return: [&quot;1:00&quot;, &quot;2:00&quot;, &quot;4:00&quot;, &quot;8:00&quot;, &quot;0:01&quot;, &quot;0:02&quot;, &quot;0:04&quot;, &quot;0:08&quot;, &quot;0:16&quot;, &quot;0:32&quot;]</span><br></pre></td></tr></table></figure>

<ul>
<li><p>遍历所有可能的时间，找到符合条件的。因为表中的数组都是二进制，所以’1’的个数就是亮灯的个数。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readBinaryWatch</span><span class="params">(self, num)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="string">'&#123;:d&#125;:&#123;:0&gt;2d&#125;'</span>.format(h, m)</span><br><span class="line">            <span class="keyword">for</span> h <span class="keyword">in</span> range(<span class="number">12</span>) <span class="keyword">for</span> m <span class="keyword">in</span> range(<span class="number">60</span>)</span><br><span class="line">            <span class="keyword">if</span> (bin(h)+bin(m)).count(<span class="string">'1'</span>) == num]</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="405-Convert-a-Number-to-Hexadecimal"><a href="#405-Convert-a-Number-to-Hexadecimal" class="headerlink" title="405. Convert a Number to Hexadecimal"></a>405. Convert a Number to Hexadecimal</h3><p>把一个32位有符号的整数转换成16进制。<br><a href="https://leetcode.com/problems/convert-a-number-to-hexadecimal/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">26</span><br><span class="line">Output:</span><br><span class="line">&quot;1a&quot;</span><br><span class="line"></span><br><span class="line">Input:</span><br><span class="line">-1</span><br><span class="line">Output:</span><br><span class="line">&quot;ffffffff&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>解法</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">toHex</span><span class="params">(self, num)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join([<span class="string">'0123456789abcdef'</span>[(num &gt;&gt; <span class="number">4</span> * i) &amp; <span class="number">15</span>]</span><br><span class="line">                     <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>)])[::<span class="number">-1</span>].lstrip(<span class="string">'0'</span>) <span class="keyword">or</span> <span class="string">'0'</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="461-Hamming-Distance"><a href="#461-Hamming-Distance" class="headerlink" title="461. Hamming Distance"></a>461. Hamming Distance</h3><p>求两个正数的原码中不同位的个数。<br><a href="https://leetcode.com/problems/hamming-distance/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: x &#x3D; 1, y &#x3D; 4</span><br><span class="line">Output: 2</span><br><span class="line">Explanation:</span><br><span class="line">1   (0 0 0 1)</span><br><span class="line">4   (0 1 0 0)</span><br><span class="line">       ↑   ↑</span><br><span class="line">The above arrows point to positions where the corresponding bits are different.</span><br></pre></td></tr></table></figure>

<ul>
<li><p>解法</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hammingDistance</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> bin(x ^ y).count(<span class="string">'1'</span>)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="476-Number-Complement"><a href="#476-Number-Complement" class="headerlink" title="476. Number Complement"></a>476. Number Complement</h3><p>给定一个正数，求其原码的按位取反后的数。<br><a href="https://leetcode.com/problems/number-complement/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 5</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法一：其实就是求101和111的异或。所以先找到111。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findComplement</span><span class="params">(self, num)</span>:</span></span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= num:</span><br><span class="line">        i &lt;&lt;= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> (i<span class="number">-1</span>) ^ num</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：更少的位移。核心思想还是找到111。比如一个8位数，最高代表符号：1000000，先将其右移1位，使得左边两位都变成1。然后再右移2位，使得左边四位变成1，以此类推，8位数最多移动3次就可以得到1111111，32位则还需要再移动2次。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findComplement</span><span class="params">(self, num)</span>:</span></span><br><span class="line">    mask = num</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        mask |= mask &gt;&gt; (<span class="number">2</span>**i)</span><br><span class="line">    <span class="keyword">return</span> num ^ mask</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="693-Binary-Number-with-Alternating-Bits"><a href="#693-Binary-Number-with-Alternating-Bits" class="headerlink" title="693. Binary Number with Alternating Bits"></a>693. Binary Number with Alternating Bits</h3><p>二进制是否是交替的0和1。<br><a href="https://leetcode.com/problems/binary-number-with-alternating-bits/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 5</span><br><span class="line">Output: True</span><br><span class="line">Explanation:</span><br><span class="line">The binary representation of 5 is: 101</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法一：除2法。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hasAlternatingBits</span><span class="params">(self, n)</span>:</span></span><br><span class="line">    n, cur = divmod(n, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">while</span> n:</span><br><span class="line">        <span class="keyword">if</span> cur == n % <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        n, cur = divmod(n, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：异或。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hasAlternatingBits</span><span class="params">(self, n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> n:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    num = n ^ (n &gt;&gt; <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">not</span> (num &amp; num+<span class="number">1</span>)</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="762-Prime-Number-of-Set-Bits-in-Binary-Representation"><a href="#762-Prime-Number-of-Set-Bits-in-Binary-Representation" class="headerlink" title="762. Prime Number of Set Bits in Binary Representation"></a>762. Prime Number of Set Bits in Binary Representation</h3><p>求某范围的所有自然数中，二进制中1的个数是质数的个数。<br><a href="https://leetcode.com/problems/prime-number-of-set-bits-in-binary-representation/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: L &#x3D; 10, R &#x3D; 15</span><br><span class="line">Output: 5</span><br><span class="line">Explanation:</span><br><span class="line">10 -&gt; 1010 (2 set bits, 2 is prime)</span><br><span class="line">11 -&gt; 1011 (3 set bits, 3 is prime)</span><br><span class="line">12 -&gt; 1100 (2 set bits, 2 is prime)</span><br><span class="line">13 -&gt; 1101 (3 set bits, 3 is prime)</span><br><span class="line">14 -&gt; 1110 (3 set bits, 3 is prime)</span><br><span class="line">15 -&gt; 1111 (4 set bits, 4 is not prime)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法一：direct.</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">countPrimeSetBits</span><span class="params">(self, L: <span class="string">'int'</span>, R: <span class="string">'int'</span>)</span> -&gt; 'int':</span></span><br><span class="line">    primes = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>&#125;</span><br><span class="line">    <span class="comment"># ans = 0</span></span><br><span class="line">    <span class="comment"># for num in range(L, R+1):</span></span><br><span class="line">    <span class="comment">#     if bin(num)[2:].count('1') in primes:</span></span><br><span class="line">    <span class="comment">#         ans += 1</span></span><br><span class="line">    <span class="comment"># return ans</span></span><br><span class="line">    <span class="keyword">return</span> sum(bin(n)[<span class="number">2</span>:].count(<span class="string">'1'</span>) <span class="keyword">in</span> primes <span class="keyword">for</span> n <span class="keyword">in</span> range(L, R+<span class="number">1</span>))</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：位运算。p 的2，3，5，7。。位是1，其余是0，这样在右移后，可&amp;1就可以判断这个数是否是质数。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">countPrimeSetBits</span><span class="params">(self, L: <span class="string">'int'</span>, R: <span class="string">'int'</span>)</span> -&gt; 'int':</span></span><br><span class="line">    p = int(<span class="string">'10100010100010101100'</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> sum(p &gt;&gt; bin(i).count(<span class="string">'1'</span>) &amp; <span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(L, R+<span class="number">1</span>))</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="868-Binary-Gap"><a href="#868-Binary-Gap" class="headerlink" title="868. Binary Gap"></a>868. Binary Gap</h3><p>二进制两个1的最大距离。<br><a href="https://leetcode.com/problems/binary-gap/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 22</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: </span><br><span class="line">22 in binary is 0b10110.</span><br><span class="line">In the binary representation of 22, there are three ones, and two consecutive pairs of 1&#39;s.</span><br><span class="line">The first consecutive pair of 1&#39;s have distance 2.</span><br><span class="line">The second consecutive pair of 1&#39;s have distance 1.</span><br><span class="line">The answer is the largest of these two distances, which is 2.</span><br></pre></td></tr></table></figure>

<ul>
<li><p>列表生成式。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binaryGap</span><span class="params">(self, N: <span class="string">'int'</span>)</span> -&gt; 'int':</span></span><br><span class="line">    one = [i <span class="keyword">for</span> i, v <span class="keyword">in</span> enumerate(bin(N)) <span class="keyword">if</span> v == <span class="string">'1'</span>]</span><br><span class="line">    <span class="comment"># return max([one[i+1] - one[i] for i in range(len(one)-1)] or [0])</span></span><br><span class="line">    <span class="keyword">return</span> max([b-a <span class="keyword">for</span> a, b <span class="keyword">in</span> zip(one, one[<span class="number">1</span>:])] <span class="keyword">or</span> [<span class="number">0</span>])</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="268-Missing-Number"><a href="#268-Missing-Number" class="headerlink" title="268. Missing Number"></a>268. Missing Number</h3><p>0~n中缺失的数字。<br><a href="https://leetcode.com/problems/missing-number/description/" target="_blank" rel="noopener">查看原题</a></p>
<ul>
<li><p>方法一：数学公式。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">missingNumber</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">    n = len(nums)</span><br><span class="line">    expected_sum = n*(n+<span class="number">1</span>) // <span class="number">2</span></span><br><span class="line">    actual_sum = sum(nums)</span><br><span class="line">    <span class="keyword">return</span> expected_sum - actual_sum</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：XOR.</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">missingNumber</span><span class="params">(self, nums: <span class="string">'List[int]'</span>)</span> -&gt; 'int':</span></span><br><span class="line">    missing = len(nums)</span><br><span class="line">    <span class="keyword">for</span> i, num <span class="keyword">in</span> enumerate(nums):</span><br><span class="line">        missing ^= i ^ num</span><br><span class="line">    <span class="keyword">return</span> missing</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1012-Complement-of-Base-10-Integer"><a href="#1012-Complement-of-Base-10-Integer" class="headerlink" title="1012. Complement of Base 10 Integer"></a>1012. Complement of Base 10 Integer</h3><p>非负数的反码。<br><a href="https://leetcode.com/problems/complement-of-base-10-integer/" target="_blank" rel="noopener">查看原题</a></p>
<ul>
<li><p>解法</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bitwiseComplement</span><span class="params">(self, N: int)</span> -&gt; int:</span></span><br><span class="line">    mask = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> mask &lt; N:</span><br><span class="line">        mask = (mask &lt;&lt; <span class="number">1</span>) + <span class="number">1</span></span><br><span class="line">    <span class="comment"># return mask - N</span></span><br><span class="line">    <span class="keyword">return</span> N ^ mask</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="1404-Number-of-Steps-to-Reduce-a-Number-in-Binary-Representation-to-One"><a href="#1404-Number-of-Steps-to-Reduce-a-Number-in-Binary-Representation-to-One" class="headerlink" title="1404. Number of Steps to Reduce a Number in Binary Representation to One"></a>1404. Number of Steps to Reduce a Number in Binary Representation to One</h3><p>几下操作可以将其变为1。偶数除以2，奇数+1.<br><a href="https://leetcode.com/problems/number-of-steps-to-reduce-a-number-in-binary-representation-to-one/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: s &#x3D; &quot;1101&quot;</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: &quot;1101&quot; corressponds to number 13 in their decimal representation.</span><br><span class="line">Step 1) 13 is odd, add 1 and obtain 14. </span><br><span class="line">Step 2) 14 is even, divide by 2 and obtain 7.</span><br><span class="line">Step 3) 7 is odd, add 1 and obtain 8.</span><br><span class="line">Step 4) 8 is even, divide by 2 and obtain 4.  </span><br><span class="line">Step 5) 4 is even, divide by 2 and obtain 2. </span><br><span class="line">Step 6) 2 is even, divide by 2 and obtain 1.</span><br></pre></td></tr></table></figure>

<ul>
<li><p>解法</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">numSteps</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br><span class="line">    i, mid_0 = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, len(s)):</span><br><span class="line">        <span class="keyword">if</span> s[j] == <span class="string">'1'</span>:</span><br><span class="line">            mid_0 += j - i - <span class="number">1</span></span><br><span class="line">            i = j</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">0</span>: <span class="keyword">return</span> len(s) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> mid_0 + <span class="number">1</span> + len(s)</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="201-Bitwise-AND-of-Numbers-Range"><a href="#201-Bitwise-AND-of-Numbers-Range" class="headerlink" title="201. Bitwise AND of Numbers Range"></a>201. Bitwise AND of Numbers Range</h3><p>范围内的数字求与运算和。<br><a href="https://leetcode.com/problems/bitwise-and-of-numbers-range/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [5,7]</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure>

<ul>
<li><p>解法</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rangeBitwiseAnd</span><span class="params">(self, m: int, n: int)</span> -&gt; int:</span></span><br><span class="line">    i = <span class="number">0</span> </span><br><span class="line">    <span class="keyword">while</span> m != n:</span><br><span class="line">        m &gt;&gt;= <span class="number">1</span></span><br><span class="line">        n &gt;&gt;= <span class="number">1</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> n &lt;&lt; i</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="1442-Count-Triplets-That-Can-Form-Two-Arrays-of-Equal-XOR"><a href="#1442-Count-Triplets-That-Can-Form-Two-Arrays-of-Equal-XOR" class="headerlink" title="1442. Count Triplets That Can Form Two Arrays of Equal XOR"></a>1442. Count Triplets That Can Form Two Arrays of Equal XOR</h3><p>数组中找出两段的异或和相等。<br><a href="https://leetcode.com/problems/count-triplets-that-can-form-two-arrays-of-equal-xor/" target="_blank" rel="noopener">查看原题</a></p>
<ul>
<li><p>找规律</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">countTriplets</span><span class="params">(self, arr: List[int])</span> -&gt; int:</span></span><br><span class="line">    m = list(itertools.accumulate([<span class="number">0</span>] + arr, operator.xor))</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(m)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, len(m)):</span><br><span class="line">            <span class="keyword">if</span> m[i] == m[j]:</span><br><span class="line">                count += j-i<span class="number">-1</span></span><br><span class="line">    <span class="keyword">return</span> count</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="1238-Circular-Permutation-in-Binary-Representation"><a href="#1238-Circular-Permutation-in-Binary-Representation" class="headerlink" title="1238. Circular Permutation in Binary Representation"></a>1238. Circular Permutation in Binary Representation</h3><p>返回指定为位数的二进制环，每两个数的二进制只有1位不同。<br><a href="https://leetcode.com/problems/circular-permutation-in-binary-representation/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: n &#x3D; 2, start &#x3D; 3</span><br><span class="line">Output: [3,2,0,1]</span><br><span class="line">Explanation: The binary representation of the permutation is (11,10,00,01). </span><br><span class="line">All the adjacent element differ by one bit. Another valid permutation is [3,1,0,2]</span><br></pre></td></tr></table></figure>

<ul>
<li><p>我想了半天这道题，以为和二进制无关，是个数学题，没想到最后还得用异或来解决。这是个 gray code的问题，有一个公式。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">circularPermutation</span><span class="params">(self, n, start)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [start ^ i ^ i &gt;&gt; <span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span> &lt;&lt; n)]</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Linked List(链表)</title>
    <url>/2016/09/23/linked-list/</url>
    <content><![CDATA[<blockquote>
<p>用时间换取空间</p>
</blockquote>
<h2 id="关于链表"><a href="#关于链表" class="headerlink" title="关于链表"></a>关于链表</h2><p>链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的。</p>
<h2 id="LeetCode真题"><a href="#LeetCode真题" class="headerlink" title="LeetCode真题"></a>LeetCode真题</h2><h3 id="2-Add-Two-Numbers"><a href="#2-Add-Two-Numbers" class="headerlink" title="2. Add Two Numbers"></a>2. Add Two Numbers</h3><p>两个链表相加。<br><a href="https://leetcode.com/problems/add-two-numbers/description/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</span><br><span class="line">Output: 7 -&gt; 0 -&gt; 8</span><br><span class="line">Explanation: 342 + 465 &#x3D; 807.</span><br></pre></td></tr></table></figure>

<ul>
<li><p>注意边界处理</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addTwoNumbers</span><span class="params">(l1, l2)</span>:</span></span><br><span class="line">    l = head = ListNode(<span class="number">0</span>)</span><br><span class="line">    carry = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> l1 <span class="keyword">or</span> l2 <span class="keyword">or</span> carry:</span><br><span class="line">        v1 = v2 = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> l1:</span><br><span class="line">            v1 = l1.val</span><br><span class="line">            l1 = l1.next</span><br><span class="line">        <span class="keyword">if</span> l2:</span><br><span class="line">            v2 = l2.val</span><br><span class="line">            l2 = l2.next</span><br><span class="line">        carry, val = divmod(v1+v2+carry, <span class="number">10</span>)</span><br><span class="line">        l.next = ListNode(val)</span><br><span class="line">        l = l.next</span><br><span class="line">    <span class="keyword">return</span> head.next</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="445-Add-Two-Numbers-II"><a href="#445-Add-Two-Numbers-II" class="headerlink" title="445. Add Two Numbers II"></a>445. Add Two Numbers II</h3><p>跟上题类似，只不过是进位方式不同。<br><a href="https://leetcode.com/problems/add-two-numbers-ii/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: (7 -&gt; 2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</span><br><span class="line">Output: 7 -&gt; 8 -&gt; 0 -&gt; 7</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法一：先reverse再相加，最后再reverse。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addTwoNumbers</span><span class="params">(self, l1: ListNode, l2: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(head)</span>:</span></span><br><span class="line">        prev = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">while</span> head:</span><br><span class="line">            head.next, prev, head = prev, head, head.next</span><br><span class="line">        <span class="keyword">return</span> prev</span><br><span class="line">    </span><br><span class="line">    ans = head = ListNode(<span class="number">0</span>)</span><br><span class="line">    l1, l2 = reverse(l1), reverse(l2)</span><br><span class="line">    carry = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> l1 <span class="keyword">or</span> l2 <span class="keyword">or</span> carry:</span><br><span class="line">        v1 = v2 = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> l1:</span><br><span class="line">            v1 = l1.val</span><br><span class="line">            l1 = l1.next</span><br><span class="line">        <span class="keyword">if</span> l2:</span><br><span class="line">            v2 = l2.val</span><br><span class="line">            l2 = l2.next</span><br><span class="line">        carry, val = divmod(v1+v2+carry, <span class="number">10</span>)</span><br><span class="line">        head.next = ListNode(val)</span><br><span class="line">        head = head.next</span><br><span class="line">    <span class="keyword">return</span> reverse(ans.next)</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：由于Python int没有限制，所以可以遍历相加，再从尾到头还原节点。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addTwoNumbers</span><span class="params">(self, l1: ListNode, l2: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">    v1 = v2 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> l1:</span><br><span class="line">        v1 = v1*<span class="number">10</span> + l1.val</span><br><span class="line">        l1 = l1.next</span><br><span class="line">    <span class="keyword">while</span> l2:</span><br><span class="line">        v2 = v2*<span class="number">10</span> + l2.val</span><br><span class="line">        l2 = l2.next</span><br><span class="line">    val = v1 + v2</span><br><span class="line">    tail, head = <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line">    <span class="keyword">while</span> val &gt; <span class="number">0</span>:</span><br><span class="line">        head = ListNode(val % <span class="number">10</span>)</span><br><span class="line">        head.next = tail</span><br><span class="line">        tail = head</span><br><span class="line">        val //= <span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> head <span class="keyword">if</span> head <span class="keyword">else</span> ListNode(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="21-Merge-Two-Sorted-Lists"><a href="#21-Merge-Two-Sorted-Lists" class="headerlink" title="21. Merge Two Sorted Lists"></a>21. Merge Two Sorted Lists</h3><p>合并两个有序链表。<br><a href="https://leetcode.com/problems/merge-two-sorted-lists/description/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 1-&gt;2-&gt;4, 1-&gt;3-&gt;4</span><br><span class="line">Output: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法1：iteratively 迭代</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists</span><span class="params">(l1, l2)</span>:</span></span><br><span class="line">    l = head = ListNode(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">while</span> l1 <span class="keyword">and</span> l2:</span><br><span class="line">        <span class="keyword">if</span> l1.val &lt;= l2.val:</span><br><span class="line">            l.next, l1 = l1, l1.next</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            l.next, l2 = l2, l2.next</span><br><span class="line">        l = l.next</span><br><span class="line">    l.next = l1 <span class="keyword">or</span> l2</span><br><span class="line">    <span class="keyword">return</span> head.next</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法2：recursively 递归</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists</span><span class="params">(l1, l2)</span>:</span></span><br><span class="line">    <span class="comment"># 判断是否存在None</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> l1 <span class="keyword">or</span> <span class="keyword">not</span> l2:</span><br><span class="line">        <span class="keyword">return</span> l1 <span class="keyword">or</span> l2</span><br><span class="line">    <span class="keyword">if</span> l1.val &lt; l2.val:</span><br><span class="line">        l1.next = mergeTwoLists(l1.next, l2)</span><br><span class="line">        <span class="keyword">return</span> l1</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        l2.next = mergeTwoLists(l1, l2.next)</span><br><span class="line">        <span class="keyword">return</span> l2</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="23-Merge-k-Sorted-Lists"><a href="#23-Merge-k-Sorted-Lists" class="headerlink" title="23. Merge k Sorted Lists"></a>23. Merge k Sorted Lists</h3><p>合并k个有序列表。<br><a href="https://leetcode.com/problems/merge-k-sorted-lists/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">[</span><br><span class="line">  1-&gt;4-&gt;5,</span><br><span class="line">  1-&gt;3-&gt;4,</span><br><span class="line">  2-&gt;6</span><br><span class="line">]</span><br><span class="line">Output: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法一：Brute Force. 时间效率O(NlogN)</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">searchRange</span><span class="params">(self, nums, target)</span>:</span></span><br><span class="line"></span><br><span class="line">    left_idx = self.search_edge(nums, target, <span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">if</span> left_idx == len(nums) <span class="keyword">or</span> nums[left_idx] != target:</span><br><span class="line">        <span class="keyword">return</span> [<span class="number">-1</span>, <span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">return</span> [left_idx, self.search_edge(nums, target, <span class="literal">False</span>)<span class="number">-1</span>]</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search_edge</span><span class="params">(self, nums, target, left)</span>:</span></span><br><span class="line">    l, r = <span class="number">0</span>, len(nums)</span><br><span class="line">    <span class="keyword">while</span> l &lt; r:</span><br><span class="line">        mid = (l+r) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> nums[mid] &gt; target <span class="keyword">or</span> (left <span class="keyword">and</span> nums[mid]==target):</span><br><span class="line">            r = mid</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            l = mid + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> l</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：优先级队列。本来优先级就没有方法一快，再加上Python3中的比较符机制不同，导致要实现<strong>lt</strong>方法，就更慢了。不过理论时间复杂度是比方法一小的。Time: O(Nlogk)</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CmpNode</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        self.node = node</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__lt__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.node.val &lt; other.node.val</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeKLists</span><span class="params">(self, lists: List[ListNode])</span> -&gt; ListNode:</span></span><br><span class="line">        <span class="keyword">from</span> queue <span class="keyword">import</span> PriorityQueue</span><br><span class="line">        head = h = ListNode(<span class="number">0</span>)</span><br><span class="line">        q = PriorityQueue()</span><br><span class="line">        <span class="keyword">for</span> l <span class="keyword">in</span> lists:</span><br><span class="line">            <span class="keyword">if</span> l:</span><br><span class="line">                q.put(CmpNode(l))</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> q.empty():</span><br><span class="line">            to_add = q.get().node</span><br><span class="line">            h.next = to_add</span><br><span class="line">            h = h.next</span><br><span class="line">            <span class="keyword">if</span> to_add.next:</span><br><span class="line">                q.put(CmpNode(to_add.next))</span><br><span class="line">        <span class="keyword">return</span> head.next</span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li><p>方法三：规避ListNode的比较，以解决上述问题。只要加上该链表在原数组中的索引位置，就一定不会重复，从而忽略对ListNode的比较。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mergeKLists</span><span class="params">(self, lists: List[ListNode])</span> -&gt; ListNode:</span></span><br><span class="line">    <span class="keyword">from</span> queue <span class="keyword">import</span> PriorityQueue</span><br><span class="line">    q = PriorityQueue()</span><br><span class="line">    <span class="keyword">for</span> idx, l <span class="keyword">in</span> enumerate(lists):</span><br><span class="line">        <span class="keyword">if</span> l:</span><br><span class="line">            q.put((l.val, idx, l))</span><br><span class="line">    h = head = ListNode(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> q.empty():</span><br><span class="line">        val, idx, node = q.get()</span><br><span class="line">        h.next = node</span><br><span class="line">        h, node = h.next, node.next</span><br><span class="line">        <span class="keyword">if</span> node:</span><br><span class="line">            q.put((node.val, idx, node))</span><br><span class="line">    <span class="keyword">return</span> head.next</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法四：俩俩合并。Time: O(Nlogk)</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mergeKLists</span><span class="params">(self, lists: List[ListNode])</span> -&gt; ListNode:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge_both</span><span class="params">(l1, l2)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> l1 <span class="keyword">or</span> <span class="keyword">not</span> l2:</span><br><span class="line">            <span class="keyword">return</span> l1 <span class="keyword">or</span> l2</span><br><span class="line">        <span class="keyword">if</span> l1.val &lt;= l2.val:</span><br><span class="line">            l1.next = merge_both(l1.next, l2)</span><br><span class="line">            <span class="keyword">return</span> l1</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            l2.next = merge_both(l1, l2.next)</span><br><span class="line">            <span class="keyword">return</span> l2</span><br><span class="line">        </span><br><span class="line">    pairs = list(lists)</span><br><span class="line">    <span class="keyword">while</span> len(pairs) &gt; <span class="number">1</span>:</span><br><span class="line">        n = len(pairs)</span><br><span class="line">        <span class="keyword">if</span> n &amp; <span class="number">1</span> == <span class="number">1</span>:</span><br><span class="line">            pairs.append(<span class="literal">None</span>)</span><br><span class="line">        pairs = [merge_both(pairs[i*<span class="number">2</span>], pairs[i*<span class="number">2</span>+<span class="number">1</span>])</span><br><span class="line">                 <span class="keyword">for</span> i <span class="keyword">in</span> range(((n+<span class="number">1</span>)//<span class="number">2</span>))]</span><br><span class="line">    <span class="keyword">return</span> pairs[<span class="number">0</span>] <span class="keyword">if</span> pairs <span class="keyword">else</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="141-Linked-List-Cycle"><a href="#141-Linked-List-Cycle" class="headerlink" title="141. Linked List Cycle"></a>141. Linked List Cycle</h3><p>判断一个链表是否有环。<br><a href="https://leetcode.com/problems/linked-list-cycle/description/" target="_blank" rel="noopener">查看原题</a></p>
<ul>
<li><p>经典的一道题，看成两个人在赛跑，如果有环，快的人会和慢的人相遇</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hasCycle</span><span class="params">(self, head)</span>:</span></span><br><span class="line">    slow = fast = head:</span><br><span class="line">    <span class="keyword">while</span> fast <span class="keyword">and</span> fast.next:</span><br><span class="line">        slow, fast = slow.next, fast.next.next</span><br><span class="line">        <span class="keyword">if</span> fast <span class="keyword">is</span> slow:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="142-Linked-List-Cycle-II"><a href="#142-Linked-List-Cycle-II" class="headerlink" title="142. Linked List Cycle II"></a>142. Linked List Cycle II</h3><p>求链表中环的入口节点。<br><a href="https://leetcode.com/problems/guess-number-higher-or-lower/description/" target="_blank" rel="noopener">查看原题</a></p>
<ul>
<li><p>首先判断此链表是否有环。然后在相交点和头结点一起走，一定会在入口相遇。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detectCycle</span><span class="params">(self, head)</span>:</span>        </span><br><span class="line">    fast = slow = head</span><br><span class="line">    <span class="comment"># 检测是否有环</span></span><br><span class="line">    <span class="keyword">while</span> fast <span class="keyword">and</span> fast.next:</span><br><span class="line">        slow, fast = slow.next, fast.next.next</span><br><span class="line">        <span class="keyword">if</span> slow <span class="keyword">is</span> fast:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="comment"># 找出入口节点</span></span><br><span class="line">    <span class="keyword">while</span> head <span class="keyword">is</span> <span class="keyword">not</span> slow:</span><br><span class="line">        head, slow = head.next, slow.next</span><br><span class="line">    <span class="keyword">return</span> head</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="206-Reverse-Linked-List"><a href="#206-Reverse-Linked-List" class="headerlink" title="206. Reverse Linked List"></a>206. Reverse Linked List</h3><p>倒置一个链表。<br><a href="https://leetcode.com/problems/reverse-linked-list/description/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</span><br><span class="line">Output: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法一： iteratively</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverseList</span><span class="params">(head)</span>:</span></span><br><span class="line">    prev = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">while</span> head:</span><br><span class="line">        cur = head</span><br><span class="line">        head = head.next</span><br><span class="line">        cur.next = prev</span><br><span class="line">        prev = cur</span><br><span class="line">    <span class="keyword">return</span> prev</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：使用一行赋值</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverseList</span><span class="params">(self, head)</span>:</span></span><br><span class="line">    prev = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">while</span> head:</span><br><span class="line">        head.next, prev, head = prev, head, head.next</span><br><span class="line">    <span class="keyword">return</span> prev</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法三：递归</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverseList</span><span class="params">(self, head, prev=None)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">      <span class="keyword">return</span> prev</span><br><span class="line">  </span><br><span class="line">    cur, head.next = head.next, prev</span><br><span class="line">    <span class="keyword">return</span> self.reverseList(cur, head)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="92-Reverse-Linked-List-II"><a href="#92-Reverse-Linked-List-II" class="headerlink" title="92. Reverse Linked List II"></a>92. Reverse Linked List II</h3><p>跟上题不同的是，只倒置指定区间的部分。<br><a href="https://leetcode.com/problems/reverse-linked-list-ii/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, m &#x3D; 2, n &#x3D; 4</span><br><span class="line">Output: 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;NULL</span><br></pre></td></tr></table></figure>

<ul>
<li><p>iteratively</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverseBetween</span><span class="params">(self, head: ListNode, m: int, n: int)</span> -&gt; ListNode:</span></span><br><span class="line"></span><br><span class="line">    root = h = ListNode(<span class="number">0</span>)</span><br><span class="line">    h.next = head</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(m<span class="number">-1</span>):</span><br><span class="line">        h = h.next</span><br><span class="line">    cur_head = h</span><br><span class="line">    p1 = p2 = cur_head.next</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(n-m):</span><br><span class="line">        p2 = p2.next</span><br><span class="line">    prev = p2.next <span class="keyword">if</span> p2 <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> p2:</span><br><span class="line">        p2.next = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">while</span> p1:</span><br><span class="line">        p1.next, prev, p1 = prev, p1, p1.next</span><br><span class="line">    cur_head.next = prev</span><br><span class="line">    <span class="keyword">return</span> root.next</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="160-Intersection-of-Two-Linked-Lists"><a href="#160-Intersection-of-Two-Linked-Lists" class="headerlink" title="160. Intersection of Two Linked Lists"></a>160. Intersection of Two Linked Lists</h3><p>两个链表求相交。<br><a href="https://leetcode.com/problems/intersection-of-two-linked-lists/description/" target="_blank" rel="noopener">查看原题</a></p>
<ul>
<li><p>解法</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getIntersectionNode</span><span class="params">(self, headA, headB)</span>:</span></span><br><span class="line">    p1, p2 = headA, headB</span><br><span class="line">    <span class="keyword">while</span> p1 <span class="keyword">is</span> <span class="keyword">not</span> p2:</span><br><span class="line">        p1 = p1.next <span class="keyword">if</span> p1 <span class="keyword">else</span> headB</span><br><span class="line">        p2 = p2.next <span class="keyword">if</span> p2 <span class="keyword">else</span> headA</span><br><span class="line">    <span class="keyword">return</span> p1</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="138-Copy-List-with-Random-Pointer"><a href="#138-Copy-List-with-Random-Pointer" class="headerlink" title="138. Copy List with Random Pointer"></a>138. Copy List with Random Pointer</h3><p>深拷贝一个复杂链表，链表多包含了一个随机指针。<br><a href="https://leetcode.com/problems/copy-list-with-random-pointer/description/" target="_blank" rel="noopener">查看原题</a></p>
<ul>
<li><p>第一次迭代的过程委托给了defaultdict，通过创建一个默认的对象，再去修改它的label值。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">copyRandomList</span><span class="params">(self, head)</span>:</span></span><br><span class="line">    <span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line">    cp = defaultdict(<span class="keyword">lambda</span>: RandomListNode(<span class="number">0</span>))</span><br><span class="line">    cp[<span class="literal">None</span>] = <span class="literal">None</span></span><br><span class="line">    n = head</span><br><span class="line">    <span class="keyword">while</span> n:</span><br><span class="line">        cp[n].label = n.label</span><br><span class="line">        cp[n].next = cp[n.next]</span><br><span class="line">        cp[n].random = cp[n.random]</span><br><span class="line">        n = n.next</span><br><span class="line">    <span class="keyword">return</span> cp[head]</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="237-Delete-Node-in-a-Linked-List"><a href="#237-Delete-Node-in-a-Linked-List" class="headerlink" title="237. Delete Node in a Linked List"></a>237. Delete Node in a Linked List</h3><p>在链表中删除节点。给定的节点不是尾节点。<br><a href="https://leetcode.com/problems/delete-node-in-a-linked-list/description/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: head &#x3D; [4,5,1,9], node &#x3D; 5</span><br><span class="line">Output: [4,1,9]</span><br></pre></td></tr></table></figure>

<ul>
<li><p>这道题关键在于复制</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deleteNode</span><span class="params">(self, node)</span>:</span></span><br><span class="line">    node.val = node.next.val  <span class="comment"># 4-&gt;1-&gt;1-&gt;9</span></span><br><span class="line">    node.next = node.next.next  <span class="comment"># 4-&gt;1-&gt;9</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="203-Remove-Linked-List-Elements"><a href="#203-Remove-Linked-List-Elements" class="headerlink" title="203. Remove Linked List Elements"></a>203. Remove Linked List Elements</h3><p>删除链表中值为val的元素。<br><a href="https://leetcode.com/problems/remove-linked-list-elements/" target="_blank" rel="noopener">查看原题</a></p>
<ul>
<li><p>方法一：遍历head并构建新的ListNode。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">removeElements</span><span class="params">(self, head, val)</span>:</span></span><br><span class="line">    l = res = ListNode(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">while</span> head:</span><br><span class="line">        <span class="keyword">if</span> head.val != val:</span><br><span class="line">            l.next = ListNode(head.val)</span><br><span class="line">            l = l.next</span><br><span class="line">        head = head.next</span><br><span class="line">    <span class="keyword">return</span> res.next</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：更喜欢这个方法。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">removeElements</span><span class="params">(self, head: <span class="string">'ListNode'</span>, val: <span class="string">'int'</span>)</span> -&gt; 'ListNode':</span></span><br><span class="line">    l = ListNode(<span class="number">0</span>)</span><br><span class="line">    l.next, ans = head, l</span><br><span class="line">    <span class="keyword">while</span> l <span class="keyword">and</span> l.next:</span><br><span class="line">        <span class="keyword">if</span> l.next.val == val:</span><br><span class="line">            l.next = l.next.next</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            l = l.next</span><br><span class="line">    <span class="keyword">return</span> ans.next</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="83-Remove-Duplicates-from-Sorted-List"><a href="#83-Remove-Duplicates-from-Sorted-List" class="headerlink" title="83. Remove Duplicates from Sorted List"></a>83. Remove Duplicates from Sorted List</h3><p>删除有序链表中重复的节点。<br><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-list/description/" target="_blank" rel="noopener">查看原题</a></p>
<ul>
<li><p>解法</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_duplicates</span><span class="params">(head)</span>:</span></span><br><span class="line">    root = head</span><br><span class="line">    <span class="keyword">while</span> head <span class="keyword">and</span> head.next:</span><br><span class="line">        <span class="keyword">if</span> head.val == head.next.val:</span><br><span class="line">            head.next = head.next.next</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            head = head.next</span><br><span class="line">    <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="82-Remove-Duplicates-from-Sorted-List-II"><a href="#82-Remove-Duplicates-from-Sorted-List-II" class="headerlink" title="82. Remove Duplicates from Sorted List II"></a>82. Remove Duplicates from Sorted List II</h3><p>和上题不同的是，重复的节点要全部删除。<br><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5</span><br><span class="line">Output: 1-&gt;2-&gt;5</span><br></pre></td></tr></table></figure>

<ul>
<li><p>解法</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deleteDuplicates</span><span class="params">(self, head: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">    prev = ans = ListNode(<span class="number">0</span>)        </span><br><span class="line">    prev.next = h = head</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> h <span class="keyword">and</span> h.next:</span><br><span class="line">        remove = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">while</span> h.next <span class="keyword">and</span> h.val == h.next.val:</span><br><span class="line">            h.next = h.next.next</span><br><span class="line">            remove = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> remove:</span><br><span class="line">            prev.next = h.next</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            prev = prev.next</span><br><span class="line">        h = h.next</span><br><span class="line">    <span class="keyword">return</span> ans.next</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="876-Middle-of-the-Linked-List"><a href="#876-Middle-of-the-Linked-List" class="headerlink" title="876. Middle of the Linked List"></a>876. Middle of the Linked List</h3><p>链表中点，如果偶数个，则返回第二个节点。<br><a href="https://leetcode.com/problems/middle-of-the-linked-list/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,2,3,4,5]</span><br><span class="line">Output: Node 3 from this list (Serialization: [3,4,5])</span><br><span class="line">The returned node has value 3.  (The judge&#39;s serialization of this node is [3,4,5]).</span><br><span class="line">Note that we returned a ListNode object ans, such that:</span><br><span class="line">ans.val &#x3D; 3, ans.next.val &#x3D; 4, ans.next.next.val &#x3D; 5, and ans.next.next.next &#x3D; NULL.</span><br><span class="line"></span><br><span class="line">Output: Node 4 from this list (Serialization: [4,5,6])</span><br><span class="line">Since the list has two middle nodes with values 3 and 4, we return the second one.</span><br></pre></td></tr></table></figure>

<ul>
<li><p>解法</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">middleNode</span><span class="params">(self, head: <span class="string">'ListNode'</span>)</span> -&gt; 'ListNode':</span></span><br><span class="line">    fast = slow = head</span><br><span class="line">    <span class="keyword">while</span> fast <span class="keyword">and</span> fast.next:</span><br><span class="line">        slow, fast = slow.next, fast.next.next</span><br><span class="line">    <span class="keyword">return</span> slow</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="234-Palindrome-Linked-List"><a href="#234-Palindrome-Linked-List" class="headerlink" title="234. Palindrome Linked List"></a>234. Palindrome Linked List</h3><p>判断一个链表是否是回文链表。<br><a href="https://leetcode.com/problems/palindrome-linked-list/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 1-&gt;2-&gt;2-&gt;1</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法一：此题为倒置链表和快慢指针的总和应用。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(self, head: <span class="string">'ListNode'</span>)</span> -&gt; 'bool':</span></span><br><span class="line">    rev = <span class="literal">None</span></span><br><span class="line">    slow = fast = head</span><br><span class="line">    <span class="keyword">while</span> fast <span class="keyword">and</span> fast.next:</span><br><span class="line">        fast = fast.next.next</span><br><span class="line">        slow.next, rev, slow = rev, slow, slow.next</span><br><span class="line">    <span class="keyword">if</span> fast:</span><br><span class="line">        slow = slow.next</span><br><span class="line">    <span class="keyword">while</span> rev <span class="keyword">and</span> rev.val == slow.val:</span><br><span class="line">        rev, slow = rev.next, slow.next</span><br><span class="line">    <span class="keyword">return</span> rev <span class="keyword">is</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：上述方法有一个缺点就是改变了原始的head，这里进行一些改进。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(self, head)</span>:</span></span><br><span class="line">    rev = <span class="literal">None</span></span><br><span class="line">    fast = head</span><br><span class="line">    <span class="keyword">while</span> fast <span class="keyword">and</span> fast.next:</span><br><span class="line">        fast = fast.next.next</span><br><span class="line">        rev, rev.next, head = head, rev, head.next</span><br><span class="line">    tail = head.next <span class="keyword">if</span> fast <span class="keyword">else</span> head</span><br><span class="line">    isPali = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">while</span> rev:</span><br><span class="line">        isPali = isPali <span class="keyword">and</span> rev.val == tail.val</span><br><span class="line">        head, head.next, rev = rev, head, rev.next</span><br><span class="line">        tail = tail.next</span><br><span class="line">    <span class="keyword">return</span> isPali</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="24-Swap-Nodes-in-Pairs"><a href="#24-Swap-Nodes-in-Pairs" class="headerlink" title="24. Swap Nodes in Pairs"></a>24. Swap Nodes in Pairs</h3><p>成对转换链表。<br><a href="https://leetcode.com/problems/swap-nodes-in-pairs/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given 1-&gt;2-&gt;3-&gt;4, you should return the list as 2-&gt;1-&gt;4-&gt;3.</span><br></pre></td></tr></table></figure>

<ul>
<li><p>解法</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">swapPairs</span><span class="params">(self, head: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">    prev, prev.next = self, head</span><br><span class="line">    <span class="keyword">while</span> prev.next <span class="keyword">and</span> prev.next.next:</span><br><span class="line">        a = prev.next    <span class="comment"># current</span></span><br><span class="line">        b = a.next</span><br><span class="line">        prev.next, b.next, a.next = b, a, b.next</span><br><span class="line">        prev = a</span><br><span class="line">    <span class="keyword">return</span> self.next</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="19-Remove-Nth-Node-From-End-of-List"><a href="#19-Remove-Nth-Node-From-End-of-List" class="headerlink" title="19. Remove Nth Node From End of List"></a>19. Remove Nth Node From End of List</h3><p>删除倒数第N个节点。<br><a href="https://leetcode.com/problems/remove-nth-node-from-end-of-list/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given linked list: 1-&gt;2-&gt;3-&gt;4-&gt;5, and n &#x3D; 2.</span><br><span class="line"></span><br><span class="line">After removing the second node from the end, the linked list becomes 1-&gt;2-&gt;3-&gt;5.</span><br></pre></td></tr></table></figure>

<ul>
<li><p>解法</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">removeNthFromEnd</span><span class="params">(self, head: ListNode, n: int)</span> -&gt; ListNode:</span></span><br><span class="line">    root = slow = fast = ListNode(<span class="number">0</span>)</span><br><span class="line">    slow.next = head</span><br><span class="line">    <span class="keyword">while</span> n &gt;= <span class="number">0</span> <span class="keyword">and</span> fast:</span><br><span class="line">        fast = fast.next</span><br><span class="line">        n -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> fast:</span><br><span class="line">        slow, fast = slow.next, fast.next</span><br><span class="line">    slow.next = slow.next.next <span class="keyword">if</span> slow.next <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">return</span> root.next</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="328-Odd-Even-Linked-List"><a href="#328-Odd-Even-Linked-List" class="headerlink" title="328. Odd Even Linked List"></a>328. Odd Even Linked List</h3><p>重排链表，使奇数位节点在前，偶数位节点在后，就地排序。<br><a href="https://leetcode.com/problems/odd-even-linked-list/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</span><br><span class="line">Output: 1-&gt;3-&gt;5-&gt;2-&gt;4-&gt;NULL</span><br></pre></td></tr></table></figure>

<ul>
<li><p>解法</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">oddEvenList</span><span class="params">(self, head: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    odd = head</span><br><span class="line">    even_h = even = head.next</span><br><span class="line">    <span class="keyword">while</span> even <span class="keyword">and</span> even.next:</span><br><span class="line">        odd.next = odd.next.next</span><br><span class="line">        odd = odd.next</span><br><span class="line">        even.next = even.next.next</span><br><span class="line">        even = even.next</span><br><span class="line">    odd.next = even_h</span><br><span class="line">    <span class="keyword">return</span> head</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="148-Sort-List"><a href="#148-Sort-List" class="headerlink" title="148. Sort List"></a>148. Sort List</h3><p>给链表排序。<br><a href="https://leetcode.com/problems/sort-list/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 4-&gt;2-&gt;1-&gt;3</span><br><span class="line">Output: 1-&gt;2-&gt;3-&gt;4</span><br></pre></td></tr></table></figure>

<ul>
<li><p>解法</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sortList</span><span class="params">(self, head: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge_both</span><span class="params">(l1, l2)</span>:</span></span><br><span class="line">        l = h = ListNode(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">while</span> l1 <span class="keyword">and</span> l2:</span><br><span class="line">            <span class="keyword">if</span> l1.val &lt;= l2.val:</span><br><span class="line">                l.next, l1 = l1, l1.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                l.next, l2 = l2, l2.next</span><br><span class="line">            l = l.next</span><br><span class="line">        l.next = l1 <span class="keyword">or</span> l2</span><br><span class="line">        <span class="keyword">return</span> h.next</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span><span class="params">(h)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> h <span class="keyword">or</span> <span class="keyword">not</span> h.next:</span><br><span class="line">            <span class="keyword">return</span> h</span><br><span class="line">        slow = fast = h</span><br><span class="line">        prev = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">while</span> fast <span class="keyword">and</span> fast.next:</span><br><span class="line">            prev, slow, fast = slow, slow.next, fast.next.next</span><br><span class="line">        prev.next = <span class="literal">None</span></span><br><span class="line">        left = merge_sort(h)</span><br><span class="line">        right = merge_sort(slow)</span><br><span class="line">        <span class="keyword">return</span> merge_both(left, right)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> merge_sort(head)</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="817-Linked-List-Components"><a href="#817-Linked-List-Components" class="headerlink" title="817. Linked List Components"></a>817. Linked List Components</h3><p>链表的组件。给定一个集合G，然后根据是否在G中分成若干部分，求连起来在G中的部分的个数。<br><a href="https://leetcode.com/problems/linked-list-components/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">head: 0-&gt;1-&gt;2-&gt;3-&gt;4</span><br><span class="line">G &#x3D; [0, 3, 1, 4]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: </span><br><span class="line">0 and 1 are connected, 3 and 4 are connected, so [0, 1] and [3, 4] are the two connected components.</span><br></pre></td></tr></table></figure>

<ul>
<li><p>解法</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">numComponents</span><span class="params">(self, head: ListNode, G: List[int])</span> -&gt; int:</span></span><br><span class="line">    SET_G = set(G)</span><br><span class="line">    h = head</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> h:</span><br><span class="line">        <span class="keyword">if</span> h.val <span class="keyword">in</span> SET_G:</span><br><span class="line">            <span class="keyword">if</span> (h.next <span class="keyword">and</span> h.next.val <span class="keyword">not</span> <span class="keyword">in</span> SET_G <span class="keyword">or</span> </span><br><span class="line">                <span class="keyword">not</span> h.next):</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">        h = h.next</span><br><span class="line">    <span class="keyword">return</span> count</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="86-Partition-List"><a href="#86-Partition-List" class="headerlink" title="86. Partition List"></a>86. Partition List</h3><p>链表分区，将比x小的节点放到前面，其余节点放到后面，并保持原有顺序。<br><a href="https://leetcode.com/problems/partition-list/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: head &#x3D; 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;2, x &#x3D; 3</span><br><span class="line">Output: 1-&gt;2-&gt;2-&gt;4-&gt;3-&gt;5</span><br></pre></td></tr></table></figure>

<ul>
<li><p>解法</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partition</span><span class="params">(self, head: ListNode, x: int)</span> -&gt; ListNode:</span></span><br><span class="line">    lt = letter = ListNode(<span class="number">0</span>)</span><br><span class="line">    gt = greater = ListNode(<span class="number">0</span>)</span><br><span class="line">    h = head</span><br><span class="line">    <span class="keyword">while</span> h:</span><br><span class="line">        <span class="keyword">if</span> h.val &lt; x:</span><br><span class="line">            lt.next = h</span><br><span class="line">            lt = h</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            gt.next = h</span><br><span class="line">            gt = h</span><br><span class="line">        h = h.next</span><br><span class="line">    gt.next = <span class="literal">None</span>   <span class="comment"># important !!</span></span><br><span class="line">    lt.next = greater.next</span><br><span class="line">    <span class="keyword">return</span> letter.next</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="61-Rotate-List"><a href="#61-Rotate-List" class="headerlink" title="61. Rotate List"></a>61. Rotate List</h3><p>向右旋转链表k次。<br><a href="https://leetcode.com/problems/rotate-list/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 0-&gt;1-&gt;2-&gt;NULL, k &#x3D; 4</span><br><span class="line">Output: 2-&gt;0-&gt;1-&gt;NULL</span><br><span class="line">Explanation:</span><br><span class="line">rotate 1 steps to the right: 2-&gt;0-&gt;1-&gt;NULL</span><br><span class="line">rotate 2 steps to the right: 1-&gt;2-&gt;0-&gt;NULL</span><br><span class="line">rotate 3 steps to the right: 0-&gt;1-&gt;2-&gt;NULL</span><br><span class="line">rotate 4 steps to the right: 2-&gt;0-&gt;1-&gt;NULL</span><br></pre></td></tr></table></figure>

<ul>
<li><p>解法</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rotateRight</span><span class="params">(self, head: ListNode, k: int)</span> -&gt; ListNode:</span></span><br><span class="line">    n, cur, prev = <span class="number">0</span>, head, <span class="literal">None</span></span><br><span class="line">    <span class="keyword">while</span> cur:</span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line">        prev, cur = cur, cur.next</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">0</span> <span class="keyword">or</span> k%n==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line">    k = k % n</span><br><span class="line">    tail = head</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(n-k<span class="number">-1</span>):</span><br><span class="line">        tail = tail.next</span><br><span class="line">    ans, tail.next, prev.next = tail.next, <span class="literal">None</span>, head</span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="725-Split-Linked-List-in-Parts"><a href="#725-Split-Linked-List-in-Parts" class="headerlink" title="725. Split Linked List in Parts"></a>725. Split Linked List in Parts</h3><p>按部分拆分链表。如果不能整除，要保证前面部分的大。<br><a href="https://leetcode.com/problems/split-linked-list-in-parts/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">root &#x3D; [1, 2, 3], k &#x3D; 5</span><br><span class="line">Output: [[1],[2],[3],[],[]]</span><br><span class="line">Input: </span><br><span class="line">root &#x3D; [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k &#x3D; 3</span><br><span class="line">Output: [[1, 2, 3, 4], [5, 6, 7], [8, 9, 10]]</span><br></pre></td></tr></table></figure>

<ul>
<li><p>解法</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">splitListToParts</span><span class="params">(self, root: ListNode, k: int)</span> -&gt; List[ListNode]:</span></span><br><span class="line">    n, cur = <span class="number">0</span>, root</span><br><span class="line">    ans = []</span><br><span class="line">    <span class="keyword">while</span> cur:</span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line">        cur = cur.next</span><br><span class="line">    parts, remain = divmod(n, k)</span><br><span class="line">    h = root</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(k):</span><br><span class="line">        head = h</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(parts<span class="number">-1</span>+(i&lt;remain)):</span><br><span class="line">            h = h.next</span><br><span class="line">        <span class="keyword">if</span> h:</span><br><span class="line">            h.next, h = <span class="literal">None</span>, h.next</span><br><span class="line">        ans.append(head)                            </span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="143-Reorder-List"><a href="#143-Reorder-List" class="headerlink" title="143. Reorder List"></a>143. Reorder List</h3><p>链表头尾捡取直至结束。<br><a href="https://leetcode.com/problems/reorder-list/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given 1-&gt;2-&gt;3-&gt;4-&gt;5, reorder it to 1-&gt;5-&gt;2-&gt;4-&gt;3.</span><br></pre></td></tr></table></figure>

<ul>
<li><p>解法</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reorderList</span><span class="params">(self, head: ListNode)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    slow = fast = head</span><br><span class="line">    <span class="keyword">while</span> fast <span class="keyword">and</span> fast.next:</span><br><span class="line">        slow, fast = slow.next, fast.next.next</span><br><span class="line">    </span><br><span class="line">    tail, slow.next = slow.next, <span class="literal">None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(node)</span>:</span></span><br><span class="line">        prev = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">while</span> node:</span><br><span class="line">            node.next, prev, node = prev, node, node.next</span><br><span class="line">        <span class="keyword">return</span> prev</span><br><span class="line">    tail = reverse(tail)</span><br><span class="line">    h = head</span><br><span class="line">    <span class="keyword">while</span> h <span class="keyword">and</span> tail:</span><br><span class="line">        h.next, tail.next, tail, h = tail, h.next, tail.next, h.next</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="1030-Next-Greater-Node-In-Linked-List"><a href="#1030-Next-Greater-Node-In-Linked-List" class="headerlink" title="1030. Next Greater Node In Linked List"></a>1030. Next Greater Node In Linked List</h3><p>链表中下一个比当前节点大的值。和503题类似。<br><a href="https://leetcode.com/problems/next-greater-node-in-linked-list/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [2,7,4,3,5]</span><br><span class="line">Output: [7,0,5,5,0]</span><br></pre></td></tr></table></figure>

<ul>
<li><p>解法</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nextLargerNodes</span><span class="params">(self, head: ListNode)</span> -&gt; List[int]:</span></span><br><span class="line">    ans, stack = [], []</span><br><span class="line">    <span class="keyword">while</span> head:</span><br><span class="line">        <span class="keyword">while</span> stack <span class="keyword">and</span> stack[<span class="number">-1</span>][<span class="number">1</span>] &lt; head.val:</span><br><span class="line">            ans[stack.pop()[<span class="number">0</span>]] = head.val</span><br><span class="line">        stack.append((len(ans), head.val))</span><br><span class="line">        ans.append(<span class="number">0</span>)</span><br><span class="line">        head = head.next</span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="1171-Remove-Zero-Sum-Consecutive-Nodes-from-Linked-List"><a href="#1171-Remove-Zero-Sum-Consecutive-Nodes-from-Linked-List" class="headerlink" title="1171. Remove Zero Sum Consecutive Nodes from Linked List"></a>1171. Remove Zero Sum Consecutive Nodes from Linked List</h3><p>移除相连和为0的节点。像祖玛一样，连续地删除。答案不唯一。<br><a href="https://leetcode.com/problems/remove-zero-sum-consecutive-nodes-from-linked-list/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: head &#x3D; [1,2,-3,3,1]</span><br><span class="line">Output: [3,1]</span><br><span class="line">Note: The answer [1,2,1] would also be accepted.</span><br></pre></td></tr></table></figure>

<ul>
<li><p>解法</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">removeZeroSumSublists</span><span class="params">(self, head: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">    p = dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">    dummy.next = head</span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line">    s_sum = [s]</span><br><span class="line">    vals = &#123;&#125;</span><br><span class="line">    <span class="keyword">while</span> p:</span><br><span class="line">        s += p.val</span><br><span class="line">        s_sum.append(s)</span><br><span class="line">        <span class="keyword">if</span> s <span class="keyword">not</span> <span class="keyword">in</span> vals:</span><br><span class="line">            vals[s] = p</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            vals[s].next = p.next</span><br><span class="line">            s_sum.pop() <span class="comment"># remove cur, keep the last</span></span><br><span class="line">            <span class="keyword">while</span> s_sum[<span class="number">-1</span>] != s:</span><br><span class="line">                vals.pop(s_sum.pop())</span><br><span class="line">        p = p.next</span><br><span class="line">    <span class="keyword">return</span> dummy.next</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Markdown语法笔记</title>
    <url>/2016/08/05/learn-markdown/</url>
    <content><![CDATA[<blockquote>
<p>博客使用Markdown，记录一下基本语法的使用。</p>
</blockquote>
<h1 id="APPEARANCE"><a href="#APPEARANCE" class="headerlink" title="APPEARANCE"></a>APPEARANCE</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># CODE</span><br></pre></td></tr></table></figure>

<h1 id="HEADING"><a href="#HEADING" class="headerlink" title="HEADING"></a>HEADING</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># HEADING</span><br></pre></td></tr></table></figure>

<h6 id="HEADING-1"><a href="#HEADING-1" class="headerlink" title="HEADING"></a>HEADING</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">###### HEADING</span><br></pre></td></tr></table></figure>

<h1 id="HEADING-2"><a href="#HEADING-2" class="headerlink" title="HEADING"></a>HEADING</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HEADING</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>

<h2 id="HEADING-3"><a href="#HEADING-3" class="headerlink" title="HEADING"></a>HEADING</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HEADING</span><br><span class="line">-------</span><br></pre></td></tr></table></figure>

<p><s>DELETED</s></p>
<p><del>DELETED</del></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;s&gt;DELETED&lt;&#x2F;s&gt;</span><br><span class="line"></span><br><span class="line">~~DELETED~~</span><br></pre></td></tr></table></figure>

<p><em>ITALIC</em></p>
<p><em>ITALIC</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*ITALIC*</span><br><span class="line"></span><br><span class="line">_ITALIC_</span><br></pre></td></tr></table></figure>

<p><strong>BOLD</strong></p>
<p><strong>BOLD</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**BOLD**</span><br><span class="line"></span><br><span class="line">__BOLD__</span><br></pre></td></tr></table></figure>

<p><strong><em>BOLD ITALIC</em></strong></p>
<p><strong><em>BOLD ITALIC</em></strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">***BOLD ITALIC***</span><br><span class="line"></span><br><span class="line">___BOLD ITALIC___</span><br></pre></td></tr></table></figure>

<p>2H<sub>2</sub> + 0<sub>2</sub> -&gt; 2H<sub>2</sub>0</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2H&lt;sub&gt;2&lt;&#x2F;sub&gt; + 0&lt;sub&gt;2&lt;&#x2F;sub&gt; -&gt; 2H&lt;sub&gt;2&lt;&#x2F;sub&gt;0</span><br></pre></td></tr></table></figure>

<p>A<sup>2</sup> + B<sup>2</sup> = C<sup>2</sup></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A&lt;sup&gt;2&lt;&#x2F;sup&gt; + B&lt;sup&gt;2&lt;&#x2F;sup&gt; &#x3D; C&lt;sup&gt;2&lt;&#x2F;sup&gt;</span><br></pre></td></tr></table></figure>

<p><abbr title="People's Republic of China">PRC</abbr></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;abbr title&#x3D;&quot;People&#39;s Republic of China&quot;&gt;PRC&lt;&#x2F;abbr&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>早</p>
<p>– <cite>鲁迅</cite></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; 早</span><br><span class="line">&gt;</span><br><span class="line">&gt; -- &lt;cite&gt;鲁迅&lt;&#x2F;cite&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>POINT ONE</p>
</li>
<li><p>POINT TWO</p>
</li>
<li><p>POINT …</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- POINT ONE</span><br><span class="line"></span><br><span class="line">- POINT TWO</span><br><span class="line"></span><br><span class="line">- POINT ...</span><br></pre></td></tr></table></figure>

<ul>
<li><p>POINT ONE</p>
</li>
<li><p>POINT TWO</p>
</li>
<li><p>POINT …</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* POINT ONE</span><br><span class="line"></span><br><span class="line">* POINT TWO</span><br><span class="line"></span><br><span class="line">* POINT ...</span><br></pre></td></tr></table></figure>

<ul>
<li>POINT<ul>
<li>POINT</li>
<li>POINT</li>
</ul>
</li>
<li>POINT<ul>
<li>POINT</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+ POINT</span><br><span class="line">    + POINT</span><br><span class="line">    + POINT</span><br><span class="line">+ POINT</span><br><span class="line">    + POINT</span><br></pre></td></tr></table></figure>

<ol>
<li>POINT ONE</li>
<li>POINT TWO</li>
<li>POINT …</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. POINT ONE</span><br><span class="line">2. POINT TWO</span><br><span class="line">3. POINT ...</span><br></pre></td></tr></table></figure>

<ul>
<li><input checked="" disabled="" type="checkbox"> TASK 1</li>
<li><input disabled="" type="checkbox"> TASK 2<ul>
<li><input checked="" disabled="" type="checkbox"> TASK 2.1</li>
<li><input disabled="" type="checkbox"> TASK 2.2</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- [x] TASK 1</span><br><span class="line">- [ ] TASK 2</span><br><span class="line">    - [x] TASK 2.1</span><br><span class="line">    - [ ] TASK 2.2</span><br></pre></td></tr></table></figure>

<p><code>git status</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;git status&#96;</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/wadeee/" target="_blank" rel="noopener">https://github.com/wadeee/</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;https:&#x2F;&#x2F;github.com&#x2F;wadeee&#x2F;&gt;</span><br></pre></td></tr></table></figure>


<p><a href="https://github.com/wadeee/" target="_blank" rel="noopener">GITHUB</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[GITHUB](https:&#x2F;&#x2F;github.com&#x2F;wadeee&#x2F;)</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/wadeee/" target="_blank" rel="noopener" title="wade&#39;s github">GITHUB</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[GITHUB][TARGET]</span><br><span class="line"></span><br><span class="line">[TARGET]: https:&#x2F;&#x2F;github.com&#x2F;wadeee&#x2F; &quot;wade&#39;s github&quot;</span><br></pre></td></tr></table></figure>


<p><img src="/images/posts/learn-markdown/pic.jpg" alt="" title="pic"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![](&#x2F;images&#x2F;posts&#x2F;learn-markdown&#x2F;pic.jpg &quot;pic&quot;)</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/wadeee/" target="_blank" rel="noopener"><img src="/images/posts/learn-markdown/pic.jpg" alt="pic" title="pic"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[![pic]][pic link]</span><br><span class="line"></span><br><span class="line">[pic]: &#x2F;images&#x2F;posts&#x2F;learn-markdown&#x2F;pic.jpg &quot;pic&quot;</span><br><span class="line"></span><br><span class="line">[pic link]: https:&#x2F;&#x2F;github.com&#x2F;wadeee&#x2F;</span><br></pre></td></tr></table></figure>

<pre><code>TEXT LIKE `&lt;pre&gt;`</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TEXT LIKE &#96;&lt;pre&gt;&#96;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mate</span> <span class="attr">charest</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">```html </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mate</span> <span class="attr">charest</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line">```</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>Function name</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td><code>help()</code></td>
<td>Display the help window.</td>
</tr>
<tr>
<td><code>destroy()</code></td>
<td><strong>Destroy your computer!</strong></td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">| Function name | Description                    |</span><br><span class="line">| ------------- | ------------------------------ |</span><br><span class="line">| &#96;help()&#96;      | Display the help window.       |</span><br><span class="line">| &#96;destroy()&#96;   | **Destroy your computer!**     |</span><br></pre></td></tr></table></figure>

<hr>
<hr>
<hr>
<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">----</span><br><span class="line">***</span><br><span class="line">*****</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Hash Table(哈希表)</title>
    <url>/2016/08/02/hash-table/</url>
    <content><![CDATA[<blockquote>
<p>加速为你找到目标</p>
</blockquote>
<h2 id="关于哈希表"><a href="#关于哈希表" class="headerlink" title="关于哈希表"></a>关于哈希表</h2><p>哈希表（Hash table），是根据关键码值(Key value)而直接进行访问的数据结构。<br>也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。<br>这个映射函数叫做散列函数，存放记录的数组叫做散列表。</p>
<h2 id="LeetCode真题"><a href="#LeetCode真题" class="headerlink" title="LeetCode真题"></a>LeetCode真题</h2><h3 id="1-Two-Sum"><a href="#1-Two-Sum" class="headerlink" title="1. Two Sum"></a>1. Two Sum</h3><p>给定一个数组，找出数组两个元素相加为目标值，假定只有唯一解。<br><a href="https://leetcode.com/problems/two-sum/description/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given nums &#x3D; [2, 7, 11, 15], target &#x3D; 9,</span><br><span class="line">Because nums[0] + nums[1] &#x3D; 2 + 7 &#x3D; 9,</span><br><span class="line">return [0, 1].</span><br></pre></td></tr></table></figure>

<ul>
<li><p>解法</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">two_sum</span><span class="params">(nums, target)</span>:</span></span><br><span class="line">    buff_dict = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i, num <span class="keyword">in</span> enumerate(nums):</span><br><span class="line">        <span class="keyword">if</span> num <span class="keyword">not</span> <span class="keyword">in</span> buff_dict:</span><br><span class="line">            buff_dict[target-num] = i</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> [buff_dict[num], i]</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="720-Longest-Word-in-Dictionary"><a href="#720-Longest-Word-in-Dictionary" class="headerlink" title="720. Longest Word in Dictionary"></a>720. Longest Word in Dictionary</h3><p>字典中的最长单词，找出一个列表中的一个单词，该单词的子单词也必须在字典中。相同长度的单词，返回字典序最前的一个。<br><a href="https://leetcode.com/problems/longest-word-in-dictionary/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">words &#x3D; [&quot;w&quot;,&quot;wo&quot;,&quot;wor&quot;,&quot;worl&quot;, &quot;world&quot;]</span><br><span class="line">Output: &quot;world&quot;</span><br><span class="line">Explanation: </span><br><span class="line">The word &quot;world&quot; can be built one character at a time by &quot;w&quot;, &quot;wo&quot;, &quot;wor&quot;, and &quot;worl&quot;.</span><br></pre></td></tr></table></figure>

<ul>
<li><p>解法：Brute Force.</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">longestWord</span><span class="params">(self, words)</span>:</span></span><br><span class="line">    res = <span class="string">''</span></span><br><span class="line">    wordset = set(words)</span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">        <span class="keyword">if</span> len(word)&gt;len(res) <span class="keyword">or</span> len(word)==len(res) <span class="keyword">and</span> word&lt;res:</span><br><span class="line">            <span class="keyword">if</span> all(word[:k] <span class="keyword">in</span> wordset <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">1</span>, len(word))):</span><br><span class="line">                res = word         </span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="748-Shortest-Completing-Word"><a href="#748-Shortest-Completing-Word" class="headerlink" title="748. Shortest Completing Word"></a>748. Shortest Completing Word</h3><p>最短的完整匹配单词。包含licensePlate中的所有字母，大小写不敏感。假设答案一定存在。<br><a href="https://leetcode.com/problems/shortest-completing-word/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: licensePlate &#x3D; &quot;1s3 PSt&quot;, words &#x3D; [&quot;step&quot;, &quot;steps&quot;, &quot;stripe&quot;, &quot;stepple&quot;]</span><br><span class="line">Output: &quot;steps&quot;</span><br><span class="line">Explanation: The smallest length word that contains the letters &quot;S&quot;, &quot;P&quot;, &quot;S&quot;, and &quot;T&quot;.</span><br><span class="line">Note that the answer is not &quot;step&quot;, because the letter &quot;s&quot; must occur in the word twice.</span><br><span class="line">Also note that we ignored case for the purposes of comparing whether a letter exists in the word.</span><br></pre></td></tr></table></figure>

<ul>
<li><p>解法</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shortestCompletingWord</span><span class="params">(self, licensePlate: <span class="string">'str'</span>, words: <span class="string">'List[str]'</span>)</span> -&gt; 'str':</span></span><br><span class="line">    ans = <span class="string">''</span></span><br><span class="line">    lp = <span class="string">''</span>.join(x <span class="keyword">for</span> x <span class="keyword">in</span> licensePlate.lower() <span class="keyword">if</span> x.isalpha())</span><br><span class="line">    <span class="keyword">for</span> w <span class="keyword">in</span> words:</span><br><span class="line">        temp = list(w.lower())</span><br><span class="line">        <span class="keyword">for</span> l <span class="keyword">in</span> lp:</span><br><span class="line">            <span class="keyword">if</span> l <span class="keyword">in</span> temp:</span><br><span class="line">                temp.remove(l)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> len(w)&lt;len(ans) <span class="keyword">or</span> ans==<span class="string">''</span>:</span><br><span class="line">                ans = w</span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="811-Subdomain-Visit-Count"><a href="#811-Subdomain-Visit-Count" class="headerlink" title="811. Subdomain Visit Count"></a>811. Subdomain Visit Count</h3><p>子域名访问量。给定一个三级或二级域名列表，统计所有三级、二级和顶级域名的访问量。<br><a href="https://leetcode.com/problems/subdomain-visit-count/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;leetcode.com&#x2F;problems&#x2F;subdomain-visit-count&#x2F;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>解法</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">subdomainVisits</span><span class="params">(self, cpdomains: <span class="string">'List[str]'</span>)</span> -&gt; 'List[str]':</span></span><br><span class="line">    ans = collections.defaultdict(int)</span><br><span class="line">    <span class="keyword">for</span> domain <span class="keyword">in</span> cpdomains:</span><br><span class="line">        count, d = domain.split()</span><br><span class="line">        count = int(count)</span><br><span class="line">        frags = d.split(<span class="string">'.'</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(frags)):</span><br><span class="line">            ans[<span class="string">'.'</span>.join(frags[i:])] += count</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">'&#123;&#125; &#123;&#125;'</span>.format(c, d) <span class="keyword">for</span> d, c <span class="keyword">in</span> ans.items()]</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="884-Uncommon-Words-from-Two-Sentences"><a href="#884-Uncommon-Words-from-Two-Sentences" class="headerlink" title="884. Uncommon Words from Two Sentences"></a>884. Uncommon Words from Two Sentences</h3><p>求两句话中的单词，在本句中出现一次，并不在另一句中的单词。也就是在两句中出现一次。<br><a href="https://leetcode.com/problems/uncommon-words-from-two-sentences/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: A &#x3D; &quot;this apple is sweet&quot;, B &#x3D; &quot;this apple is sour&quot;</span><br><span class="line">Output: [&quot;sweet&quot;,&quot;sour&quot;]</span><br></pre></td></tr></table></figure>

<ul>
<li><p>counter</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">uncommonFromSentences</span><span class="params">(self, A: <span class="string">'str'</span>, B: <span class="string">'str'</span>)</span> -&gt; 'List[str]':</span></span><br><span class="line">    <span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line">    count = Counter((A + <span class="string">' '</span> + B).split())</span><br><span class="line">    <span class="keyword">return</span> [word <span class="keyword">for</span> word, c <span class="keyword">in</span> count.items() <span class="keyword">if</span> c == <span class="number">1</span>]</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1010-Pairs-of-Songs-With-Total-Durations-Divisible-by-60"><a href="#1010-Pairs-of-Songs-With-Total-Durations-Divisible-by-60" class="headerlink" title="1010. Pairs of Songs With Total Durations Divisible by 60"></a>1010. Pairs of Songs With Total Durations Divisible by 60</h3><p>和能被60整除的为一对，求有多少对。<br><a href="https://leetcode.com/problems/pairs-of-songs-with-total-durations-divisible-by-60/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [30,20,150,100,40]</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: Three pairs have a total duration divisible by 60:</span><br><span class="line">(time[0] &#x3D; 30, time[2] &#x3D; 150): total duration 180</span><br><span class="line">(time[1] &#x3D; 20, time[3] &#x3D; 100): total duration 120</span><br><span class="line">(time[1] &#x3D; 20, time[4] &#x3D; 40): total duration 60</span><br></pre></td></tr></table></figure>

<ul>
<li><p>首先判断此链表是否有环。然后在相交点和头结点一起走，一定会在入口相遇。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">numPairsDivisibleBy60</span><span class="params">(self, time: List[int])</span> -&gt; int:</span></span><br><span class="line">    c = collections.defaultdict(int)</span><br><span class="line">    ans = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> time:</span><br><span class="line">        <span class="comment"># ans += c[(60-t%60)%60]</span></span><br><span class="line">        ans += c[-t % <span class="number">60</span>]</span><br><span class="line">        c[t%<span class="number">60</span>] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="1138-Alphabet-Board-Path"><a href="#1138-Alphabet-Board-Path" class="headerlink" title="1138. Alphabet Board Path"></a>1138. Alphabet Board Path</h3><p>小写字母排列的键盘，要打出目标字母需要移动的操作。<br><a href="https://leetcode.com/problems/alphabet-board-path/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: target &#x3D; &quot;leet&quot;</span><br><span class="line">Output: &quot;DDR!UURRR!!DDD!&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>此题需要注意z，然后按照一个优先的顺序移动即可。另外使用字典可以快速定位坐标，而不用每个字符做比较</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">alphabetBoardPath</span><span class="params">(self, target: str)</span> -&gt; str:</span></span><br><span class="line">    <span class="keyword">import</span> string</span><br><span class="line">    m = &#123;c: (i//<span class="number">5</span>, i%<span class="number">5</span>) <span class="keyword">for</span> i, c <span class="keyword">in</span> enumerate(string.ascii_lowercase)&#125;</span><br><span class="line">    ans = <span class="string">''</span></span><br><span class="line">    x0 = y0 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> target:</span><br><span class="line">        x, y = m[c]</span><br><span class="line">        <span class="keyword">if</span> y &lt; y0: ans += <span class="string">'L'</span> * (y0-y)</span><br><span class="line">        <span class="keyword">if</span> x &lt; x0: ans += <span class="string">'U'</span> * (x0-x)</span><br><span class="line">        <span class="keyword">if</span> y &gt; y0: ans += <span class="string">'R'</span> * (y-y0)</span><br><span class="line">        <span class="keyword">if</span> x &gt; x0: ans += <span class="string">'D'</span> * (x-x0)</span><br><span class="line">        x0, y0 = x, y</span><br><span class="line">        ans += <span class="string">'!'</span></span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1072-Flip-Columns-For-Maximum-Number-of-Equal-Rows"><a href="#1072-Flip-Columns-For-Maximum-Number-of-Equal-Rows" class="headerlink" title="1072. Flip Columns For Maximum Number of Equal Rows"></a>1072. Flip Columns For Maximum Number of Equal Rows</h3><p>二维数组，翻转某几列可以最多使多少行内的元素都相同。<br><a href="https://leetcode.com/problems/flip-columns-for-maximum-number-of-equal-rows/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [[0,1],[1,1]]</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: After flipping no values, 1 row has all values equal.</span><br><span class="line"></span><br><span class="line">Input: [[0,0,0],[0,0,1],[1,1,0]]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: After flipping values in the first two columns, the last two rows have equal values.</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法一：核心思想在于找到每行的模式，具有相同模式的行，最终可变成同样的数值。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxEqualRowsAfterFlips</span><span class="params">(self, matrix: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">    c = collections.Counter()</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> matrix:</span><br><span class="line">        c[tuple([x <span class="keyword">for</span> x <span class="keyword">in</span> row])] += <span class="number">1</span></span><br><span class="line">        c[tuple([<span class="number">1</span>-x <span class="keyword">for</span> x <span class="keyword">in</span> row])] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> max(c.values())</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：使用异或。方法一中其实有多余的部分，模式与反模式都求了出来，其实没有必要。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxEqualRowsAfterFlips</span><span class="params">(self, matrix: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">    <span class="keyword">return</span> max(collections.Counter(tuple(r ^ row[<span class="number">0</span>] <span class="keyword">for</span> r <span class="keyword">in</span> row) <span class="keyword">for</span> row <span class="keyword">in</span> matrix).values())</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1160-Find-Words-That-Can-Be-Formed-by-Characters"><a href="#1160-Find-Words-That-Can-Be-Formed-by-Characters" class="headerlink" title="1160. Find Words That Can Be Formed by Characters"></a>1160. Find Words That Can Be Formed by Characters</h3><p>找出能被目标字符串组成的子串长度和。<br><a href="https://leetcode.com/problems/find-words-that-can-be-formed-by-characters/" target="_blank" rel="noopener">查看原题</a></p>
<ul>
<li><p>解法</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">countCharacters</span><span class="params">(self, words: List[str], chars: str)</span> -&gt; int:</span></span><br><span class="line">    ma = collections.Counter(chars)</span><br><span class="line">    <span class="keyword">return</span> sum(len(w) <span class="keyword">for</span> w <span class="keyword">in</span> words <span class="keyword">if</span> <span class="keyword">not</span> collections.Counter(w)-ma)</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Binary Tree(二分法)</title>
    <url>/2016/07/27/binary-tree/</url>
    <content><![CDATA[<blockquote>
<p>你好，树先生</p>
</blockquote>
<h2 id="关于二叉树"><a href="#关于二叉树" class="headerlink" title="关于二叉树"></a>关于二叉树</h2><p>二叉树是每个结点最多有两个子树的树结构。</p>
<ul>
<li><p>树节点结构</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="LeetCode真题"><a href="#LeetCode真题" class="headerlink" title="LeetCode真题"></a>LeetCode真题</h2><h3 id="144-Binary-Tree-Preorder-Traversal"><a href="#144-Binary-Tree-Preorder-Traversal" class="headerlink" title="144. Binary Tree Preorder Traversal"></a>144. Binary Tree Preorder Traversal</h3><p>二叉树前序遍历<br><a href="https://leetcode.com/problems/binary-tree-preorder-traversal/description/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,null,2,3]</span><br><span class="line">   1</span><br><span class="line">    \</span><br><span class="line">     2</span><br><span class="line">    &#x2F;</span><br><span class="line">   3</span><br><span class="line"></span><br><span class="line">Output: [1,2,3]</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法一：iteratively</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">preorderTraversal</span><span class="params">(self, root: <span class="string">'TreeNode'</span>)</span> -&gt; 'List[int]':</span></span><br><span class="line">    ans, stack = [], root <span class="keyword">and</span> [root]</span><br><span class="line">    <span class="keyword">while</span> stack:</span><br><span class="line">        node = stack.pop()</span><br><span class="line">        <span class="keyword">if</span> node:</span><br><span class="line">            ans.append(node.val)</span><br><span class="line">            stack.append(node.right)</span><br><span class="line">            stack.append(node.left)</span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：recursively</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">preorder_traversal</span><span class="params">(root)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    <span class="keyword">return</span> [root.val] + self.preorderTraversal(root.left) + \</span><br><span class="line">        self.preorderTraversal(root.right)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="589-N-ary-Tree-Preorder-Traversal"><a href="#589-N-ary-Tree-Preorder-Traversal" class="headerlink" title="589. N-ary Tree Preorder Traversal"></a>589. N-ary Tree Preorder Traversal</h3><p>N-叉树的前序遍历。N叉树和二叉树有个区别，就是N叉树不需要考虑子节点知否为空，做单独的判断。<br><a href="https://leetcode.com/problems/n-ary-tree-preorder-traversal/" target="_blank" rel="noopener">查看原题</a></p>
<ul>
<li><p>方法一：recursively.</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">preorder</span><span class="params">(self, root)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    res = [root.val]</span><br><span class="line">    <span class="keyword">for</span> child <span class="keyword">in</span> root.children:</span><br><span class="line">        res += self.preorder(child)</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：iteratively.</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">preorder</span><span class="params">(self, root)</span>:</span></span><br><span class="line">    res, stack = [], root <span class="keyword">and</span> [root]</span><br><span class="line">    <span class="keyword">while</span> stack:</span><br><span class="line">        node = stack.pop()</span><br><span class="line">        res.append(node.val)</span><br><span class="line">        stack.extend(reversed(node.children))</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="94-Binary-Tree-Inorder-Traversal"><a href="#94-Binary-Tree-Inorder-Traversal" class="headerlink" title="94. Binary Tree Inorder Traversal"></a>94. Binary Tree Inorder Traversal</h3><p>中序遍历二叉树<br><a href="https://leetcode.com/problems/binary-tree-inorder-traversal/description/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,null,2,3]</span><br><span class="line">   1</span><br><span class="line">    \</span><br><span class="line">     2</span><br><span class="line">    &#x2F;</span><br><span class="line">   3</span><br><span class="line"></span><br><span class="line">Output: [1,3,2]</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法一：使用栈迭代。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inorderTraversal</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">    stack, ans = [], []</span><br><span class="line">    <span class="keyword">while</span> stack <span class="keyword">or</span> root:</span><br><span class="line">        <span class="keyword">while</span> root:</span><br><span class="line">            stack.append(root)</span><br><span class="line">            root = root.left</span><br><span class="line">        root = stack.pop()</span><br><span class="line">        ans.append(root.val)</span><br><span class="line">        root = root.right</span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：Morris Traversal.</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inorderTraversal</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">    cur, ans = root, []</span><br><span class="line">    <span class="keyword">while</span> cur:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cur.left:</span><br><span class="line">            ans.append(cur.val)</span><br><span class="line">            cur = cur.right</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            pre = cur.left</span><br><span class="line">            <span class="comment"># 找到当前节点左子树中最右的右节点</span></span><br><span class="line">            <span class="keyword">while</span> pre.right <span class="keyword">and</span> pre.right != cur:</span><br><span class="line">                pre = pre.right</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> pre.right:</span><br><span class="line">                <span class="comment"># 找到最右的节点，连接到根节点</span></span><br><span class="line">                pre.right = cur</span><br><span class="line">                cur = cur.left</span><br><span class="line">            <span class="comment"># 恢复节点</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                pre.right = <span class="literal">None</span></span><br><span class="line">                ans.append(cur.val)</span><br><span class="line">                cur = cur.right</span><br><span class="line">                </span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="145-Binary-Tree-Postorder-Traversal"><a href="#145-Binary-Tree-Postorder-Traversal" class="headerlink" title="145. Binary Tree Postorder Traversal"></a>145. Binary Tree Postorder Traversal</h3><p>后序遍历二叉树<br><a href="https://leetcode.com/problems/binary-tree-postorder-traversal/description/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,null,2,3]</span><br><span class="line">   1</span><br><span class="line">    \</span><br><span class="line">     2</span><br><span class="line">    &#x2F;</span><br><span class="line">   3</span><br><span class="line"></span><br><span class="line">Output: [3,2,1]</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法一：根右左，再倒序。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">postorder_traversal</span><span class="params">(root)</span>:</span></span><br><span class="line">    res, stack = [], [root]</span><br><span class="line">    <span class="keyword">while</span> stack:</span><br><span class="line">        node = stack.pop()</span><br><span class="line">        <span class="keyword">if</span> node:</span><br><span class="line">            res.append(node.val)</span><br><span class="line">            stack.append(node.left)</span><br><span class="line">            stack.append(node.right)</span><br><span class="line">    <span class="keyword">return</span> res[::<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：思想: 使用last作为判断是否该节点的右子树完成遍历，如果一个node.right已经刚刚遍历完毕，那么将last==node.right，否则将会寻找node.right。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">postorderTraversal</span><span class="params">(self, root)</span>:</span></span><br><span class="line">    res, stack, node, last = [], [], root, <span class="literal">None</span></span><br><span class="line">    <span class="keyword">while</span> stack <span class="keyword">or</span> node:</span><br><span class="line">        <span class="keyword">if</span> node:</span><br><span class="line">            stack.append(node)</span><br><span class="line">            node = node.left</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            node = stack[<span class="number">-1</span>]</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node.right <span class="keyword">or</span> last == node.right:</span><br><span class="line">                node = stack.pop()</span><br><span class="line">                res.append(node.val)</span><br><span class="line">                last, node = node, <span class="literal">None</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                node = node.right    </span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法三：使用boolean判断一个节点是否被遍历过</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">postorderTraversal</span><span class="params">(self, root)</span>:</span></span><br><span class="line">    res, stack = [], [(root, <span class="literal">False</span>)]</span><br><span class="line">    <span class="keyword">while</span> stack:</span><br><span class="line">        node, visited = stack.pop()</span><br><span class="line">        <span class="keyword">if</span> node:</span><br><span class="line">            <span class="keyword">if</span> visited:</span><br><span class="line">                res.append(node.val)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                stack.append((node, <span class="literal">True</span>))</span><br><span class="line">                stack.append((node.right, <span class="literal">False</span>))</span><br><span class="line">                stack.append((node.left, <span class="literal">False</span>))                </span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法四：dfs.</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">postorderTraversal</span><span class="params">(self, root: <span class="string">'TreeNode'</span>)</span> -&gt; 'List[int]':</span></span><br><span class="line">    ans = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(node)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span> </span><br><span class="line">        dfs(node.left)</span><br><span class="line">        dfs(node.right)</span><br><span class="line">        ans.append(node.val)</span><br><span class="line">        </span><br><span class="line">    dfs(root)</span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="590-N-ary-Tree-Postorder-Traversal"><a href="#590-N-ary-Tree-Postorder-Traversal" class="headerlink" title="590. N-ary Tree Postorder Traversal"></a>590. N-ary Tree Postorder Traversal</h3><p>N-叉树的后序遍历。<br><a href="https://leetcode.com/problems/n-ary-tree-postorder-traversal/" target="_blank" rel="noopener">查看原题</a></p>
<ul>
<li><p>方法一：recursively.</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">postorder</span><span class="params">(self, root)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    <span class="keyword">return</span> sum([self.postorder(child) <span class="keyword">for</span> child <span class="keyword">in</span> root.children], []) + [root.val]</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：iteratively and reversed.</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">postorder</span><span class="params">(self, root)</span>:</span></span><br><span class="line">    res, stack = [], root <span class="keyword">and</span> [root]</span><br><span class="line">    <span class="keyword">while</span> stack:</span><br><span class="line">        node = stack.pop()</span><br><span class="line">        res.append(node.val)</span><br><span class="line">        stack.extend(node.children)</span><br><span class="line">    <span class="keyword">return</span> res[::<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法三：iteratively and flag.</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">postorder</span><span class="params">(self, root)</span>:</span></span><br><span class="line">    res, stack = [], root <span class="keyword">and</span> [(root, <span class="literal">False</span>)]</span><br><span class="line">    <span class="keyword">while</span> stack:</span><br><span class="line">        node, visited = stack.pop()</span><br><span class="line">        <span class="keyword">if</span> visited:</span><br><span class="line">            res.append(node.val)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            stack.append((node, <span class="literal">True</span>))</span><br><span class="line">            stack.extend((n, <span class="literal">False</span>) <span class="keyword">for</span> n <span class="keyword">in</span> reversed(node.children))</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="100-Same-Tree"><a href="#100-Same-Tree" class="headerlink" title="100. Same Tree"></a>100. Same Tree</h3><p>判断相同的二叉树。<br><a href="https://leetcode.com/problems/same-tree/description/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:     1         1</span><br><span class="line">          &#x2F; \       &#x2F; \</span><br><span class="line">         2   3     2   3</span><br><span class="line"></span><br><span class="line">        [1,2,3],   [1,2,3]</span><br><span class="line"></span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法一：recursively</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isSameTree</span><span class="params">(self, p: <span class="string">'TreeNode'</span>, q: <span class="string">'TreeNode'</span>)</span> -&gt; 'bool':</span></span><br><span class="line">    <span class="keyword">if</span> p <span class="keyword">and</span> q:</span><br><span class="line">        <span class="keyword">return</span> (p.val==q.val <span class="keyword">and</span> self.isSameTree(p.left, q.left) <span class="keyword">and</span> </span><br><span class="line">                self.isSameTree(p.right, q.right))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> p <span class="keyword">is</span> q</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：recursively, tuple</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_same_tree</span><span class="params">(p, q)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">t</span><span class="params">(n)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> n <span class="keyword">and</span> (n.val, t(n.left), t(n.right))  </span><br><span class="line">    <span class="keyword">return</span> t(p) == t(q)</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法三：iteratively.</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isSameTree</span><span class="params">(self, p: <span class="string">'TreeNode'</span>, q: <span class="string">'TreeNode'</span>)</span> -&gt; 'bool':</span></span><br><span class="line">    stack = [(p, q)]</span><br><span class="line">    <span class="keyword">while</span> stack:</span><br><span class="line">        p1, p2 = stack.pop()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> p1 <span class="keyword">and</span> <span class="keyword">not</span> p2:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> p1 <span class="keyword">or</span> <span class="keyword">not</span> p2:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> p1.val != p2.val:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        stack.append((p1.left, p2.left))</span><br><span class="line">        stack.append((p1.right, p2.right))</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="101-Symmetric-Tree"><a href="#101-Symmetric-Tree" class="headerlink" title="101. Symmetric Tree"></a>101. Symmetric Tree</h3><p>判断二叉树是否对称。<br><a href="https://leetcode.com/problems/symmetric-tree/description/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    1</span><br><span class="line">   &#x2F; \</span><br><span class="line">  2   2</span><br><span class="line"> &#x2F; \ &#x2F; \</span><br><span class="line">3  4 4  3</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法一：recursively.</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isSymmetric</span><span class="params">(self, root: <span class="string">'TreeNode'</span>)</span> -&gt; 'bool':</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">symmetric</span><span class="params">(p1, p2)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> p1 <span class="keyword">and</span> p2:</span><br><span class="line">            <span class="keyword">return</span> (p1.val == p2.val <span class="keyword">and</span> symmetric(p1.left, p2.right) <span class="keyword">and</span> </span><br><span class="line">                    symmetric(p1.right, p2.left))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> p1 <span class="keyword">is</span> p2</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> symmetric(root.left, root.right)</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：iteratively.</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isSymmetric</span><span class="params">(self, root: <span class="string">'TreeNode'</span>)</span> -&gt; 'bool':</span></span><br><span class="line">    stack = root <span class="keyword">and</span> [(root.left, root.right)]        </span><br><span class="line">    <span class="keyword">while</span> stack:</span><br><span class="line">        p1, p2 = stack.pop()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> p1 <span class="keyword">and</span> <span class="keyword">not</span> p2: <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> p1 <span class="keyword">or</span> <span class="keyword">not</span> p2: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> p1.val != p2.val: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        stack.append((p1.left, p2.right))</span><br><span class="line">        stack.append((p1.right, p2.left))</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="104-Maximum-Depth-of-Binary-Tree"><a href="#104-Maximum-Depth-of-Binary-Tree" class="headerlink" title="104. Maximum Depth of Binary Tree"></a>104. Maximum Depth of Binary Tree</h3><p>二叉树最大深度。<br><a href="https://leetcode.com/problems/maximum-depth-of-binary-tree/description/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    3</span><br><span class="line">   &#x2F; \</span><br><span class="line">  9  20</span><br><span class="line">    &#x2F;  \</span><br><span class="line">   15   7</span><br><span class="line">return 3</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法一：recursively</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max_depth</span><span class="params">(root)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> max(max_depth(root.left), max_depth(root.right)) + <span class="number">1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：iteratively. BFS with deque</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxDepth</span><span class="params">(self, root: <span class="string">'TreeNode'</span>)</span> -&gt; 'int':</span></span><br><span class="line">    q = root <span class="keyword">and</span> collections.deque([(root, <span class="number">1</span>)])</span><br><span class="line">    d = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> q:</span><br><span class="line">        node, d = q.popleft()</span><br><span class="line">        <span class="keyword">if</span> node.right:</span><br><span class="line">            q.append((node.right, d+<span class="number">1</span>))</span><br><span class="line">        <span class="keyword">if</span> node.left:</span><br><span class="line">            q.append((node.left, d+<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> d</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="559-Maximum-Depth-of-N-ary-Tree"><a href="#559-Maximum-Depth-of-N-ary-Tree" class="headerlink" title="559. Maximum Depth of N-ary Tree"></a>559. Maximum Depth of N-ary Tree</h3><p>N-叉树的最大深度。<br><a href="https://leetcode.com/problems/maximum-depth-of-n-ary-tree/" target="_blank" rel="noopener">查看原题</a></p>
<ul>
<li><p>方法一：BFS with deque.</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxDepth</span><span class="params">(self, root: <span class="string">'Node'</span>)</span> -&gt; 'int':</span></span><br><span class="line">    q = root <span class="keyword">and</span> collections.deque([(root, <span class="number">1</span>)])</span><br><span class="line">    d = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> q:</span><br><span class="line">        node, d = q.popleft()</span><br><span class="line">        <span class="keyword">for</span> child <span class="keyword">in</span> node.children:</span><br><span class="line">            q.append((child, d + <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> d</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：BFS.</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxDepth</span><span class="params">(self, root)</span>:</span></span><br><span class="line">    q, level = root <span class="keyword">and</span> [root], <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> q:</span><br><span class="line">        q, level = [child <span class="keyword">for</span> node <span class="keyword">in</span> q <span class="keyword">for</span> child <span class="keyword">in</span> node.children], level+<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> level</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法三：recursively.</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxDepth</span><span class="params">(self, root: <span class="string">'Node'</span>)</span> -&gt; 'int':</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> max(list(map(self.maxDepth, root.children)) <span class="keyword">or</span> [<span class="number">0</span>]) + <span class="number">1</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="111-Minimum-Depth-of-Binary-Tree"><a href="#111-Minimum-Depth-of-Binary-Tree" class="headerlink" title="111. Minimum Depth of Binary Tree"></a>111. Minimum Depth of Binary Tree</h3><p>求根节点到叶子节点的最小深度。<br><a href="https://leetcode.com/problems/minimum-depth-of-binary-tree" target="_blank" rel="noopener">查看原题</a></p>
<ul>
<li><p>方法一：recursively</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">minDepth</span><span class="params">(self, root)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> root.left <span class="keyword">and</span> root.right:</span><br><span class="line">        <span class="keyword">return</span> min(self.minDepth(root.left), self.minDepth(root.right)) + <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> self.minDepth(root.left) + self.minDepth(root.right) + <span class="number">1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：对上述方法修改，更加Pythonic. 注意一点，Python3中要加list,否则max因为空值报错。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">minDepth</span><span class="params">(self, root: <span class="string">'TreeNode'</span>)</span> -&gt; 'int':</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    d = list(map(self.minDepth, (root.left, root.right)))</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + (min(d) <span class="keyword">or</span> max(d))</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法三：迭代法，BFS</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">minDepth</span><span class="params">(self, root: <span class="string">'TreeNode'</span>)</span> -&gt; 'int':</span></span><br><span class="line">    q = root <span class="keyword">and</span> collections.deque([(root, <span class="number">1</span>)])</span><br><span class="line">    d = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> q:</span><br><span class="line">        node, d = q.popleft()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node.left <span class="keyword">and</span> <span class="keyword">not</span> node.right:</span><br><span class="line">            <span class="keyword">return</span> d</span><br><span class="line">        <span class="keyword">if</span> node.left:</span><br><span class="line">            q.append((node.left, d+<span class="number">1</span>))</span><br><span class="line">        <span class="keyword">if</span> node.right:</span><br><span class="line">            q.append((node.right, d+<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> d</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="105-Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal"><a href="#105-Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal" class="headerlink" title="105. Construct Binary Tree from Preorder and Inorder Traversal"></a>105. Construct Binary Tree from Preorder and Inorder Traversal</h3><p>根据前序遍历和中序遍历重建二叉树。<br><a href="https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/description/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">preorder &#x3D; [3,9,20,15,7]</span><br><span class="line">inorder &#x3D; [9,3,15,20,7]</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法一：切片。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">buildTree</span><span class="params">(preorder, inorder)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> preorder == []:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    root_val = preorder[<span class="number">0</span>]</span><br><span class="line">    root = TreeNode(root_val)</span><br><span class="line">    cut = inorder.index(root_val)</span><br><span class="line">    root.left = buildTree(preorder[<span class="number">1</span>:cut+<span class="number">1</span>], inorder[:cut])</span><br><span class="line">    root.right = buildTree(preorder[cut+<span class="number">1</span>:], inorder[cut+<span class="number">1</span>:])</span><br><span class="line">    <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：上述方法在极端情况下，如只有左子树的情况，由于index会将时间复杂度上升到O(n²)，而且切片产生了一些不必要的内存，pop和reverse是为了增加效率。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">buildTree</span><span class="params">(self, preorder: <span class="string">'List[int]'</span>, inorder: <span class="string">'List[int]'</span>)</span> -&gt; 'TreeNode':</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build</span><span class="params">(stop)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> inorder <span class="keyword">and</span> inorder[<span class="number">-1</span>] != stop:</span><br><span class="line">            root = TreeNode(preorder.pop())</span><br><span class="line">            root.left = build(root.val)</span><br><span class="line">            inorder.pop()</span><br><span class="line">            root.right = build(stop)</span><br><span class="line">            <span class="keyword">return</span> root</span><br><span class="line">    preorder.reverse()</span><br><span class="line">    inorder.reverse()</span><br><span class="line">    <span class="keyword">return</span> build(<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="572-Subtree-of-Another-Tree"><a href="#572-Subtree-of-Another-Tree" class="headerlink" title="572. Subtree of Another Tree"></a>572. Subtree of Another Tree</h3><p>判断是否是树的子结构。<br><a href="https://leetcode.com/problems/subtree-of-another-tree/description/" target="_blank" rel="noopener">查看原题</a></p>
<ul>
<li><p>思路：这道题是遍历加判断相同树的结合。这里采用前序遍历和递归判断相同树。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isSubtree</span><span class="params">(self, s: <span class="string">'TreeNode'</span>, t: <span class="string">'TreeNode'</span>)</span> -&gt; 'bool':</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_same</span><span class="params">(s, t)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> s <span class="keyword">and</span> t:</span><br><span class="line">            <span class="keyword">return</span> (s.val==t.val <span class="keyword">and</span> is_same(s.left, t.left) <span class="keyword">and</span> </span><br><span class="line">                    is_same(s.right, t.right))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> s <span class="keyword">is</span> t</span><br><span class="line"></span><br><span class="line">    stack = s <span class="keyword">and</span> [s]</span><br><span class="line">    <span class="keyword">while</span> stack:</span><br><span class="line">        node = stack.pop()</span><br><span class="line">        <span class="keyword">if</span> node:</span><br><span class="line">            <span class="keyword">if</span> is_same(node, t):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            stack.append(node.right)</span><br><span class="line">            stack.append(node.left)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="102-Binary-Tree-Level-Order-Traversal"><a href="#102-Binary-Tree-Level-Order-Traversal" class="headerlink" title="102. Binary Tree Level Order Traversal"></a>102. Binary Tree Level Order Traversal</h3><p>分层遍历二叉树。<br><a href="https://leetcode.com/problems/binary-tree-level-order-traversal/description/" target="_blank" rel="noopener">查看原题</a></p>
<ul>
<li><p>注意：循环条件要加上root，以防止root is None</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">levelOrder</span><span class="params">(self, root: <span class="string">'TreeNode'</span>)</span> -&gt; 'List[List[int]]':</span></span><br><span class="line">    ans, level = [], root <span class="keyword">and</span> [root]</span><br><span class="line">    <span class="keyword">while</span> level:</span><br><span class="line">        ans.append([n.val <span class="keyword">for</span> n <span class="keyword">in</span> level])</span><br><span class="line">        level = [k <span class="keyword">for</span> n <span class="keyword">in</span> level <span class="keyword">for</span> k <span class="keyword">in</span> (n.left, n.right) <span class="keyword">if</span> k]</span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="103-Binary-Tree-Zigzag-Level-Order-Traversal"><a href="#103-Binary-Tree-Zigzag-Level-Order-Traversal" class="headerlink" title="103. Binary Tree Zigzag Level Order Traversal"></a>103. Binary Tree Zigzag Level Order Traversal</h3><p>之字形打印二叉树。<br><a href="https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/description/" target="_blank" rel="noopener">查看原题</a></p>
<ul>
<li><p>解法</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">zigzagLevelOrder</span><span class="params">(self, root: <span class="string">'TreeNode'</span>)</span> -&gt; 'List[List[int]]':</span></span><br><span class="line">    ans, level, order = [], root <span class="keyword">and</span> [root], <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> level:</span><br><span class="line">        ans.append([n.val <span class="keyword">for</span> n <span class="keyword">in</span> level][::order])</span><br><span class="line">        order *= <span class="number">-1</span></span><br><span class="line">        level = [kid <span class="keyword">for</span> n <span class="keyword">in</span> level <span class="keyword">for</span> kid <span class="keyword">in</span> (n.left, n.right) <span class="keyword">if</span> kid]</span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="107-Binary-Tree-Level-Order-Traversal-II"><a href="#107-Binary-Tree-Level-Order-Traversal-II" class="headerlink" title="107. Binary Tree Level Order Traversal II"></a>107. Binary Tree Level Order Traversal II</h3><p>和102题不同的是，从下到上分层打印。<br><a href="https://leetcode.com/problems/binary-tree-level-order-traversal-ii/" target="_blank" rel="noopener">查看原题</a></p>
<ul>
<li><p>方法一：将结果倒序输出。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">levelOrderBottom</span><span class="params">(self, root)</span>:</span></span><br><span class="line">    res, level = [], [root]</span><br><span class="line">    <span class="keyword">while</span> root <span class="keyword">and</span> level:</span><br><span class="line">        res.append([n.val <span class="keyword">for</span> n <span class="keyword">in</span> level])</span><br><span class="line">        level = [kid <span class="keyword">for</span> n <span class="keyword">in</span> level <span class="keyword">for</span> kid <span class="keyword">in</span> (n.left, n.right) <span class="keyword">if</span> kid]</span><br><span class="line">    <span class="keyword">return</span> res[::<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：也可以从前面插入元素。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">levelOrderBottom</span><span class="params">(self, root)</span>:</span></span><br><span class="line">    res, level = [], [root]</span><br><span class="line">    <span class="keyword">while</span> root <span class="keyword">and</span> level:</span><br><span class="line">        res.insert(<span class="number">0</span>, [n.val <span class="keyword">for</span> n <span class="keyword">in</span> level])</span><br><span class="line">        level = [kid <span class="keyword">for</span> n <span class="keyword">in</span> level <span class="keyword">for</span> kid <span class="keyword">in</span> (n.left, n.right) <span class="keyword">if</span> kid]</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="429-N-ary-Tree-Level-Order-Traversal"><a href="#429-N-ary-Tree-Level-Order-Traversal" class="headerlink" title="429. N-ary Tree Level Order Traversal"></a>429. N-ary Tree Level Order Traversal</h3><p>分层打印N叉树。<br><a href="https://leetcode.com/problems/n-ary-tree-level-order-traversal/" target="_blank" rel="noopener">查看原题</a></p>
<ul>
<li><p>方法一：将结果倒序输出。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">levelOrder</span><span class="params">(self, root: <span class="string">'Node'</span>)</span> -&gt; 'List[List[int]]':</span></span><br><span class="line">    ans, level = [], root <span class="keyword">and</span> [root]</span><br><span class="line">    <span class="keyword">while</span> level:</span><br><span class="line">        ans.append([n.val <span class="keyword">for</span> n <span class="keyword">in</span> level])</span><br><span class="line">        level = [k <span class="keyword">for</span> n <span class="keyword">in</span> level <span class="keyword">for</span> k <span class="keyword">in</span> n.children <span class="keyword">if</span> k]</span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="637-Average-of-Levels-in-Binary-Tree"><a href="#637-Average-of-Levels-in-Binary-Tree" class="headerlink" title="637. Average of Levels in Binary Tree"></a>637. Average of Levels in Binary Tree</h3><p>遍历一个二叉树，求每层节点的平均值，按照节点不为空的个数。<br><a href="https://leetcode.com/problems/average-of-levels-in-binary-tree/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">    3</span><br><span class="line">   &#x2F; \</span><br><span class="line">  9  20</span><br><span class="line">    &#x2F;  \</span><br><span class="line">   15   7</span><br><span class="line">Output: [3, 14.5, 11]</span><br><span class="line">Explanation:</span><br><span class="line">The average value of nodes on level 0 is 3,  on level 1 is 14.5, and on level 2 is 11. Hence return [3, 14.5, 11].</span><br></pre></td></tr></table></figure>

<ul>
<li><p>解法</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">averageOfLevels</span><span class="params">(self, root: <span class="string">'TreeNode'</span>)</span> -&gt; 'List[float]':</span></span><br><span class="line">    ans, level = [], root <span class="keyword">and</span> [root]</span><br><span class="line">    <span class="keyword">while</span> level:</span><br><span class="line">        ans.append(sum(n.val <span class="keyword">for</span> n <span class="keyword">in</span> level) / len(level))</span><br><span class="line">        level = [k <span class="keyword">for</span> n <span class="keyword">in</span> level <span class="keyword">for</span> k <span class="keyword">in</span> (n.left, n.right) <span class="keyword">if</span> k]</span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="515-Find-Largest-Value-in-Each-Tree-Row"><a href="#515-Find-Largest-Value-in-Each-Tree-Row" class="headerlink" title="515. Find Largest Value in Each Tree Row"></a>515. Find Largest Value in Each Tree Row</h3><p>找到树每层的最大值。<br><a href="https://leetcode.com/problems/find-largest-value-in-each-tree-row/" target="_blank" rel="noopener">查看原题</a></p>
<ul>
<li><p>BFS.</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">largestValues</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">    ans, levels = [], root <span class="keyword">and</span> [root]</span><br><span class="line">    <span class="keyword">while</span> levels:</span><br><span class="line">        ans.append(max(x.val <span class="keyword">for</span> x <span class="keyword">in</span> levels))</span><br><span class="line">        levels = [k <span class="keyword">for</span> n <span class="keyword">in</span> levels <span class="keyword">for</span> k <span class="keyword">in</span> (n.left, n.right) <span class="keyword">if</span> k]</span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="987-Vertical-Order-Traversal-of-a-Binary-Tree"><a href="#987-Vertical-Order-Traversal-of-a-Binary-Tree" class="headerlink" title="987. Vertical Order Traversal of a Binary Tree"></a>987. Vertical Order Traversal of a Binary Tree</h3><p>垂直遍历二叉树，从左到右，从上到下，如果节点具有相同位置，按照值从小到大。<br><a href="https://leetcode.com/problems/find-largest-value-in-each-tree-row/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,2,3,4,5,6,7]</span><br><span class="line">Output: [[4],[2],[1,5,6],[3],[7]]</span><br><span class="line">Explanation: </span><br><span class="line">The node with value 5 and the node with value 6 have the same position according to the given scheme.</span><br><span class="line">However, in the report &quot;[1,5,6]&quot;, the node value of 5 comes first since 5 is smaller than 6.</span><br></pre></td></tr></table></figure>

<ul>
<li><p>dfs. 通过建立一个字典数组，将对应的节点使用深度优先遍历初始化数组。然后按照x, y, val三个优先级进行排序。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">verticalTraversal</span><span class="params">(self, root: <span class="string">'TreeNode'</span>)</span> -&gt; 'List[List[int]]':</span></span><br><span class="line">    seen = collections.defaultdict(</span><br><span class="line">        <span class="keyword">lambda</span>: collections.defaultdict(list)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(node, x=<span class="number">0</span>, y=<span class="number">0</span>)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> node:</span><br><span class="line">            seen[x][y].append(node.val)</span><br><span class="line">            dfs(node.left, x<span class="number">-1</span>, y+<span class="number">1</span>)</span><br><span class="line">            dfs(node.right, x+<span class="number">1</span>, y+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    dfs(root)</span><br><span class="line">    ans = []</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> sorted(seen):</span><br><span class="line">        inner = []</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> sorted(seen[x]):</span><br><span class="line">            inner.extend(sorted(n <span class="keyword">for</span> n <span class="keyword">in</span> seen[x][y]))</span><br><span class="line">        ans.append(inner)</span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="257-Binary-Tree-Paths"><a href="#257-Binary-Tree-Paths" class="headerlink" title="257. Binary Tree Paths"></a>257. Binary Tree Paths</h3><p>打印二叉树从根节点到叶子节点全部路径。<br><a href="https://leetcode.com/problems/binary-tree-paths/description/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line"></span><br><span class="line">   1</span><br><span class="line"> &#x2F;   \</span><br><span class="line">2     3</span><br><span class="line"> \</span><br><span class="line">  5</span><br><span class="line"></span><br><span class="line">Output: [&quot;1-&gt;2-&gt;5&quot;, &quot;1-&gt;3&quot;]</span><br><span class="line"></span><br><span class="line">Explanation: All root-to-leaf paths are: 1-&gt;2-&gt;5, 1-&gt;3</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法一：iteratively。思路：采用前序遍历二叉树，使用tuple保存节点当前路径，如果是叶子节点，则添加到结果中。开始老是想着用’-&gt;’.join()，这样反而麻烦，直接使用字符串保存就好。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binaryTreePaths</span><span class="params">(self, root: <span class="string">'TreeNode'</span>)</span> -&gt; 'List[str]':</span></span><br><span class="line">    ans, stack = [], root <span class="keyword">and</span> [(root, str(root.val))]</span><br><span class="line">    <span class="keyword">while</span> stack:</span><br><span class="line">        n, p = stack.pop()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> n.left <span class="keyword">and</span> <span class="keyword">not</span> n.right:</span><br><span class="line">            ans.append(p)</span><br><span class="line">        <span class="keyword">if</span> n.right:</span><br><span class="line">            stack.append((n.right, p+<span class="string">'-&gt;'</span>+str(n.right.val)))</span><br><span class="line">        <span class="keyword">if</span> n.left:</span><br><span class="line">            stack.append((n.left, p+<span class="string">'-&gt;'</span>+str(n.left.val)))</span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：dfs.</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binaryTreePaths</span><span class="params">(self, root: <span class="string">'TreeNode'</span>)</span> -&gt; 'List[str]':</span></span><br><span class="line">    ans = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(n, path)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> n:</span><br><span class="line">            path.append(str(n.val))</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> n.left <span class="keyword">and</span> <span class="keyword">not</span> n.right:</span><br><span class="line">                ans.append(<span class="string">'-&gt;'</span>.join(path))</span><br><span class="line">            dfs(n.left, path)</span><br><span class="line">            dfs(n.right, path)</span><br><span class="line">            path.pop()</span><br><span class="line">    dfs(root, [])</span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法三：recursively</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binaryTreePaths</span><span class="params">(self, root)</span>:</span> </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    <span class="keyword">return</span> [str(root.val) + <span class="string">'-&gt;'</span> + path</span><br><span class="line">            <span class="keyword">for</span> kid <span class="keyword">in</span> (root.left, root.right) <span class="keyword">if</span> kid</span><br><span class="line">            <span class="keyword">for</span> path <span class="keyword">in</span> self.binaryTreePaths(kid)] <span class="keyword">or</span> [str(root.val)]</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="257-Binary-Tree-Paths-1"><a href="#257-Binary-Tree-Paths-1" class="headerlink" title="257. Binary Tree Paths"></a>257. Binary Tree Paths</h3><p>求字典顺序最小的路径，路径指叶子节点到根节点的路径。0对应a，1对应b。<br><a href="https://leetcode.com/problems/smallest-string-starting-from-leaf/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [0,1,2,3,4,3,4]</span><br><span class="line">Output: &quot;dba&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法一：先列出所有根到叶子的路径，再reverse求最小值。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">smallestFromLeaf</span><span class="params">(self, root: <span class="string">'TreeNode'</span>)</span> -&gt; 'str':</span></span><br><span class="line">    OFFSET = ord(<span class="string">'a'</span>)</span><br><span class="line">    stack = root <span class="keyword">and</span> [(root, chr(root.val+OFFSET))]</span><br><span class="line">    ans = <span class="string">'~'</span></span><br><span class="line">    <span class="keyword">while</span> stack:</span><br><span class="line">        n, p = stack.pop()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> n.left <span class="keyword">and</span> <span class="keyword">not</span> n.right:</span><br><span class="line">            ans = min(ans, p[::<span class="number">-1</span>])</span><br><span class="line">        <span class="keyword">if</span> n.right:</span><br><span class="line">            stack.append((n.right, p+chr(n.right.val+OFFSET)))</span><br><span class="line">        <span class="keyword">if</span> n.left:</span><br><span class="line">            stack.append((n.left, p+chr(n.left.val+OFFSET)))</span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：dfs. 递归计算完左右节点，然后再将根节点pop掉。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">smallestFromLeaf</span><span class="params">(self, root: <span class="string">'TreeNode'</span>)</span> -&gt; 'str':</span></span><br><span class="line">    self.ans = <span class="string">'~'</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(node, A)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> node:</span><br><span class="line">            A.append(chr(node.val + ord(<span class="string">'a'</span>)))</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node.left <span class="keyword">and</span> <span class="keyword">not</span> node.right:</span><br><span class="line">                self.ans = min(self.ans, <span class="string">''</span>.join(reversed(A)))</span><br><span class="line">            dfs(node.left, A)</span><br><span class="line">            dfs(node.right, A)</span><br><span class="line">            A.pop()</span><br><span class="line">        </span><br><span class="line">    dfs(root, [])</span><br><span class="line">    <span class="keyword">return</span> self.ans</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="112-Path-Sum"><a href="#112-Path-Sum" class="headerlink" title="112. Path Sum"></a>112. Path Sum</h3><p>判断是否具有从根节点到叶子节点上的值和为sum。<br><a href="https://leetcode.com/problems/path-sum/description/" target="_blank" rel="noopener">查看原题</a></p>
<ul>
<li><p>方法一：recursively</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hasPathSum</span><span class="params">(self, root: <span class="string">'TreeNode'</span>, total: <span class="string">'int'</span>)</span> -&gt; 'bool':</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">elif</span> (<span class="keyword">not</span> root.left <span class="keyword">and</span> <span class="keyword">not</span> root.right <span class="keyword">and</span> </span><br><span class="line">        root.val==total):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> (self.hasPathSum(root.left, total-root.val) <span class="keyword">or</span> </span><br><span class="line">                self.hasPathSum(root.right, total-root.val))</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：iteratively</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hasPathSum</span><span class="params">(self, root: <span class="string">'TreeNode'</span>, total: <span class="string">'int'</span>)</span> -&gt; 'bool':</span></span><br><span class="line">    stack = root <span class="keyword">and</span> [(root, total)]</span><br><span class="line">    <span class="keyword">while</span> stack:</span><br><span class="line">        n, t = stack.pop()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> n.left <span class="keyword">and</span> <span class="keyword">not</span> n.right <span class="keyword">and</span> n.val==t:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> n.right:</span><br><span class="line">            stack.append((n.right, t-n.val))</span><br><span class="line">        <span class="keyword">if</span> n.left:</span><br><span class="line">            stack.append((n.left, t-n.val))</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="113-Path-Sum-II"><a href="#113-Path-Sum-II" class="headerlink" title="113. Path Sum II"></a>113. Path Sum II</h3><p>上题的升级版，要求二维数组返回所有路径。<br><a href="https://leetcode.com/problems/path-sum-ii/description/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sum &#x3D; 22</span><br><span class="line"></span><br><span class="line">      5</span><br><span class="line">     &#x2F; \</span><br><span class="line">    4   8</span><br><span class="line">   &#x2F;   &#x2F; \</span><br><span class="line">  11  13  4</span><br><span class="line"> &#x2F;  \    &#x2F; \</span><br><span class="line">7    2  5   1</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">   [5,4,11,2],</span><br><span class="line">   [5,8,4,5]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法一：iteratively. 举一反三。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pathSum</span><span class="params">(self, root: <span class="string">'TreeNode'</span>, total: <span class="string">'int'</span>)</span> -&gt; 'List[List[int]]':</span></span><br><span class="line">    stack = root <span class="keyword">and</span> [(root, [root.val], total)]</span><br><span class="line">    ans = []</span><br><span class="line">    <span class="keyword">while</span> stack:</span><br><span class="line">        n, v, t = stack.pop()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> n.left <span class="keyword">and</span> <span class="keyword">not</span> n.right <span class="keyword">and</span> n.val==t:</span><br><span class="line">            ans.append(v)</span><br><span class="line">        <span class="keyword">if</span> n.right:</span><br><span class="line">            stack.append((n.right, v+[n.right.val], t-n.val))</span><br><span class="line">        <span class="keyword">if</span> n.left:</span><br><span class="line">            stack.append((n.left, v+[n.left.val], t-n.val))</span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：recursively. 先找出所有路径，再过滤，实际上和257题一样。不过这并没有把这道题的特性涵盖进去。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pathSum</span><span class="params">(self, root, sum_val)</span>:</span></span><br><span class="line">    paths = self.all_paths(root)</span><br><span class="line">    <span class="keyword">return</span> [path <span class="keyword">for</span> path <span class="keyword">in</span> paths <span class="keyword">if</span> sum(path)==sum_val]</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">all_paths</span><span class="params">(self, root)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    <span class="keyword">return</span> [[root.val]+path</span><br><span class="line">            <span class="keyword">for</span> kid <span class="keyword">in</span> (root.left, root.right) <span class="keyword">if</span> kid</span><br><span class="line">            <span class="keyword">for</span> path <span class="keyword">in</span> self.all_paths(kid)] <span class="keyword">or</span> [[root.val]]</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法三：recursively.</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pathSum</span><span class="params">(self, root, sum)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    val, *kids = root.val, root.left, root.right</span><br><span class="line">    <span class="keyword">if</span> any(kids):</span><br><span class="line">        <span class="keyword">return</span> [[val] + path</span><br><span class="line">                <span class="keyword">for</span> kid <span class="keyword">in</span> kids <span class="keyword">if</span> kid</span><br><span class="line">                <span class="keyword">for</span> path <span class="keyword">in</span> self.pathSum(kid, sum-val)]</span><br><span class="line">    <span class="keyword">return</span> [[val]] <span class="keyword">if</span> val==sum <span class="keyword">else</span> []</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="297-Serialize-and-Deserialize-Binary-Tree"><a href="#297-Serialize-and-Deserialize-Binary-Tree" class="headerlink" title="297. Serialize and Deserialize Binary Tree"></a>297. Serialize and Deserialize Binary Tree</h3><p>序列化反序列化二叉树。<br><a href="https://leetcode.com/problems/serialize-and-deserialize-binary-tree/description/" target="_blank" rel="noopener">查看原题</a></p>
<ul>
<li><p>解法</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Codec</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">serialize</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'$'</span></span><br><span class="line">        <span class="keyword">return</span> (str(root.val) + <span class="string">','</span> + self.serialize(root.left) + </span><br><span class="line">                <span class="string">','</span> + self.serialize(root.right))</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deserialize</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        nodes = data.split(<span class="string">','</span>)[::<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">return</span> self.deserialize_tree(nodes)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deserialize_tree</span><span class="params">(self, nodes)</span>:</span></span><br><span class="line">        val = nodes.pop()</span><br><span class="line">        <span class="keyword">if</span> val == <span class="string">'$'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        root = TreeNode(val)</span><br><span class="line">        root.left = self.deserialize_tree(nodes)</span><br><span class="line">        root.right = self.deserialize_tree(nodes)</span><br><span class="line">        <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="110-Balanced-Binary-Tree"><a href="#110-Balanced-Binary-Tree" class="headerlink" title="110. Balanced Binary Tree"></a>110. Balanced Binary Tree</h3><p>判断是否是平衡二叉树。<br><a href="https://leetcode.com/problems/balanced-binary-tree/description/" target="_blank" rel="noopener">查看原题</a></p>
<ul>
<li><p>方法一：递归+递归。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isBalanced</span><span class="params">(self, root)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> self.isBalanced(root.left) <span class="keyword">and</span> self.isBalanced(root.right) <span class="keyword">and</span> \</span><br><span class="line">           abs(self.max_depth(root.left)-self.max_depth(root.right)) &lt;= <span class="number">1</span></span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max_depth</span><span class="params">(self, root)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> max(self.max_depth(root.left), self.max_depth(root.right)) + <span class="number">1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：dfs. 算深度的时候判断左右是否深度超过1. 这里变量不能把self去掉，否则<code>[1,2,2,3,3,null,null,4,4]</code>会错误的返回<code>True</code>而不是<code>False</code>。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isBalanced</span><span class="params">(self, root: <span class="string">'TreeNode'</span>)</span> -&gt; 'bool':</span></span><br><span class="line">    self.balanced = <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(node)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        left = dfs(node.left)</span><br><span class="line">        right = dfs(node.right)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.balanced <span class="keyword">or</span> abs(left - right) &gt; <span class="number">1</span>:</span><br><span class="line">            self.balanced = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> max(left, right) + <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    dfs(root)</span><br><span class="line">    <span class="keyword">return</span> self.balanced</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="108-Convert-Sorted-Array-to-Binary-Search-Tree"><a href="#108-Convert-Sorted-Array-to-Binary-Search-Tree" class="headerlink" title="108. Convert Sorted Array to Binary Search Tree"></a>108. Convert Sorted Array to Binary Search Tree</h3><p>将有序数组转换成二叉搜索树。<br><a href="https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given the sorted array: [-10,-3,0,5,9],</span><br><span class="line"></span><br><span class="line">One possible answer is: [0,-3,9,-10,null,5],</span><br><span class="line">      0</span><br><span class="line">     &#x2F; \</span><br><span class="line">   -3   9</span><br><span class="line">   &#x2F;   &#x2F;</span><br><span class="line"> -10  5</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法一：递归。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sortedArrayToBST</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    mid = len(nums) // <span class="number">2</span></span><br><span class="line">    root = TreeNode(nums[mid])</span><br><span class="line">    root.left = self.sortedArrayToBST(nums[:mid])</span><br><span class="line">    root.right = self.sortedArrayToBST(nums[mid+<span class="number">1</span>:])</span><br><span class="line">    <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：不使用切片。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sortedArrayToBST</span><span class="params">(self, nums: <span class="string">'List[int]'</span>)</span> -&gt; 'TreeNode':</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">convert</span><span class="params">(lo, hi)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> lo &gt; hi:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        mid = (lo+hi) // <span class="number">2</span></span><br><span class="line">        root = TreeNode(nums[mid])</span><br><span class="line">        root.left = convert(lo, mid<span class="number">-1</span>)</span><br><span class="line">        root.right = convert(mid+<span class="number">1</span>, hi)</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> convert(<span class="number">0</span>, len(nums)<span class="number">-1</span>)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="235-Lowest-Common-Ancestor-of-a-Binary-Search-Tree"><a href="#235-Lowest-Common-Ancestor-of-a-Binary-Search-Tree" class="headerlink" title="235. Lowest Common Ancestor of a Binary Search Tree"></a>235. Lowest Common Ancestor of a Binary Search Tree</h3><p>寻找二叉搜索树的最小公共祖先。<br><a href="https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree" target="_blank" rel="noopener">查看原题</a></p>
<ul>
<li><p>方法一：iteratively.</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lowestCommonAncestor</span><span class="params">(self, root, p, q)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> (root.val-p.val) * (root.val-q.val) &gt; <span class="number">0</span>:</span><br><span class="line">        root = (root.left, root.right)[root.val &lt; p.val]</span><br><span class="line">    <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：recursively.</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lowestCommonAncestor</span><span class="params">(self, root: <span class="string">'TreeNode'</span>, p: <span class="string">'TreeNode'</span>, q: <span class="string">'TreeNode'</span>)</span> -&gt; 'TreeNode':</span></span><br><span class="line">    <span class="keyword">if</span> (root.val-p.val) * (root.val-q.val) &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line">    <span class="keyword">return</span> self.lowestCommonAncestor(</span><br><span class="line">        (root.left, root.right)[root.val &lt; p.val], p, q)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="404-Sum-of-Left-Leaves"><a href="#404-Sum-of-Left-Leaves" class="headerlink" title="404. Sum of Left Leaves"></a>404. Sum of Left Leaves</h3><p>求一个二叉树所有左叶子节点的和。<br><a href="https://leetcode.com/problems/sum-of-left-leaves/description/" target="_blank" rel="noopener">查看原题</a></p>
<ul>
<li><p>方法一：iteratively.这里使用了tuple记录是否为左叶子节点。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sumOfLeftLeaves</span><span class="params">(self, root: <span class="string">'TreeNode'</span>)</span> -&gt; 'int':</span></span><br><span class="line">    ans, stack = <span class="number">0</span>, root <span class="keyword">and</span> [(root, <span class="literal">False</span>)]</span><br><span class="line">    <span class="keyword">while</span> stack:</span><br><span class="line">        n, isleft = stack.pop()</span><br><span class="line">        <span class="keyword">if</span> n:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> n.left <span class="keyword">and</span> <span class="keyword">not</span> n.right <span class="keyword">and</span> isleft:</span><br><span class="line">                ans += n.val</span><br><span class="line">            stack.append((n.right, <span class="literal">False</span>))</span><br><span class="line">            stack.append((n.left, <span class="literal">True</span>))</span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：recursively.</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sumOfLeftLeaves</span><span class="params">(self, root: <span class="string">'TreeNode'</span>)</span> -&gt; 'int':</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> (root.left <span class="keyword">and</span> <span class="keyword">not</span> root.left.left <span class="keyword">and</span> <span class="keyword">not</span> root.left.right):</span><br><span class="line">        <span class="keyword">return</span> root.left.val + self.sumOfLeftLeaves(root.right)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> (self.sumOfLeftLeaves(root.left) + </span><br><span class="line">                self.sumOfLeftLeaves(root.right))</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="938-Range-Sum-of-BST"><a href="#938-Range-Sum-of-BST" class="headerlink" title="938. Range Sum of BST"></a>938. Range Sum of BST</h3><p>给两个节点的值，求二叉搜索树在这两个值之间的节点和。每个节点的值唯一。<br><a href="https://leetcode.com/contest/weekly-contest-110/problems/range-sum-of-bst/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: root &#x3D; [10,5,15,3,7,null,18], L &#x3D; 7, R &#x3D; 15</span><br><span class="line">Output: 32</span><br><span class="line">Input: root &#x3D; [10,5,15,3,7,13,18,1,null,6], L &#x3D; 6, R &#x3D; 10</span><br><span class="line">Output: 23</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法一：先前序遍历了一下，再根据条件求和。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rangeSumBST</span><span class="params">(self, root, L, R)</span>:</span></span><br><span class="line">    traverse, stack = [], [root]</span><br><span class="line">    <span class="keyword">while</span> stack:</span><br><span class="line">        node = stack.pop()</span><br><span class="line">        <span class="keyword">if</span> node:</span><br><span class="line">            traverse.append(node.val)</span><br><span class="line">            <span class="keyword">if</span> node.right:</span><br><span class="line">                stack.append(node.right)</span><br><span class="line">            <span class="keyword">if</span> node.left:</span><br><span class="line">                stack.append(node.left)</span><br><span class="line">    <span class="keyword">return</span> sum([x <span class="keyword">for</span> x <span class="keyword">in</span> traverse <span class="keyword">if</span> L &lt;= x &lt;= R])</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：利用二叉搜索树的特性。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rangeSumBST</span><span class="params">(self, root: <span class="string">'TreeNode'</span>, L: <span class="string">'int'</span>, R: <span class="string">'int'</span>)</span> -&gt; 'int':</span></span><br><span class="line">    ans, stack = <span class="number">0</span>, root <span class="keyword">and</span> [root]</span><br><span class="line">    <span class="keyword">while</span> stack:</span><br><span class="line">        node = stack.pop()</span><br><span class="line">        <span class="keyword">if</span> node.val &gt; L <span class="keyword">and</span> node.left:</span><br><span class="line">            stack.append(node.left)</span><br><span class="line">        <span class="keyword">if</span> node.val &lt; R <span class="keyword">and</span> node.right:</span><br><span class="line">            stack.append(node.right)</span><br><span class="line">        <span class="keyword">if</span> L &lt;= node.val &lt;= R:</span><br><span class="line">            ans += node.val</span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="530-Minimum-Absolute-Difference-in-BST"><a href="#530-Minimum-Absolute-Difference-in-BST" class="headerlink" title="530. Minimum Absolute Difference in BST"></a>530. Minimum Absolute Difference in BST</h3><p>求二叉搜索树任意两个节点的最小差。<br><a href="https://leetcode.com/problems/minimum-absolute-difference-in-bst/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line"></span><br><span class="line">   1</span><br><span class="line">    \</span><br><span class="line">     3</span><br><span class="line">    &#x2F;</span><br><span class="line">   2</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">The minimum absolute difference is 1, which is the difference between 2 and 1 (or between 2 and 3).</span><br></pre></td></tr></table></figure>

<ul>
<li><p>解法</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getMinimumDifference</span><span class="params">(self, root: <span class="string">'TreeNode'</span>)</span> -&gt; 'int':</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inorder</span><span class="params">(n)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> n:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        <span class="keyword">return</span> inorder(n.left) + [n.val] + inorder(n.right)</span><br><span class="line"></span><br><span class="line">    nums = inorder(root)</span><br><span class="line">    <span class="comment"># return min(nums[i+1]-nums[i] for i in range(len(nums)-1))</span></span><br><span class="line">    <span class="keyword">return</span> min(b-a <span class="keyword">for</span> a, b <span class="keyword">in</span> zip(nums, nums[<span class="number">1</span>:]))</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="783-Minimum-Distance-Between-BST-Nodes"><a href="#783-Minimum-Distance-Between-BST-Nodes" class="headerlink" title="783. Minimum Distance Between BST Nodes"></a>783. Minimum Distance Between BST Nodes</h3><p>二叉搜索树两个节点的最小值。和530是一道题。<br><a href="https://leetcode.com/problems/minimum-distance-between-bst-nodes/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: root &#x3D; [4,2,6,1,3,null,null]</span><br><span class="line">Output: 1</span><br><span class="line">Explanation:</span><br><span class="line">Note that root is a TreeNode object, not an array.</span><br><span class="line"></span><br><span class="line">The given tree [4,2,6,1,3,null,null] is represented by the following diagram:</span><br><span class="line"></span><br><span class="line">          4</span><br><span class="line">        &#x2F;   \</span><br><span class="line">      2      6</span><br><span class="line">     &#x2F; \    </span><br><span class="line">    1   3  </span><br><span class="line"></span><br><span class="line">while the minimum difference in this tree is 1, it occurs between node 1 and node 2, also between node 3 and node 2.</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法一：递归 + 生成器， 遍历了两次。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">minDiffInBST</span><span class="params">(self, root: <span class="string">'TreeNode'</span>)</span> -&gt; 'int':</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inorder</span><span class="params">(node)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        <span class="keyword">return</span> inorder(node.left) + [node.val] + inorder(node.right)</span><br><span class="line">    </span><br><span class="line">    t = inorder(root)</span><br><span class="line">    <span class="keyword">return</span> min(t[x]-t[x<span class="number">-1</span>] <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, len(t)))</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：一次遍历，没有保存整个遍历数组，效率高。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">minDiffInBST</span><span class="params">(self, root: TreeNode)</span> -&gt; int:</span></span><br><span class="line">    ans, last, stack = float(<span class="string">'inf'</span>), float(<span class="string">'-inf'</span>), []</span><br><span class="line">    <span class="keyword">while</span> stack <span class="keyword">or</span> root:</span><br><span class="line">        <span class="keyword">while</span> root:</span><br><span class="line">            stack.append(root)</span><br><span class="line">            root = root.left</span><br><span class="line">        root = stack.pop()</span><br><span class="line">        ans, last = min(ans, root.val-last), root.val</span><br><span class="line">        root = root.right</span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法三：一次递归。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    pre = float(<span class="string">'-inf'</span>)</span><br><span class="line">    ans = float(<span class="string">'inf'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minDiffInBST</span><span class="params">(self, root: <span class="string">'TreeNode'</span>)</span> -&gt; 'int':</span></span><br><span class="line">        <span class="keyword">if</span> root.left:</span><br><span class="line">            self.minDiffInBST(root.left)</span><br><span class="line">        self.ans = min(self.ans, root.val-self.pre)</span><br><span class="line">        self.pre = root.val</span><br><span class="line">        <span class="keyword">if</span> root.right:</span><br><span class="line">            self.minDiffInBST(root.right)</span><br><span class="line">        <span class="keyword">return</span> self.ans</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="538-Convert-BST-to-Greater-Tree"><a href="#538-Convert-BST-to-Greater-Tree" class="headerlink" title="538. Convert BST to Greater Tree"></a>538. Convert BST to Greater Tree</h3><p>二叉搜索树转换。使得节点的值等于所有比它大的节点的和。<br><a href="https://leetcode.com/problems/convert-bst-to-greater-tree/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: The root of a Binary Search Tree like this:</span><br><span class="line">              5</span><br><span class="line">            &#x2F;   \</span><br><span class="line">           2     13</span><br><span class="line"></span><br><span class="line">Output: The root of a Greater Tree like this:</span><br><span class="line">             18</span><br><span class="line">            &#x2F;   \</span><br><span class="line">          20     13</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法一：recursively。这里使用了一个变量来保存当前的累加和，然后递归中采用先右后左的方式。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convertBST</span><span class="params">(self, root: <span class="string">'TreeNode'</span>)</span> -&gt; 'TreeNode':</span></span><br><span class="line">    self.sum_val = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">convert</span><span class="params">(node)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> node:</span><br><span class="line">            convert(node.right)</span><br><span class="line">            self.sum_val += node.val</span><br><span class="line">            node.val = self.sum_val </span><br><span class="line">            convert(node.left)</span><br><span class="line"></span><br><span class="line">    convert(root)</span><br><span class="line">    <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：iteratively。94题中的中序遍历迭代方式不能实现，因为迭代时改变了根节点。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convertBST</span><span class="params">(self, root)</span>:</span></span><br><span class="line">    stack = [(root, <span class="literal">False</span>)]</span><br><span class="line">    sum_val = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> stack:</span><br><span class="line">        node, visited = stack.pop()</span><br><span class="line">        <span class="keyword">if</span> node:</span><br><span class="line">            <span class="keyword">if</span> visited:</span><br><span class="line">                node.val += sum_val</span><br><span class="line">                sum_val = node.val</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                stack.append((node.left, <span class="literal">False</span>))</span><br><span class="line">                stack.append((node, <span class="literal">True</span>))</span><br><span class="line">                stack.append((node.right, <span class="literal">False</span>))</span><br><span class="line">    <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="958-Check-Completeness-of-a-Binary-Tree"><a href="#958-Check-Completeness-of-a-Binary-Tree" class="headerlink" title="958. Check Completeness of a Binary Tree"></a>958. Check Completeness of a Binary Tree</h3><p>判断二叉树是否是完整二叉树。完整二叉树为：除了最后一层所有节点不能为空，最后一层节点全部去靠左。<br><a href="https://leetcode.com/problems/check-completeness-of-a-binary-tree/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,2,3,4,5,6]</span><br><span class="line">Output: true</span><br><span class="line">Explanation: Every level before the last is full (ie. levels with node-values &#123;1&#125; and &#123;2, 3&#125;), and all nodes in the last level (&#123;4, 5, 6&#125;) are as far left as possible.</span><br><span class="line"></span><br><span class="line">Input: [1,2,3,4,5,null,7]</span><br><span class="line">Output: false</span><br><span class="line">Explanation: The node with value 7 isn&#39;t as far left as possible.</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法一：采用分层遍历的方式，判断每层的节点是否是2**level。最后一层采用切片的方式判断最左原则。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isCompleteTree</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        levels = [root]</span><br><span class="line">        last_full = <span class="literal">True</span></span><br><span class="line">        level = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> levels:</span><br><span class="line">            value_nodes = [n <span class="keyword">for</span> n <span class="keyword">in</span> levels <span class="keyword">if</span> n]</span><br><span class="line">            <span class="keyword">if</span> value_nodes != levels[:len(value_nodes)]:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(len(levels), <span class="number">2</span>**level)</span><br><span class="line">                <span class="keyword">if</span> len(levels) != <span class="number">2</span>**level:</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> last_full:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                    last_full = <span class="literal">False</span></span><br><span class="line">                </span><br><span class="line">            levels = [kid <span class="keyword">for</span> n <span class="keyword">in</span> levels <span class="keyword">if</span> n <span class="keyword">for</span> kid <span class="keyword">in</span> (n.left, n.right)]</span><br><span class="line">            level += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：遇见第一个None时，后面如果再有非None的值就不是玩整树了。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isCompleteTree</span><span class="params">(self, root: <span class="string">'TreeNode'</span>)</span> -&gt; 'bool':</span></span><br><span class="line">    i, bfs = <span class="number">0</span>, [root]</span><br><span class="line">    <span class="keyword">while</span> bfs[i]:</span><br><span class="line">        bfs.append(bfs[i].left)</span><br><span class="line">        bfs.append(bfs[i].right)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">not</span> any(bfs[i:])</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="543-Diameter-of-Binary-Tree"><a href="#543-Diameter-of-Binary-Tree" class="headerlink" title="543. Diameter of Binary Tree"></a>543. Diameter of Binary Tree</h3><p>求二叉树的最大直径，即任意两节点的长度。<br><a href="https://leetcode.com/problems/diameter-of-binary-tree/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">          1</span><br><span class="line">         &#x2F; \</span><br><span class="line">        2   3</span><br><span class="line">       &#x2F; \     </span><br><span class="line">      4   5    </span><br><span class="line">Return **3**, which is the length of the path [4,2,1,3] or [5,2,1,3].</span><br></pre></td></tr></table></figure>

<ul>
<li><p>recursively, 使用一个实例变量计算了最大值。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">diameterOfBinaryTree</span><span class="params">(self, root: <span class="string">'TreeNode'</span>)</span> -&gt; 'int':</span></span><br><span class="line">    self.diameter = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(node)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        left = dfs(node.left)</span><br><span class="line">        right = dfs(node.right)</span><br><span class="line">        self.diameter = max(self.diameter, left+right)</span><br><span class="line">        <span class="keyword">return</span> max(left, right) + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    dfs(root)</span><br><span class="line">    <span class="keyword">return</span> self.diameter</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="965-Univalued-Binary-Tree"><a href="#965-Univalued-Binary-Tree" class="headerlink" title="965. Univalued Binary Tree"></a>965. Univalued Binary Tree</h3><p>判断一个二叉树是否所有节点具有相同的值。<br><a href="https://leetcode.com/problems/univalued-binary-tree/" target="_blank" rel="noopener">查看原题</a></p>
<ul>
<li><p>方法一：recursively。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isUnivalTree</span><span class="params">(self, root: <span class="string">'TreeNode'</span>)</span> -&gt; 'bool':</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(node)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">not</span> node <span class="keyword">or</span> root.val==node.val <span class="keyword">and</span> </span><br><span class="line">                dfs(node.left) <span class="keyword">and</span> dfs(node.right))</span><br><span class="line">    <span class="keyword">return</span> dfs(root)</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：iteratively.常规写法。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isUnivalTree</span><span class="params">(self, root: <span class="string">'TreeNode'</span>)</span> -&gt; 'bool':</span></span><br><span class="line">    r_val, stack = root.val, [root]</span><br><span class="line">    <span class="keyword">while</span> stack:</span><br><span class="line">        n = stack.pop()</span><br><span class="line">        <span class="keyword">if</span> n:</span><br><span class="line">            <span class="keyword">if</span> n.val != r_val:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            stack.append(n.right)</span><br><span class="line">            stack.append(n.left)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>方法三：前序遍历，生成器方法。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isUnivalTree</span><span class="params">(self, root: <span class="string">'TreeNode'</span>)</span> -&gt; 'bool':</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bfs</span><span class="params">(node)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> node:</span><br><span class="line">            <span class="keyword">yield</span> node.val</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">from</span> bfs(node.left)</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">from</span> bfs(node.right)</span><br><span class="line">            </span><br><span class="line">    it = bfs(root)</span><br><span class="line">    root_val = next(it)</span><br><span class="line">    <span class="keyword">for</span> val <span class="keyword">in</span> it:</span><br><span class="line">        <span class="keyword">if</span> val != root_val:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="563-Binary-Tree-Tilt"><a href="#563-Binary-Tree-Tilt" class="headerlink" title="563. Binary Tree Tilt"></a>563. Binary Tree Tilt</h3><p>返回一个二叉树整个树的倾斜度。所有节点倾斜度的总和。节点的倾斜度等于左子树和右子树所有和差的绝对值。<br><a href="https://leetcode.com/problems/binary-tree-tilt/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">         1</span><br><span class="line">       &#x2F;   \</span><br><span class="line">      2     3</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: </span><br><span class="line">Tilt of node 2 : 0</span><br><span class="line">Tilt of node 3 : 0</span><br><span class="line">Tilt of node 1 : |2-3| &#x3D; 1</span><br><span class="line">Tilt of binary tree : 0 + 0 + 1 &#x3D; 1</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法一：recursively. 这里用tuple记录了节点总和和倾斜度总和。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findTilt</span><span class="params">(self, root)</span>:</span></span><br><span class="line">    self.res = <span class="number">0</span></span><br><span class="line">    _, top_res = self.sum_and_diff(root)</span><br><span class="line">    <span class="keyword">return</span> self.res + top_res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_and_diff</span><span class="params">(self, node)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    l_sum, l_diff = self.sum_and_diff(node.left)</span><br><span class="line">    r_sum, r_diff = self.sum_and_diff(node.right)</span><br><span class="line">    self.res += l_diff + r_diff</span><br><span class="line">    <span class="keyword">return</span> node.val+l_sum+r_sum, abs(l_sum-r_sum)</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二: 想了一会后序遍历的迭代法，没想出来，貌似需要维护很多的变量。这里还是优化一下方法一。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findTilt</span><span class="params">(self, root: <span class="string">'TreeNode'</span>)</span> -&gt; 'int':</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(node)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        l_sum, l_diff = dfs(node.left)</span><br><span class="line">        r_sum, r_diff = dfs(node.right)</span><br><span class="line">        <span class="keyword">return</span> (node.val + l_sum + r_sum, </span><br><span class="line">                abs(l_sum-r_sum) + l_diff + r_diff)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dfs(root)[<span class="number">1</span>]</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="606-Construct-String-from-Binary-Tree"><a href="#606-Construct-String-from-Binary-Tree" class="headerlink" title="606. Construct String from Binary Tree"></a>606. Construct String from Binary Tree</h3><p>根据二叉树重建字符串，使用()表示嵌套关系。<br><a href="https://leetcode.com/problems/construct-string-from-binary-tree/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: Binary tree: [1,2,3,4]</span><br><span class="line">       1</span><br><span class="line">     &#x2F;   \</span><br><span class="line">    2     3</span><br><span class="line">   &#x2F;    </span><br><span class="line">  4     </span><br><span class="line">Output: &quot;1(2(4))(3)&quot;</span><br><span class="line"></span><br><span class="line">Input: Binary tree: [1,2,3,null,4]</span><br><span class="line">       1</span><br><span class="line">     &#x2F;   \</span><br><span class="line">    2     3</span><br><span class="line">     \  </span><br><span class="line">      4 </span><br><span class="line">Output: &quot;1(2()(4))(3)&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>recursively. 左右节点有一点区别，在于如果左节点为空，右节点不为空，要保留左节点的括号。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tree2str</span><span class="params">(self, t)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> t: <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">    left = <span class="string">'(&#123;&#125;)'</span>.format(self.tree2str(t.left)) <span class="keyword">if</span> (t.left <span class="keyword">or</span> t.right) <span class="keyword">else</span> <span class="string">''</span></span><br><span class="line">    right = <span class="string">'(&#123;&#125;)'</span>.format(self.tree2str(t.right)) <span class="keyword">if</span> t.right <span class="keyword">else</span> <span class="string">''</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&#123;&#125;&#123;&#125;&#123;&#125;'</span>.format(t.val, left, right)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="617-Merge-Two-Binary-Trees"><a href="#617-Merge-Two-Binary-Trees" class="headerlink" title="617. Merge Two Binary Trees"></a>617. Merge Two Binary Trees</h3><p>合并两个二叉树，相同位置的节点值相加，空节点算0。<br><a href="https://leetcode.com/problems/merge-two-binary-trees/" target="_blank" rel="noopener">查看原题</a></p>
<ul>
<li><p>方法一：recursively. </p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mergeTrees</span><span class="params">(self, t1, t2)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> t1:</span><br><span class="line">        <span class="keyword">return</span> t2</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> t2:</span><br><span class="line">        <span class="keyword">return</span> t1</span><br><span class="line">    t = TreeNode(t1.val+t2.val)</span><br><span class="line">    t.left = self.mergeTrees(t1.left, t2.left)</span><br><span class="line">    t.right = self.mergeTrees(t1.right, t2.right)</span><br><span class="line">    <span class="keyword">return</span> t</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：iteratively.</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mergeTrees</span><span class="params">(self, t1, t2)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> t1 <span class="keyword">and</span> <span class="keyword">not</span> t2:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    t = TreeNode(<span class="number">0</span>)</span><br><span class="line">    stack = [(t, t1, t2)]</span><br><span class="line">    <span class="keyword">while</span> stack:</span><br><span class="line">        n, n1, n2 = stack.pop()</span><br><span class="line">        <span class="keyword">if</span> n1 <span class="keyword">or</span> n2:</span><br><span class="line">            n.val = (n1.val <span class="keyword">if</span> n1 <span class="keyword">else</span> <span class="number">0</span>) + (n2.val <span class="keyword">if</span> n2 <span class="keyword">else</span> <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> (n1 <span class="keyword">and</span> n1.right) <span class="keyword">or</span> (n2 <span class="keyword">and</span> n2.right):</span><br><span class="line">                n.right = TreeNode(<span class="literal">None</span>)</span><br><span class="line">                stack.append((n.right, n1.right <span class="keyword">if</span> n1 <span class="keyword">else</span> <span class="literal">None</span>, n2.right <span class="keyword">if</span> n2 <span class="keyword">else</span> <span class="literal">None</span>))</span><br><span class="line">            <span class="keyword">if</span> (n1 <span class="keyword">and</span> n1.left) <span class="keyword">or</span> (n2 <span class="keyword">and</span> n2.left):</span><br><span class="line">                n.left = TreeNode(<span class="literal">None</span>)</span><br><span class="line">                stack.append((n.left, n1.left <span class="keyword">if</span> n1 <span class="keyword">else</span> <span class="literal">None</span>, n2.left <span class="keyword">if</span> n2 <span class="keyword">else</span> <span class="literal">None</span>))</span><br><span class="line">    <span class="keyword">return</span> t</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="653-Two-Sum-IV-Input-is-a-BST"><a href="#653-Two-Sum-IV-Input-is-a-BST" class="headerlink" title="653. Two Sum IV - Input is a BST"></a>653. Two Sum IV - Input is a BST</h3><p>判断二叉树中是否有两个节点相加为k。<br><a href="https://leetcode.com/problems/two-sum-iv-input-is-a-bst/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">    5</span><br><span class="line">   &#x2F; \</span><br><span class="line">  3   6</span><br><span class="line"> &#x2F; \   \</span><br><span class="line">2   4   7</span><br><span class="line"></span><br><span class="line">Target &#x3D; 9</span><br><span class="line"></span><br><span class="line">Output: True</span><br></pre></td></tr></table></figure>

<ul>
<li><p>preorder + set.</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findTarget</span><span class="params">(self, root, k)</span>:</span></span><br><span class="line">    seen, stack = set(), root <span class="keyword">and</span> [root]</span><br><span class="line">    <span class="keyword">while</span> stack:</span><br><span class="line">        node = stack.pop()</span><br><span class="line">        <span class="keyword">if</span> node:</span><br><span class="line">            <span class="keyword">if</span> k-node.val <span class="keyword">in</span> seen:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            seen.add(node.val)</span><br><span class="line">            stack.append(node.right)</span><br><span class="line">            stack.append(node.left)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="669-Trim-a-Binary-Search-Tree"><a href="#669-Trim-a-Binary-Search-Tree" class="headerlink" title="669. Trim a Binary Search Tree"></a>669. Trim a Binary Search Tree</h3><p>根据范围修剪二叉搜索树，注意是二叉搜索树，不是普通的二叉树。<br><a href="https://leetcode.com/problems/trim-a-binary-search-tree/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">    1</span><br><span class="line">   &#x2F; \</span><br><span class="line">  0   2</span><br><span class="line"></span><br><span class="line">  L &#x3D; 1</span><br><span class="line">  R &#x3D; 2</span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">    1</span><br><span class="line">      \</span><br><span class="line">       2</span><br></pre></td></tr></table></figure>

<ul>
<li><p>recursively.</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trimBST</span><span class="params">(self, root, L, R)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">trim_node</span><span class="params">(node)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">elif</span> node.val &gt; R:</span><br><span class="line">            <span class="keyword">return</span> trim_node(node.left)</span><br><span class="line">        <span class="keyword">elif</span> node.val &lt; L:</span><br><span class="line">            <span class="keyword">return</span> trim_node(node.right)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            node.left = trim_node(node.left)</span><br><span class="line">            node.right = trim_node(node.right)</span><br><span class="line">            <span class="keyword">return</span> node</span><br><span class="line">    <span class="keyword">return</span> trim_node(root)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="671-Second-Minimum-Node-In-a-Binary-Tree"><a href="#671-Second-Minimum-Node-In-a-Binary-Tree" class="headerlink" title="671. Second Minimum Node In a Binary Tree"></a>671. Second Minimum Node In a Binary Tree</h3><p>找出二叉树中第二小的节点值。左右子节点同时存在或同时不存在，根节点小于等于任意子节点。<br><a href="https://leetcode.com/problems/second-minimum-node-in-a-binary-tree/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">    2</span><br><span class="line">   &#x2F; \</span><br><span class="line">  2   5</span><br><span class="line">     &#x2F; \</span><br><span class="line">    5   7</span><br><span class="line"></span><br><span class="line">Output: 5</span><br><span class="line">Explanation: The smallest value is 2, the second smallest value is 5.</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法一：先放到set里.</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findSecondMinimumValue</span><span class="params">(self, root: <span class="string">'TreeNode'</span>)</span> -&gt; 'int':</span></span><br><span class="line">    self.uniques = set()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(node)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> node:</span><br><span class="line">            self.uniques.add(node.val)</span><br><span class="line">            dfs(node.left)</span><br><span class="line">            dfs(node.right)</span><br><span class="line"></span><br><span class="line">    dfs(root)</span><br><span class="line">    min1, ans = root.val, float(<span class="string">'inf'</span>)</span><br><span class="line">    <span class="keyword">for</span> v <span class="keyword">in</span> self.uniques:</span><br><span class="line">        <span class="keyword">if</span> min1 &lt; v &lt; ans:</span><br><span class="line">            ans = v</span><br><span class="line">    <span class="keyword">return</span> ans <span class="keyword">if</span> ans &lt; float(<span class="string">'inf'</span>) <span class="keyword">else</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二： iteratively.</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findSecondMinimumValue</span><span class="params">(self, root)</span>:</span></span><br><span class="line">    min1 = root.val <span class="keyword">if</span> root <span class="keyword">else</span> <span class="number">-1</span></span><br><span class="line">    res = float(<span class="string">'inf'</span>)</span><br><span class="line">    stack = root <span class="keyword">and</span> [root]</span><br><span class="line">    <span class="keyword">while</span> stack:</span><br><span class="line">        node = stack.pop()</span><br><span class="line">        <span class="keyword">if</span> node:</span><br><span class="line">            <span class="keyword">if</span> min1 &lt; node.val &lt; res:</span><br><span class="line">                res = node.val</span><br><span class="line">            stack.extend([node.right, node.left])</span><br><span class="line">    <span class="keyword">return</span> res <span class="keyword">if</span> res &lt; float(<span class="string">'inf'</span>) <span class="keyword">else</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="687-Longest-Univalue-Path"><a href="#687-Longest-Univalue-Path" class="headerlink" title="687. Longest Univalue Path"></a>687. Longest Univalue Path</h3><p>相同节点最长路径，路径长度按照两个节点之间的边距，也就是节点数-1。<br><a href="https://leetcode.com/problems/longest-univalue-path/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">              5</span><br><span class="line">             &#x2F; \</span><br><span class="line">            4   5</span><br><span class="line">           &#x2F; \   \</span><br><span class="line">          1   1   5</span><br><span class="line">output: 2</span><br></pre></td></tr></table></figure>

<ul>
<li><p>解法</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">longestUnivaluePath</span><span class="params">(self, root)</span>:</span></span><br><span class="line">    self.res = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">traverse</span><span class="params">(node)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        left_len, right_len = traverse(node.left), traverse(node.right)</span><br><span class="line">        left = (left_len+<span class="number">1</span>) <span class="keyword">if</span> node.left <span class="keyword">and</span> node.left.val==node.val <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">        right = (right_len+<span class="number">1</span>) <span class="keyword">if</span> node.right <span class="keyword">and</span> node.right.val==node.val <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">        self.res = max(self.res, left + right)</span><br><span class="line">        <span class="keyword">return</span> max(left, right)</span><br><span class="line">    traverse(root)</span><br><span class="line">    <span class="keyword">return</span> self.res</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="700-Search-in-a-Binary-Search-Tree"><a href="#700-Search-in-a-Binary-Search-Tree" class="headerlink" title="700. Search in a Binary Search Tree"></a>700. Search in a Binary Search Tree</h3><p>在二叉搜索树中搜索节点。<br><a href="https://leetcode.com/problems/search-in-a-binary-search-tree/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given the tree:</span><br><span class="line">        4</span><br><span class="line">       &#x2F; \</span><br><span class="line">      2   7</span><br><span class="line">     &#x2F; \</span><br><span class="line">    1   3</span><br><span class="line"></span><br><span class="line">And the value to search: 2</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法一：recursively.</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">searchBST</span><span class="params">(self, root: <span class="string">'TreeNode'</span>, val: <span class="string">'int'</span>)</span> -&gt; 'TreeNode':</span></span><br><span class="line">    <span class="keyword">if</span> root:</span><br><span class="line">        <span class="keyword">if</span> val == root.val:</span><br><span class="line">            <span class="keyword">return</span> root</span><br><span class="line">        <span class="keyword">return</span> self.searchBST(</span><br><span class="line">            (root.left, root.right)[root.val &lt; val], val)</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：iteratively.</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">searchBST</span><span class="params">(self, root: <span class="string">'TreeNode'</span>, val: <span class="string">'int'</span>)</span> -&gt; 'TreeNode':</span></span><br><span class="line">    node = root</span><br><span class="line">    <span class="keyword">while</span> node <span class="keyword">and</span> node.val != val:</span><br><span class="line">        node = (node.left, node.right)[node.val &lt; val]</span><br><span class="line">    <span class="keyword">return</span> node</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="872-Leaf-Similar-Trees"><a href="#872-Leaf-Similar-Trees" class="headerlink" title="872. Leaf-Similar Trees"></a>872. Leaf-Similar Trees</h3><p>叶子相近的树，只从左到右遍历叶子节点的顺序相同的两棵树。<br><a href="https://leetcode.com/problems/leaf-similar-trees/" target="_blank" rel="noopener">查看原题</a></p>
<ul>
<li><p>方法一：前序遍历+生成器。空间复杂度过高，beats 1%。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leafSimilar</span><span class="params">(self, root1: <span class="string">'TreeNode'</span>, root2: <span class="string">'TreeNode'</span>)</span> -&gt; 'bool':</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">leaves</span><span class="params">(root)</span>:</span></span><br><span class="line">        stack = root <span class="keyword">and</span> [root]</span><br><span class="line">        <span class="keyword">while</span> stack:</span><br><span class="line">            node = stack.pop()</span><br><span class="line">            <span class="keyword">if</span> node:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> node.right <span class="keyword">and</span> <span class="keyword">not</span> node.left:</span><br><span class="line">                    <span class="keyword">yield</span> node.val</span><br><span class="line">                stack.append(node.right)</span><br><span class="line">                stack.append(node.left)</span><br><span class="line"></span><br><span class="line">    leaves1 = leaves(root1)</span><br><span class="line">    leaves2 = leaves(root2)</span><br><span class="line">    <span class="keyword">return</span> all(</span><br><span class="line">        a==b <span class="keyword">for</span> a, b <span class="keyword">in</span> itertools.zip_longest(leaves1, leaves2))</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：dfs.</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leafSimilar</span><span class="params">(self, root1: <span class="string">'TreeNode'</span>, root2: <span class="string">'TreeNode'</span>)</span> -&gt; 'bool':</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(node)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> node:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node.left <span class="keyword">and</span> <span class="keyword">not</span> node.right:</span><br><span class="line">                <span class="keyword">yield</span> node.val</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">from</span> dfs(node.left)</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">from</span> dfs(node.right)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> all(</span><br><span class="line">        a==b <span class="keyword">for</span> a, b <span class="keyword">in</span> itertools.zip_longest(dfs(root1), dfs(root2)))</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="897-Increasing-Order-Search-Tree"><a href="#897-Increasing-Order-Search-Tree" class="headerlink" title="897. Increasing Order Search Tree"></a>897. Increasing Order Search Tree</h3><p>根据中序遍历建立一个只有右子树的二叉树。要求在原树上修改。<br><a href="https://leetcode.com/problems/increasing-order-search-tree/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line">Input: [5,3,6,2,4,null,8,1,null,null,null,7,9]</span><br><span class="line"></span><br><span class="line">       5</span><br><span class="line">      &#x2F; \</span><br><span class="line">    3    6</span><br><span class="line">   &#x2F; \    \</span><br><span class="line">  2   4    8</span><br><span class="line"> &#x2F;        &#x2F; \ </span><br><span class="line">1        7   9</span><br><span class="line"></span><br><span class="line">Output: [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]</span><br><span class="line"></span><br><span class="line"> 1</span><br><span class="line">  \</span><br><span class="line">   2</span><br><span class="line">    \</span><br><span class="line">     3</span><br><span class="line">      \</span><br><span class="line">       4</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法一：iteratively.</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">increasingBST</span><span class="params">(self, root: TreeNode)</span> -&gt; TreeNode:</span></span><br><span class="line">    ans = head = TreeNode(<span class="number">0</span>)</span><br><span class="line">    stack = []</span><br><span class="line">    <span class="keyword">while</span> stack <span class="keyword">or</span> root:</span><br><span class="line">        <span class="keyword">while</span> root:</span><br><span class="line">            stack.append(root)</span><br><span class="line">            root = root.left</span><br><span class="line">        root = stack.pop()</span><br><span class="line">        head.right = TreeNode(root.val)</span><br><span class="line">        root, head = root.right, head.right</span><br><span class="line">    <span class="keyword">return</span> ans.right</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：生成器。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">increasingBST</span><span class="params">(self, root: <span class="string">'TreeNode'</span>)</span> -&gt; 'TreeNode':</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inorder</span><span class="params">(node)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> node:</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">from</span> inorder(node.left)</span><br><span class="line">            <span class="keyword">yield</span> node.val</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">from</span> inorder(node.right)</span><br><span class="line">            </span><br><span class="line">    ans = head = TreeNode(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> v <span class="keyword">in</span> inorder(root):</span><br><span class="line">        head.right = TreeNode(v)</span><br><span class="line">        head = head.right</span><br><span class="line">    <span class="keyword">return</span> ans.right</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法三：题中有个要求在原树上修改，所以以上两种方法其实不符合要求，这里使用递归实现。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">increasingBST</span><span class="params">(self, root: <span class="string">'TreeNode'</span>, tail=None)</span> -&gt; 'TreeNode':</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span> tail</span><br><span class="line">    res = self.increasingBST(root.left, root)</span><br><span class="line">    root.left = <span class="literal">None</span></span><br><span class="line">    root.right = self.increasingBST(root.right, tail)</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="993-Cousins-in-Binary-Tree"><a href="#993-Cousins-in-Binary-Tree" class="headerlink" title="993. Cousins in Binary Tree"></a>993. Cousins in Binary Tree</h3><p>表弟节点指两个节点在同一深度，并且父节点不同。判断两个节点是否是表弟节点。树中节点值唯一。<br><a href="https://leetcode.com/problems/cousins-in-binary-tree/" target="_blank" rel="noopener">查看原题</a></p>
<ul>
<li><p>用dict记录。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isCousins</span><span class="params">(self, root: <span class="string">'TreeNode'</span>, x: <span class="string">'int'</span>, y: <span class="string">'int'</span>)</span> -&gt; 'bool':</span></span><br><span class="line">    parent, depth = &#123;&#125;, &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(node, par=None)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> node:</span><br><span class="line">            parent[node.val] = par</span><br><span class="line">            depth[node.val] = depth[par] + <span class="number">1</span> <span class="keyword">if</span> par <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">            dfs(node.left, node.val)</span><br><span class="line">            dfs(node.right, node.val)</span><br><span class="line">            </span><br><span class="line">    dfs(root)</span><br><span class="line">    <span class="keyword">return</span> depth[x] == depth[y] <span class="keyword">and</span> parent[x] != parent[y]</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="230-Kth-Smallest-Element-in-a-BST"><a href="#230-Kth-Smallest-Element-in-a-BST" class="headerlink" title="230. Kth Smallest Element in a BST"></a>230. Kth Smallest Element in a BST</h3><p>二叉搜索树的第K小节点值。<br><a href="https://leetcode.com/problems/kth-smallest-element-in-a-bst/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: root &#x3D; [3,1,4,null,2], k &#x3D; 1</span><br><span class="line">   3</span><br><span class="line">  &#x2F; \</span><br><span class="line"> 1   4</span><br><span class="line">  \</span><br><span class="line">   2</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法一：生成器前序遍历。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">kthSmallest</span><span class="params">(self, root: TreeNode, k: int)</span> -&gt; int:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inorder</span><span class="params">(node)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> node:</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">from</span> inorder(node.left)</span><br><span class="line">            <span class="keyword">yield</span> node.val</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">from</span> inorder(node.right)</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> inorder(root):</span><br><span class="line">        <span class="keyword">if</span> k == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> n</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            k -= <span class="number">1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：迭代。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">kthSmallest</span><span class="params">(self, root: TreeNode, k: int)</span> -&gt; int:</span></span><br><span class="line">    stack = []</span><br><span class="line">    <span class="keyword">while</span> root <span class="keyword">or</span> stack:</span><br><span class="line">        <span class="keyword">while</span> root:</span><br><span class="line">            stack.append(root)</span><br><span class="line">            root = root.left</span><br><span class="line">        root = stack.pop()</span><br><span class="line">        k -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> k == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> root.val</span><br><span class="line">        root = root.right</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="98-Validate-Binary-Search-Tree"><a href="#98-Validate-Binary-Search-Tree" class="headerlink" title="98. Validate Binary Search Tree"></a>98. Validate Binary Search Tree</h3><p>验证一个树是否是二叉搜索树。<br><a href="https://leetcode.com/problems/validate-binary-search-tree/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    5</span><br><span class="line">   &#x2F; \</span><br><span class="line">  1   4</span><br><span class="line">     &#x2F; \</span><br><span class="line">    3   6</span><br><span class="line">Output: false</span><br><span class="line">Explanation: The input is: [5,1,4,null,null,3,6]. The root node&#39;s value</span><br><span class="line">             is 5 but its right child&#39;s value is 4.</span><br></pre></td></tr></table></figure>

<ul>
<li><p>中序遍历即可。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isValidBST</span><span class="params">(self, root: TreeNode)</span> -&gt; bool:</span></span><br><span class="line">    stack, last = [], float(<span class="string">'-inf'</span>)</span><br><span class="line">    <span class="keyword">while</span> stack <span class="keyword">or</span> root:</span><br><span class="line">        <span class="keyword">while</span> root:</span><br><span class="line">            stack.append(root)</span><br><span class="line">            root = root.left</span><br><span class="line">        root = stack.pop()</span><br><span class="line">        <span class="keyword">if</span> root.val &lt;= last:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        last = root.val</span><br><span class="line">        root = root.right</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="109-Convert-Sorted-List-to-Binary-Search-Tree"><a href="#109-Convert-Sorted-List-to-Binary-Search-Tree" class="headerlink" title="109. Convert Sorted List to Binary Search Tree"></a>109. Convert Sorted List to Binary Search Tree</h3><p>将有序链表转成平衡二叉搜索树。<br><a href="https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given the sorted linked list: [-10,-3,0,5,9],</span><br><span class="line"></span><br><span class="line">One possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:</span><br><span class="line"></span><br><span class="line">      0</span><br><span class="line">     &#x2F; \</span><br><span class="line">   -3   9</span><br><span class="line">   &#x2F;   &#x2F;</span><br><span class="line"> -10  5</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法一：先遍历链表，再二分递归创建树。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sortedListToBST</span><span class="params">(self, head: ListNode)</span> -&gt; TreeNode:</span></span><br><span class="line">    inorder = []</span><br><span class="line">    <span class="keyword">while</span> head:</span><br><span class="line">        inorder.append(head.val)</span><br><span class="line">        head = head.next</span><br><span class="line">    lo, hi = <span class="number">0</span>, len(inorder)<span class="number">-1</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build_tree</span><span class="params">(lo, hi)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> lo &gt; hi:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        mid = (lo + hi) // <span class="number">2</span></span><br><span class="line">        root = TreeNode(inorder[mid])</span><br><span class="line">        root.left = build_tree(lo, mid<span class="number">-1</span>)</span><br><span class="line">        root.right = build_tree(mid+<span class="number">1</span>, hi)</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> build_tree(lo, hi)</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：这个方法很棒。先遍历一遍找到链表的长度；然后递归去构建树，共享一个<code>head</code>可变对象。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sortedListToBST</span><span class="params">(self, head: ListNode)</span> -&gt; TreeNode:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_size</span><span class="params">(head)</span>:</span></span><br><span class="line">        h, count = head, <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> h:</span><br><span class="line">            h = h.next</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line">    lo, hi = <span class="number">0</span>, find_size(head)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">form_bst</span><span class="params">(lo, hi)</span>:</span></span><br><span class="line">        <span class="keyword">nonlocal</span> head</span><br><span class="line">        <span class="keyword">if</span> lo &gt; hi:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        mid = (lo + hi) // <span class="number">2</span></span><br><span class="line">        left = form_bst(lo, mid<span class="number">-1</span>)</span><br><span class="line">        root = TreeNode(head.val)</span><br><span class="line">        head = head.next</span><br><span class="line">        root.left = left</span><br><span class="line">        right = form_bst(mid+<span class="number">1</span>, hi)</span><br><span class="line">        root.right = right</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> form_bst(lo, hi<span class="number">-1</span>)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1008-Construct-Binary-Search-Tree-from-Preorder-Traversal"><a href="#1008-Construct-Binary-Search-Tree-from-Preorder-Traversal" class="headerlink" title="1008. Construct Binary Search Tree from Preorder Traversal"></a>1008. Construct Binary Search Tree from Preorder Traversal</h3><p>根据前序遍历重建二叉搜索树。<br><a href="https://leetcode.com/problems/construct-binary-search-tree-from-preorder-traversal/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [8,5,1,7,10,12]</span><br><span class="line">Output: [8,5,10,1,7,null,12]</span><br></pre></td></tr></table></figure>

<ul>
<li><p>recursively.</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bstFromPreorder</span><span class="params">(self, preorder: List[int])</span> -&gt; TreeNode:</span></span><br><span class="line">     <span class="keyword">if</span> <span class="keyword">not</span> preorder: <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">     root = TreeNode(preorder[<span class="number">0</span>])</span><br><span class="line">     i = bisect.bisect(preorder, root.val)</span><br><span class="line">     root.left = self.bstFromPreorder(preorder[<span class="number">1</span>:i])</span><br><span class="line">     root.right = self.bstFromPreorder(preorder[i:])</span><br><span class="line">     <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="236-Lowest-Common-Ancestor-of-a-Binary-Tree"><a href="#236-Lowest-Common-Ancestor-of-a-Binary-Tree" class="headerlink" title="236. Lowest Common Ancestor of a Binary Tree"></a>236. Lowest Common Ancestor of a Binary Tree</h3><p>二叉树两个节点的最小公共祖先。<br><a href="https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/" target="_blank" rel="noopener">查看原题</a></p>
<ul>
<li><p>方法一: 递归，是用mid表示当前节点是否是其中的一个。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lowestCommonAncestor</span><span class="params">(self, root: <span class="string">'TreeNode'</span>, p: <span class="string">'TreeNode'</span>, q: <span class="string">'TreeNode'</span>)</span> -&gt; 'TreeNode':</span></span><br><span class="line">    self.ans = <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(node)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        left = dfs(node.left)</span><br><span class="line">        right = dfs(node.right)</span><br><span class="line">        mid = node <span class="keyword">in</span> (p, q)</span><br><span class="line">        <span class="keyword">if</span> mid + left + right &gt;= <span class="number">2</span>:</span><br><span class="line">            self.ans = node</span><br><span class="line">        <span class="keyword">return</span> mid <span class="keyword">or</span> left <span class="keyword">or</span> right</span><br><span class="line">    dfs(root)</span><br><span class="line">    <span class="keyword">return</span> self.ans</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：递归，思想如果是两个节点中的一个，就返回这个节点。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lowestCommonAncestor</span><span class="params">(self, root: <span class="string">'TreeNode'</span>, p: <span class="string">'TreeNode'</span>, q: <span class="string">'TreeNode'</span>)</span> -&gt; 'TreeNode':</span></span><br><span class="line">    <span class="keyword">if</span> root <span class="keyword">in</span> (<span class="literal">None</span>, p, q):</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line">    left = self.lowestCommonAncestor(root.left, p, q)</span><br><span class="line">    right = self.lowestCommonAncestor(root.right, p, q)</span><br><span class="line">    <span class="keyword">return</span> root <span class="keyword">if</span> left <span class="keyword">and</span> right <span class="keyword">else</span> left <span class="keyword">or</span> right</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法三：参考了257的dfs解法。需要注意的是一定要加<code>list(path)</code>，否则由于可变对象的问题，会导致最后结果为<code>[]</code>。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lowestCommonAncestor</span><span class="params">(self, root: <span class="string">'TreeNode'</span>, p: <span class="string">'TreeNode'</span>, q: <span class="string">'TreeNode'</span>)</span> -&gt; 'TreeNode':</span></span><br><span class="line">    ans = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(n, path)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> n:</span><br><span class="line">            path.append(n)</span><br><span class="line">            <span class="keyword">if</span> n <span class="keyword">in</span> (p, q):</span><br><span class="line">                ans.append(list(path))   <span class="comment"># must use list, or you will get []</span></span><br><span class="line">                <span class="keyword">if</span> len(ans) == <span class="number">2</span>:		 <span class="comment"># optimized</span></span><br><span class="line">                    <span class="keyword">return</span> </span><br><span class="line">            dfs(n.left, path)</span><br><span class="line">            dfs(n.right, path)</span><br><span class="line">            path.pop()</span><br><span class="line">    dfs(root, [])</span><br><span class="line">    <span class="keyword">return</span> next(a <span class="keyword">for</span> a, b <span class="keyword">in</span> list(zip(*ans))[::<span class="number">-1</span>] <span class="keyword">if</span> a==b)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="654-Maximum-Binary-Tree"><a href="#654-Maximum-Binary-Tree" class="headerlink" title="654. Maximum Binary Tree"></a>654. Maximum Binary Tree</h3><p>根据数组建立一个树，要求根节点为数组最大的树。<br><a href="https://leetcode.com/problems/maximum-binary-tree/" target="_blank" rel="noopener">查看原题</a></p>
<ul>
<li><p>解法</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">constructMaximumBinaryTree</span><span class="params">(self, nums: List[int])</span> -&gt; TreeNode:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    v = max(nums)</span><br><span class="line">    root = TreeNode(v)</span><br><span class="line">    i = nums.index(v)</span><br><span class="line">    root.left = self.constructMaximumBinaryTree(nums[:i])</span><br><span class="line">    root.right = self.constructMaximumBinaryTree(nums[i+<span class="number">1</span>:])</span><br><span class="line">    <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="513-Find-Bottom-Left-Tree-Value"><a href="#513-Find-Bottom-Left-Tree-Value" class="headerlink" title="513. Find Bottom Left Tree Value"></a>513. Find Bottom Left Tree Value</h3><p>寻找二叉树最底层的最左节点。<br><a href="https://leetcode.com/problems/find-bottom-left-tree-value/" target="_blank" rel="noopener">查看原题</a></p>
<ul>
<li><p>方法一：根据分层遍历改编。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findBottomLeftValue</span><span class="params">(self, root: TreeNode)</span> -&gt; int:</span></span><br><span class="line">    ans, levels = <span class="literal">None</span>, root <span class="keyword">and</span> [root]</span><br><span class="line">    <span class="keyword">while</span> levels:</span><br><span class="line">        ans = levels[<span class="number">0</span>].val</span><br><span class="line">        levels = [k <span class="keyword">for</span> n <span class="keyword">in</span> levels <span class="keyword">for</span> k <span class="keyword">in</span> (n.left, n.right) <span class="keyword">if</span> k]</span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：双端队列，BFS.</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findBottomLeftValue</span><span class="params">(self, root: TreeNode)</span> -&gt; int:</span></span><br><span class="line">    q = collections.deque([root])</span><br><span class="line">    <span class="keyword">while</span> q:</span><br><span class="line">        node = q.pop()</span><br><span class="line">        <span class="keyword">if</span> node.right:</span><br><span class="line">            q.appendleft(node.right)</span><br><span class="line">        <span class="keyword">if</span> node.left:</span><br><span class="line">            q.appendleft(node.left)</span><br><span class="line">    <span class="keyword">return</span> node.val</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法三：循环时改变迭代对象，这种方式个人觉得不好。不过好在是在遍历之前添加到末端。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findBottomLeftValue</span><span class="params">(self, root: TreeNode)</span> -&gt; int:</span></span><br><span class="line">    queue = [root]</span><br><span class="line">    <span class="keyword">for</span> node <span class="keyword">in</span> queue:</span><br><span class="line">        queue += (x <span class="keyword">for</span> x <span class="keyword">in</span> (node.right, node.left) <span class="keyword">if</span> x)</span><br><span class="line">    <span class="keyword">return</span> node.val</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="814-Binary-Tree-Pruning"><a href="#814-Binary-Tree-Pruning" class="headerlink" title="814. Binary Tree Pruning"></a>814. Binary Tree Pruning</h3><p>剪掉树中不包含1的子树。<br><a href="https://leetcode.com/problems/binary-tree-pruning/" target="_blank" rel="noopener">查看原题</a></p>
<ul>
<li><p>recursively.</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pruneTree</span><span class="params">(self, root: TreeNode)</span> -&gt; TreeNode:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(node)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        left = dfs(node.left)</span><br><span class="line">        right = dfs(node.right)</span><br><span class="line">        <span class="keyword">if</span> left:</span><br><span class="line">            node.left = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> right:</span><br><span class="line">            node.right = <span class="literal">None</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> node.val==<span class="number">0</span> <span class="keyword">and</span> left <span class="keyword">and</span> right</span><br><span class="line">    dfs(root)</span><br><span class="line">    <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="199-Binary-Tree-Right-Side-View"><a href="#199-Binary-Tree-Right-Side-View" class="headerlink" title="199. Binary Tree Right Side View"></a>199. Binary Tree Right Side View</h3><p>二叉树从右向左看时，从上到下的节点。<br><a href="https://leetcode.com/problems/binary-tree-right-side-view/" target="_blank" rel="noopener">查看原题</a></p>
<ul>
<li><p>方法一：和分层遍历思想相同。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rightSideView</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">    ans, levels = [], root <span class="keyword">and</span> [root]</span><br><span class="line">    <span class="keyword">while</span> levels:</span><br><span class="line">        ans.append(levels[<span class="number">-1</span>].val)</span><br><span class="line">        levels = [k <span class="keyword">for</span> n <span class="keyword">in</span> levels <span class="keyword">for</span> k <span class="keyword">in</span> (n.left, n.right) <span class="keyword">if</span> k]</span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：dfs. 从右到左深度遍历，用一个深度变量控制是否是第一个最右节点。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rightSideView</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">    ans = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(n, depth)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> n:</span><br><span class="line">            <span class="keyword">if</span> depth == len(ans):</span><br><span class="line">                ans.append(n.val)</span><br><span class="line">            dfs(n.right, depth+<span class="number">1</span>)</span><br><span class="line">            dfs(n.left, depth+<span class="number">1</span>)</span><br><span class="line">    dfs(root, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="662-Maximum-Width-of-Binary-Tree"><a href="#662-Maximum-Width-of-Binary-Tree" class="headerlink" title="662. Maximum Width of Binary Tree"></a>662. Maximum Width of Binary Tree</h3><p>二叉树的最大宽度。<br><a href="https://leetcode.com/problems/maximum-width-of-binary-tree/" target="_blank" rel="noopener">查看原题</a></p>
<ul>
<li><p>方法一：常规队列写法。需要注意的是，每层遍历要用最右边的减去最左边的才是宽度。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">widthOfBinaryTree</span><span class="params">(self, root: TreeNode)</span> -&gt; int:</span></span><br><span class="line">    queue = [(root, <span class="number">0</span>, <span class="number">0</span>)]</span><br><span class="line">    ans = cur_depth = left = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> node, depth, pos <span class="keyword">in</span> queue:</span><br><span class="line">        <span class="keyword">if</span> node:</span><br><span class="line">            queue.append((node.left, depth+<span class="number">1</span>, pos*<span class="number">2</span>))</span><br><span class="line">            queue.append((node.right, depth+<span class="number">1</span>, pos*<span class="number">2</span>+<span class="number">1</span>))</span><br><span class="line">            <span class="keyword">if</span> cur_depth != depth:</span><br><span class="line">                cur_depth = depth</span><br><span class="line">                left = pos</span><br><span class="line">            ans = max(pos-left+<span class="number">1</span>, ans)</span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：按照分层顺序将所有节点编号，从1开始，<code>enumerate</code>其实就是计算<code>2*pos</code>, <code>2*pos+1</code>。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">widthOfBinaryTree</span><span class="params">(self, root: TreeNode)</span> -&gt; int:</span></span><br><span class="line">    levels = [(<span class="number">1</span>, root)]</span><br><span class="line">    width = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> levels:</span><br><span class="line">        width = max(levels[<span class="number">-1</span>][<span class="number">0</span>] - levels[<span class="number">0</span>][<span class="number">0</span>] + <span class="number">1</span>, width)</span><br><span class="line">        levels = [k</span><br><span class="line">                  <span class="keyword">for</span> pos, n <span class="keyword">in</span> levels</span><br><span class="line">                  <span class="keyword">for</span> k <span class="keyword">in</span> enumerate((n.left, n.right), <span class="number">2</span> * pos)</span><br><span class="line">                  <span class="keyword">if</span> k[<span class="number">1</span>]]</span><br><span class="line">    <span class="keyword">return</span> width</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="222-Count-Complete-Tree-Nodes"><a href="#222-Count-Complete-Tree-Nodes" class="headerlink" title="222. Count Complete Tree Nodes"></a>222. Count Complete Tree Nodes</h3><p>统计完整树的节点个数。<br><a href="https://leetcode.com/problems/count-complete-tree-nodes/" target="_blank" rel="noopener">查看原题</a></p>
<ul>
<li><p>二分法。比较左子树的深度和右子树的深度，如果相同则表明左子树为满树，右子树为完整树。如果不同则表明左子树为完整树，右子树为满树。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">countNodes</span><span class="params">(self, root: TreeNode)</span> -&gt; int:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    left, right = self.depth(root.left), self.depth(root.right)</span><br><span class="line">    <span class="keyword">if</span> left == right:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> ** left + self.countNodes(root.right)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> ** right + self.countNodes(root.left)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">depth</span><span class="params">(self, node)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + self.depth(node.left)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1022-Sum-of-Root-To-Leaf-Binary-Numbers"><a href="#1022-Sum-of-Root-To-Leaf-Binary-Numbers" class="headerlink" title="1022. Sum of Root To Leaf Binary Numbers"></a>1022. Sum of Root To Leaf Binary Numbers</h3><p>计算所有根到叶子节点路径二进制数表示的的和。<br><a href="https://leetcode.com/problems/sum-of-root-to-leaf-binary-numbers/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,0,1,0,1,0,1]</span><br><span class="line">Output: 22</span><br><span class="line">Explanation: (100) + (101) + (110) + (111) &#x3D; 4 + 5 + 6 + 7 &#x3D; 22</span><br></pre></td></tr></table></figure>

<ul>
<li><p>思路和 257.Binary Tree Paths一样。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sumRootToLeaf</span><span class="params">(self, root: TreeNode)</span> -&gt; int:</span></span><br><span class="line">    self.ans = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(n, path)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> n:</span><br><span class="line">            path.append(str(n.val))</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> n.left <span class="keyword">and</span> <span class="keyword">not</span> n.right:</span><br><span class="line">                self.ans += int(<span class="string">''</span>.join(path), <span class="number">2</span>)</span><br><span class="line">            dfs(n.left, path)</span><br><span class="line">            dfs(n.right, path)</span><br><span class="line">            path.pop()</span><br><span class="line">            </span><br><span class="line">    dfs(root, [])</span><br><span class="line">    <span class="keyword">return</span> self.ans % (<span class="number">10</span>**<span class="number">9</span> + <span class="number">7</span>)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1026-Maximum-Difference-Between-Node-and-Ancestor"><a href="#1026-Maximum-Difference-Between-Node-and-Ancestor" class="headerlink" title="1026. Maximum Difference Between Node and Ancestor"></a>1026. Maximum Difference Between Node and Ancestor</h3><p>祖先和其子节点的最大差绝对值。<br><a href="https://leetcode.com/problems/maximum-difference-between-node-and-ancestor/" target="_blank" rel="noopener">查看原题</a></p>
<ul>
<li><p>方法一：周赛时写的dfs. 380ms. 瓶颈在于每次都求一次最大值和最小值。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxAncestorDiff</span><span class="params">(self, root: TreeNode)</span> -&gt; int:</span></span><br><span class="line">    self.ans = float(<span class="string">'-inf'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(n, p)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> n:</span><br><span class="line">            <span class="keyword">if</span> p:</span><br><span class="line">                max_diff = max(abs(max(p)-n.val), abs(min(p)-n.val))</span><br><span class="line">                self.ans = max(self.ans, max_diff)</span><br><span class="line">            p.append(n.val)</span><br><span class="line">            dfs(n.left, p)</span><br><span class="line">            dfs(n.right, p)</span><br><span class="line">            p.pop()</span><br><span class="line">    </span><br><span class="line">    dfs(root, [])</span><br><span class="line">    <span class="keyword">return</span> self.ans</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：改良了一下，使用p记录一个当前的最大值和最小值。52ms.</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxAncestorDiff</span><span class="params">(self, root: TreeNode)</span> -&gt; int:</span></span><br><span class="line">    self.ans = float(<span class="string">'-inf'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(n, p)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> n:</span><br><span class="line">            <span class="keyword">if</span> p:</span><br><span class="line">                mx, mn = p[<span class="number">-1</span>]</span><br><span class="line">                self.ans = max(self.ans, max(mx-n.val, n.val-mn))</span><br><span class="line">                p.append((max(mx, n.val), min(mn, n.val)))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                p.append((n.val, n.val))</span><br><span class="line">            dfs(n.left, p)</span><br><span class="line">            dfs(n.right, p)</span><br><span class="line">            p.pop() </span><br><span class="line">    dfs(root, [])</span><br><span class="line">    <span class="keyword">return</span> self.ans</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1038-Binary-Search-Tree-to-Greater-Sum-Tree"><a href="#1038-Binary-Search-Tree-to-Greater-Sum-Tree" class="headerlink" title="1038. Binary Search Tree to Greater Sum Tree"></a>1038. Binary Search Tree to Greater Sum Tree</h3><p>二叉搜索树转成一颗规则的树，从右根左的顺序累加节点值。<br><a href="https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree/" target="_blank" rel="noopener">查看原题</a></p>
<ul>
<li><p>方法一：使用栈。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bstToGst</span><span class="params">(self, root: TreeNode)</span> -&gt; TreeNode:</span></span><br><span class="line">    head = root</span><br><span class="line">    stack, total = [], <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> stack <span class="keyword">or</span> root:</span><br><span class="line">        <span class="keyword">while</span> root:</span><br><span class="line">            stack.append(root)</span><br><span class="line">            root = root.right</span><br><span class="line">        root = stack.pop()</span><br><span class="line">        total += root.val</span><br><span class="line">        root.val = total</span><br><span class="line">        root = root.left</span><br><span class="line">    <span class="keyword">return</span> head</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：Lee神的递归方式。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    val = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bstToGst</span><span class="params">(self, root: TreeNode)</span> -&gt; TreeNode:</span></span><br><span class="line">        <span class="keyword">if</span> root.right: self.bstToGst(root.right)</span><br><span class="line">        root.val = self.val = self.val + root.val</span><br><span class="line">        <span class="keyword">if</span> root.left: self.bstToGst(root.left)</span><br><span class="line">        <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1080-Insufficient-Nodes-in-Root-to-Leaf-Paths"><a href="#1080-Insufficient-Nodes-in-Root-to-Leaf-Paths" class="headerlink" title="1080. Insufficient Nodes in Root to Leaf Paths"></a>1080. Insufficient Nodes in Root to Leaf Paths</h3><p>计算所有的根到叶子节点的路径，如果路径和小于给定值，则剪掉这个树枝。<br><a href="https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree/" target="_blank" rel="noopener">查看原题</a></p>
<ul>
<li><p>recursively.</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sufficientSubset</span><span class="params">(self, root: TreeNode, limit: int)</span> -&gt; TreeNode:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root.left <span class="keyword">and</span> <span class="keyword">not</span> root.right:</span><br><span class="line">        <span class="keyword">return</span> root <span class="keyword">if</span> root.val &gt;= limit <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">    root.left = self.sufficientSubset(root.left, limit-root.val)</span><br><span class="line">    root.right = self.sufficientSubset(root.right, limit-root.val)</span><br><span class="line">    <span class="keyword">return</span> root <span class="keyword">if</span> root.left <span class="keyword">or</span> root.right <span class="keyword">else</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1161-Maximum-Level-Sum-of-a-Binary-Tree"><a href="#1161-Maximum-Level-Sum-of-a-Binary-Tree" class="headerlink" title="1161. Maximum Level Sum of a Binary Tree"></a>1161. Maximum Level Sum of a Binary Tree</h3><p>求最节点和最大层的层数。<br><a href="https://leetcode.com/problems/maximum-level-sum-of-a-binary-tree/" target="_blank" rel="noopener">查看原题</a></p>
<ul>
<li><p>分层遍历</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxLevelSum</span><span class="params">(self, root: TreeNode)</span> -&gt; int:</span></span><br><span class="line">    lvsum = []</span><br><span class="line">    level = [root]</span><br><span class="line">    <span class="keyword">while</span> level:</span><br><span class="line">        lvsum.append(sum(n.val <span class="keyword">for</span> n <span class="keyword">in</span> level))</span><br><span class="line">        level = [k <span class="keyword">for</span> n <span class="keyword">in</span> level <span class="keyword">for</span> k <span class="keyword">in</span> (n.left, n.right) <span class="keyword">if</span> k]</span><br><span class="line">    <span class="keyword">return</span> lvsum.index(max(lvsum)) + <span class="number">1</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1104-Path-In-Zigzag-Labelled-Binary-Tree"><a href="#1104-Path-In-Zigzag-Labelled-Binary-Tree" class="headerlink" title="1104. Path In Zigzag Labelled Binary Tree"></a>1104. Path In Zigzag Labelled Binary Tree</h3><p>之字形树的目标节点路径。<br><a href="https://leetcode.com/problems/path-in-zigzag-labelled-binary-tree/" target="_blank" rel="noopener">查看原题</a></p>
<ul>
<li><p>方法一：迭代，此题纯粹是数学题，这里先假设非之字形的树，找到规律，然后知道每层的节点数再相减。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pathInZigZagTree</span><span class="params">(self, label: int)</span> -&gt; List[int]:</span></span><br><span class="line">    </span><br><span class="line">    ans = []</span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">2</span> ** n &lt;= label:</span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span> <span class="keyword">and</span> label &gt;= <span class="number">1</span>:</span><br><span class="line">        ans.append(label)</span><br><span class="line">        org_lable = label // <span class="number">2</span></span><br><span class="line">        label = <span class="number">2</span>**(n<span class="number">-1</span>)<span class="number">-1</span>-org_lable+<span class="number">2</span>**(n<span class="number">-2</span>)</span><br><span class="line">        n -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> ans[::<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：Lee神的递归。原理一样，层数n是通过查2的幂求的。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pathInZigZagTree</span><span class="params">(self, x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> self.pathInZigZagTree(<span class="number">3</span> * <span class="number">2</span> ** (len(bin(x)) - <span class="number">4</span>) - <span class="number">1</span> - x / <span class="number">2</span>) + [x] <span class="keyword">if</span> x &gt; <span class="number">1</span> <span class="keyword">else</span> [<span class="number">1</span>]</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1110-Delete-Nodes-And-Return-Forest"><a href="#1110-Delete-Nodes-And-Return-Forest" class="headerlink" title="1110. Delete Nodes And Return Forest"></a>1110. Delete Nodes And Return Forest</h3><p>给定一个树，删除指定的一些节点，然后删除的节点的左右子树成为单独的根节点。返回所有的树。<br><a href="https://leetcode.com/problems/delete-nodes-and-return-forest/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: root &#x3D; [1,2,3,4,5,6,7], to_delete &#x3D; [3,5]</span><br><span class="line">Output: [[1,2,null,4],[6],[7]]</span><br></pre></td></tr></table></figure>

<ul>
<li><p>递归。做着题的时候有个误区：在当前节点被删除后，找到其在父节点对应的位置，然后置为空。实际上应该讲根节点删除的状态保留，在下一层处理。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delNodes</span><span class="params">(self, root: TreeNode, to_delete: List[int])</span> -&gt; List[TreeNode]:</span></span><br><span class="line">    ans = []</span><br><span class="line">    to_del = set(to_delete)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(root, is_root)</span>:</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        is_del = root.val <span class="keyword">in</span> to_del</span><br><span class="line">        root.left = helper(root.left, is_del)</span><br><span class="line">        root.right = helper(root.right, is_del)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> is_del <span class="keyword">and</span> is_root:</span><br><span class="line">            ans.append(root)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span> <span class="keyword">if</span> is_del <span class="keyword">else</span> root</span><br><span class="line">    </span><br><span class="line">    helper(root, <span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Binary Search(二分法)</title>
    <url>/2016/07/13/binary-search/</url>
    <content><![CDATA[<blockquote>
<p>在单调中寻找，在起伏中失效</p>
</blockquote>
<h2 id="关于二分法"><a href="#关于二分法" class="headerlink" title="关于二分法"></a>关于二分法</h2><p>单调区间中寻找特定元素的高效算法。</p>
<h2 id="使用核心"><a href="#使用核心" class="headerlink" title="使用核心"></a>使用核心</h2><ul>
<li><p>区间单调</p>
<ul>
<li>在单调模型上求目标解，非单调模型不可使用</li>
</ul>
</li>
<li><p>时间效率<code>O(logn)</code></p>
</li>
<li><p>核心代码</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binarysearch</span><span class="params">(array, target)</span>:</span></span><br><span class="line">    head = <span class="number">0</span></span><br><span class="line">    tail = len(array) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> head &lt; tail:</span><br><span class="line">        mid = (head + tail) &gt;&gt; <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> array[mid] &lt; target:</span><br><span class="line">            head = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tail = mid</span><br><span class="line">    <span class="keyword">return</span> head</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h2><ul>
<li><p>题意反推</p>
<p>  很多需要用二分法的题目，会在数据范围上暴露信息。</p>
<p>  比如<code>(0 &lt; M &lt;= 100000000)</code>，<br>  这种数据范围一般会和时间复杂度为<code>O(logn)</code>的算法有关系，<br>  快排堆排线段树等等。</p>
</li>
</ul>
<h2 id="LeetCode真题"><a href="#LeetCode真题" class="headerlink" title="LeetCode真题"></a>LeetCode真题</h2><h3 id="704-Binary-Search"><a href="#704-Binary-Search" class="headerlink" title="704. Binary Search"></a>704. Binary Search</h3><p>用二分法在有序数组中查找元素。<br><a href="https://leetcode.com/problems/binary-search/description/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums &#x3D; [-1,0,3,5,9,12], target &#x3D; 9</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: 9 exists in nums and its index is 4</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法一：实现原理。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(nums, target)</span>:</span></span><br><span class="line">    l, r = <span class="number">0</span>, len(nums)<span class="number">-1</span></span><br><span class="line">    <span class="keyword">while</span> l &lt;= r:</span><br><span class="line">        mid = (l+r) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> nums[mid] &gt; target:</span><br><span class="line">            r = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> nums[mid] &lt; target:</span><br><span class="line">            l = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：使用标准库。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, nums, target)</span>:</span></span><br><span class="line">    <span class="keyword">from</span> bisect <span class="keyword">import</span> bisect_left </span><br><span class="line">    index = bisect_left(nums, target)</span><br><span class="line">    <span class="keyword">return</span> index <span class="keyword">if</span> index &lt; len(nums) <span class="keyword">and</span> nums[index] == target <span class="keyword">else</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="35-Search-Insert-Position"><a href="#35-Search-Insert-Position" class="headerlink" title="35. Search Insert Position"></a>35. Search Insert Position</h3><p>给定一个target，插入到一个有序数组中，假定数组中无重复元素。<br><a href="https://leetcode.com/problems/search-insert-position/description/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,3,5,6], 5</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法一：实现原理。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_insert</span><span class="params">(nums, target)</span>:</span></span><br><span class="line">    l, r = <span class="number">0</span>, len(nums)<span class="number">-1</span></span><br><span class="line">    <span class="keyword">while</span> l &lt;= r:</span><br><span class="line">        mid = (l+r) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> nums[mid] &gt; target:</span><br><span class="line">            r = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> nums[mid] &lt; target:</span><br><span class="line">            l = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">    <span class="keyword">return</span> l</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：使用标准库。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">searchInsert</span><span class="params">(self, nums, target)</span>:</span></span><br><span class="line">    <span class="keyword">from</span> bisect <span class="keyword">import</span> bisect_left</span><br><span class="line">    <span class="keyword">return</span> bisect_left(nums, target)</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="153-Find-Minimum-in-Rotated-Sorted-Array"><a href="#153-Find-Minimum-in-Rotated-Sorted-Array" class="headerlink" title="153. Find Minimum in Rotated Sorted Array"></a>153. Find Minimum in Rotated Sorted Array</h3><p>通过一个排序数组旋转后的结果，找出最小元素。<br><a href="https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/description/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [3,4,5,1,2] </span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>

<ul>
<li><p>思路：通过二分法不断缩小范围，由于mid是整除，最后l==mid，并且nums[mid] &gt; nums[r]的。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_min</span><span class="params">(nums)</span>:</span></span><br><span class="line">    l, r = <span class="number">0</span>, len(nums)<span class="number">-1</span></span><br><span class="line">    <span class="keyword">if</span> nums[l] &lt; nums[r]:</span><br><span class="line">        <span class="keyword">return</span> nums[l]</span><br><span class="line">    <span class="keyword">while</span> l &lt;= r:</span><br><span class="line">        mid = (l+r) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> nums[mid] &gt; nums[l]:</span><br><span class="line">            l = mid</span><br><span class="line">        <span class="keyword">elif</span> nums[mid] &lt; nums[r]:</span><br><span class="line">            r = mid</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> nums[r]</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="34-Find-First-and-Last-Position-of-Element-in-Sorted-Array"><a href="#34-Find-First-and-Last-Position-of-Element-in-Sorted-Array" class="headerlink" title="34. Find First and Last Position of Element in Sorted Array"></a>34. Find First and Last Position of Element in Sorted Array</h3><p>有序数组中查找数组，返回数字的索引范围。<br><a href="https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/description/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums &#x3D; [5,7,7,8,8,10], target &#x3D; 8</span><br><span class="line">Output: [3,4]</span><br><span class="line">Input: nums &#x3D; [5,7,7,8,8,10], target &#x3D; 6</span><br><span class="line">Output: [-1,-1]</span><br></pre></td></tr></table></figure>

<ul>
<li><p>解法</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">searchRange</span><span class="params">(self, nums, target)</span>:</span></span><br><span class="line"></span><br><span class="line">    left_idx = self.search_edge(nums, target, <span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">if</span> left_idx == len(nums) <span class="keyword">or</span> nums[left_idx] != target:</span><br><span class="line">        <span class="keyword">return</span> [<span class="number">-1</span>, <span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">return</span> [left_idx, self.search_edge(nums, target, <span class="literal">False</span>)<span class="number">-1</span>]</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search_edge</span><span class="params">(self, nums, target, left)</span>:</span></span><br><span class="line">    l, r = <span class="number">0</span>, len(nums)</span><br><span class="line">    <span class="keyword">while</span> l &lt; r:</span><br><span class="line">        mid = (l+r) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> nums[mid] &gt; target <span class="keyword">or</span> (left <span class="keyword">and</span> nums[mid]==target):</span><br><span class="line">            r = mid</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            l = mid + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> l</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="278-First-Bad-Version"><a href="#278-First-Bad-Version" class="headerlink" title="278. First Bad Version"></a>278. First Bad Version</h3><p>找出提交版本中的bad version。<br><a href="https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/description/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given n &#x3D; 5, and version &#x3D; 4 is the first bad version.</span><br><span class="line"></span><br><span class="line">call isBadVersion(3) -&gt; false</span><br><span class="line">call isBadVersion(5) -&gt; true</span><br><span class="line">call isBadVersion(4) -&gt; true</span><br><span class="line"></span><br><span class="line">Then 4 is the first bad version.</span><br></pre></td></tr></table></figure>

<ul>
<li><p>解法</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">firstBadVersion</span><span class="params">(self, n)</span>:</span></span><br><span class="line">    l, r = <span class="number">1</span>, n</span><br><span class="line">    <span class="keyword">while</span> l &lt;= r:</span><br><span class="line">        mid = (l+r) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> isBadVersion(mid):</span><br><span class="line">            r = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            l = mid + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> l</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="374-Guess-Number-Higher-or-Lower"><a href="#374-Guess-Number-Higher-or-Lower" class="headerlink" title="374. Guess Number Higher or Lower"></a>374. Guess Number Higher or Lower</h3><p>猜数游戏1~n，每猜一次会告诉你答案是更小还是更大。<br><a href="https://leetcode.com/problems/guess-number-higher-or-lower/description/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def guess(num):</span><br><span class="line">    return</span><br><span class="line">    -1 : My number is lower</span><br><span class="line">     1 : My number is higher</span><br><span class="line">     0 : Congrats! You got it!</span><br><span class="line">     </span><br><span class="line">Input: n &#x3D; 10, pick &#x3D; 6</span><br><span class="line">Output: 6</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法一：实现原理。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">guessNumber</span><span class="params">(self, n)</span>:</span></span><br><span class="line">    l, r = <span class="number">1</span>, n</span><br><span class="line">    <span class="keyword">while</span> l &lt;= r:</span><br><span class="line">        mid = (l+r) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> guess(mid) == <span class="number">-1</span>:</span><br><span class="line">            r = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> guess(mid) == <span class="number">1</span>:</span><br><span class="line">            l = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：使用标准库。核心思想为将guess返回的结果转为一个数组，然后使用二分法查找。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">guessNumber</span><span class="params">(self, n)</span>:</span></span><br><span class="line">    <span class="keyword">from</span> bisect <span class="keyword">import</span> bisect, bisect_left</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> -guess(x)</span><br><span class="line">    <span class="comment"># return bisect(C(), -1, 1, n)</span></span><br><span class="line">    <span class="keyword">return</span> bisect_left(C(), <span class="number">0</span>, <span class="number">1</span>, n)</span><br></pre></td></tr></table></figure>

<p>  解析：以n=10, pick=6为例。实际上C class相当于:</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ary &#x3D; map(lambda x: -guess(x), range(1, n+1))</span><br><span class="line">ary.insert(0, None)</span><br><span class="line"># ary &#x3D; [None, -1, -1, -1, -1, -1, 0, 1, 1, 1, 1]</span><br><span class="line">return bisect(ary, -1, 1, n)</span><br></pre></td></tr></table></figure>

<p>  而索引又是从1开始，所以这里在前面添加了一个None，实际上将题转为了查找ary的0，问题便迎刃而解。<br>  值得注意的是，如果使用了map，会导致空间，时间复杂度增加，而使用class的方法，并没有求出整个的list，<br>  所以效率更高。</p>
</li>
</ul>
<h3 id="744-Find-Smallest-Letter-Greater-Than-Target"><a href="#744-Find-Smallest-Letter-Greater-Than-Target" class="headerlink" title="744. Find Smallest Letter Greater Than Target"></a>744. Find Smallest Letter Greater Than Target</h3><p>找出比目标大的最小字母，没有的返回首字母<br><a href="https://leetcode.com/problems/find-smallest-letter-greater-than-target/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">letters &#x3D; [&quot;c&quot;, &quot;f&quot;, &quot;j&quot;]</span><br><span class="line">target &#x3D; &quot;d&quot;</span><br><span class="line">Output: &quot;f&quot;</span><br><span class="line"></span><br><span class="line">Input:</span><br><span class="line">letters &#x3D; [&quot;c&quot;, &quot;f&quot;, &quot;j&quot;]</span><br><span class="line">target &#x3D; &quot;g&quot;</span><br><span class="line">Output: &quot;j&quot;</span><br><span class="line"></span><br><span class="line">Input:</span><br><span class="line">letters &#x3D; [&quot;c&quot;, &quot;f&quot;, &quot;j&quot;]</span><br><span class="line">target &#x3D; &quot;j&quot;</span><br><span class="line">Output: &quot;c&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法一：实现原理。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nextGreatestLetter</span><span class="params">(self, letters: <span class="string">'List[str]'</span>, target: <span class="string">'str'</span>)</span> -&gt; 'str':</span></span><br><span class="line">    lo, hi = <span class="number">0</span>, len(letters)<span class="number">-1</span></span><br><span class="line">    <span class="keyword">while</span> lo &lt;= hi:</span><br><span class="line">        mid = (lo + hi) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> letters[mid] &gt; target:</span><br><span class="line">            hi = mid <span class="number">-1</span></span><br><span class="line">        <span class="keyword">elif</span> letters[mid] &lt;= target:</span><br><span class="line">            lo = mid + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> letters[lo % len(letters)]</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：使用库。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nextGreatestLetter</span><span class="params">(self, letters: <span class="string">'List[str]'</span>, target: <span class="string">'str'</span>)</span> -&gt; 'str':</span></span><br><span class="line">    index = bisect.bisect(letters, target)</span><br><span class="line">    <span class="keyword">return</span> letters[index % len(letters)]</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="852-Peak-Index-in-a-Mountain-Array"><a href="#852-Peak-Index-in-a-Mountain-Array" class="headerlink" title="852. Peak Index in a Mountain Array"></a>852. Peak Index in a Mountain Array</h3><p>找到数组中的峰值。假设峰值一定存在。<br><a href="https://leetcode.com/problems/peak-index-in-a-mountain-array/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [0,2,1,0]</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法一：线性枚举O(n)。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">peakIndexInMountainArray</span><span class="params">(self, A: <span class="string">'List[int]'</span>)</span> -&gt; 'int':</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(A)<span class="number">-1</span>):</span><br><span class="line">        <span class="keyword">if</span> A[i] &gt; A[i+<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">return</span> i</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：max函数</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">peakIndexInMountainArray</span><span class="params">(self, A: <span class="string">'List[int]'</span>)</span> -&gt; 'int':</span></span><br><span class="line">    <span class="keyword">return</span> A.index(max(A))</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法三：二分法</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">peakIndexInMountainArray</span><span class="params">(self, A: <span class="string">'List[int]'</span>)</span> -&gt; 'int':</span></span><br><span class="line">    lo, hi = <span class="number">0</span>, len(A)<span class="number">-1</span></span><br><span class="line">    <span class="keyword">while</span> lo &lt; hi:</span><br><span class="line">        mid = (lo + hi) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> A[mid] &gt; A[mid+<span class="number">1</span>]:</span><br><span class="line">            hi = mid</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            lo = mid + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> lo</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法四：黄金分割法，应用在单峰函数求极值，速度比二分法要快。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">peakIndexInMountainArray</span><span class="params">(self, A: <span class="string">'List[int]'</span>)</span> -&gt; 'int':</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gold1</span><span class="params">(i, j)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> i + int(round((j-i) * <span class="number">0.382</span>))</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gold2</span><span class="params">(i, j)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> i + int(round((j-i) * <span class="number">0.618</span>))</span><br><span class="line">    </span><br><span class="line">    l, r = <span class="number">0</span>, len(A) - <span class="number">1</span></span><br><span class="line">    x1, x2 = gold1(l, r), gold2(l, r)</span><br><span class="line">    <span class="keyword">while</span> x1 &lt; x2:</span><br><span class="line">        <span class="keyword">if</span> A[x1] &lt; A[x2]:</span><br><span class="line">            l = x1</span><br><span class="line">            x1 = x2</span><br><span class="line">            x2 = gold1(x1, r)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            r = x2</span><br><span class="line">            x2 = x1</span><br><span class="line">            x1 = gold2(l, x2)</span><br><span class="line">    <span class="keyword">return</span> x1</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="1014-Capacity-To-Ship-Packages-Within-D-Days"><a href="#1014-Capacity-To-Ship-Packages-Within-D-Days" class="headerlink" title="1014. Capacity To Ship Packages Within D Days"></a>1014. Capacity To Ship Packages Within D Days</h3><p>n天内轮船运送的最小容量<br><a href="https://leetcode.com/problems/capacity-to-ship-packages-within-d-days/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: weights &#x3D; [1,2,3,4,5,6,7,8,9,10], D &#x3D; 5</span><br><span class="line">Output: 15</span><br><span class="line">Explanation: </span><br><span class="line">A ship capacity of 15 is the minimum to ship all the packages in 5 days like this:</span><br><span class="line">1st day: 1, 2, 3, 4, 5</span><br><span class="line">2nd day: 6, 7</span><br><span class="line">3rd day: 8</span><br><span class="line">4th day: 9</span><br><span class="line">5th day: 10</span><br><span class="line"></span><br><span class="line">Note that the cargo must be shipped in the order given, so using a ship of capacity 14 and splitting the packages into parts like (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) is not allowed.</span><br></pre></td></tr></table></figure>

<ul>
<li><p>二分结果快速出解</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shipWithinDays</span><span class="params">(self, weights: List[int], D: int)</span> -&gt; int:</span></span><br><span class="line">    lo, hi = max(weights), sum(weights)</span><br><span class="line">    <span class="keyword">while</span> lo &lt;= hi:</span><br><span class="line">        mid, days, cur = (lo + hi) // <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> weights:</span><br><span class="line">            <span class="keyword">if</span> cur+w &gt; mid:</span><br><span class="line">                days += <span class="number">1</span></span><br><span class="line">                cur = <span class="number">0</span></span><br><span class="line">            cur += w</span><br><span class="line">        <span class="keyword">if</span> days &gt; D:</span><br><span class="line">            lo = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            hi = mid - <span class="number">1</span></span><br><span class="line">        <span class="comment"># print(lo, mid, hi)</span></span><br><span class="line">    <span class="keyword">return</span> lo</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="875-Koko-Eating-Bananas"><a href="#875-Koko-Eating-Bananas" class="headerlink" title="875. Koko Eating Bananas"></a>875. Koko Eating Bananas</h3><p>这道题思路和1014一样。不同的是，如果当前堆的香蕉小于吃的速度，那么也不能吃下一堆。<br><a href="https://leetcode.com/problems/koko-eating-bananas/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: piles &#x3D; [3,6,7,11], H &#x3D; 8</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure>

<ul>
<li><p>二分结果快速出解</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">minEatingSpeed</span><span class="params">(self, piles: List[int], H: int)</span> -&gt; int:</span></span><br><span class="line">    lo, hi = <span class="number">1</span>, max(piles) </span><br><span class="line">    <span class="keyword">while</span> lo &lt;= hi:</span><br><span class="line">        mid = (lo + hi ) &gt;&gt; <span class="number">1</span></span><br><span class="line">        <span class="comment"># needs = sum(math.ceil(p/mid) for p in piles)   # slower</span></span><br><span class="line">        needs = sum((p<span class="number">-1</span>)//mid+<span class="number">1</span> <span class="keyword">for</span> p <span class="keyword">in</span> piles)</span><br><span class="line">        <span class="keyword">if</span> needs &gt; H:</span><br><span class="line">            lo = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            hi = mid - <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> lo</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1145-Binary-Tree-Coloring-Game"><a href="#1145-Binary-Tree-Coloring-Game" class="headerlink" title="1145. Binary Tree Coloring Game"></a>1145. Binary Tree Coloring Game</h3><p>二叉树染色游戏。两个人轮流给二叉树染色，每次只能染相邻位的节点，给定第一个人染色的位置，问第二个人是否能够必胜。<br><a href="https://leetcode.com/problems/binary-tree-coloring-game/" target="_blank" rel="noopener">查看原题</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: piles &#x3D; [3,6,7,11], H &#x3D; 8</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure>

<ul>
<li><p>关键的一点需要想明白，从第一个人染色的地方，有三个分支，如果有一个分支可以大于整个节点的一半，那么第二个人选择这个分支，就能赢得比赛</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">btreeGameWinningMove</span><span class="params">(self, root: TreeNode, n: int, x: int)</span> -&gt; bool:</span></span><br><span class="line">    count = [<span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(node)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        left = dfs(node.left)</span><br><span class="line">        right = dfs(node.right)</span><br><span class="line">        <span class="keyword">if</span> node.val == x:</span><br><span class="line">            count[<span class="number">0</span>] = left</span><br><span class="line">            count[<span class="number">1</span>] = right</span><br><span class="line">        <span class="keyword">return</span> left + right + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    dfs(root)</span><br><span class="line">    <span class="keyword">return</span> max(max(count), n - sum(count) - <span class="number">1</span>) &gt; n // <span class="number">2</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>2048这游戏怎么玩</title>
    <url>/2014/06/07/how-to-play-2048/</url>
    <content><![CDATA[<blockquote>
<p>发一篇陈年旧文，发现还是挺有趣的，就像翻开了尘封多年的日记一样。</p>
</blockquote>
<a id="more"></a>

<p><img src="/images/posts/how-to-play-2048/1.jpg" alt="实力图"></p>
<p>由于之前曾夸下海口要为几个极度渴望游戏秘诀的同学写个通关秘籍，所以此时此刻出现了这么一篇蛋疼的东西。其实这个游戏跟智力也没太大关系，同学们做消遣玩玩也就过了。如欲深究，我们就来谈谈。</p>
<h2 id="从头开始"><a href="#从头开始" class="headerlink" title="从头开始"></a>从头开始</h2><p>不能马虎，所以我们一切从头讲起。</p>
<p><img src="/images/posts/how-to-play-2048/2.jpg" alt="2"></p>
<p>最开始玩这个游戏，当然是上左下右循环乱搞一番，那时候玩出个1024牛逼哄哄，简直觉得自己智商已经封顶。不过多玩两次开始发现了一点规律，我开始把大的数堆在右下角（我知道大家习惯都不一样，堆在哪里都是可以的，自己看的舒服就行），遵循同排的从左往右递增，同列的从上往下递增，只要保持这样的排列方式，可以比较轻松的到达512或者更高。这是规律最初雏形，不再是毫无目的的瞎玩。</p>
<p><img src="/images/posts/how-to-play-2048/3.jpg" alt="3"></p>
<p>接下来这个方法很快出山了，就是当前大众所熟知的秘籍走法。我也不知道要怎么说这个规律和前面所说的那种规律有什么具体的联系，但起码我是从前面的方法过渡来的。</p>
<p><img src="/images/posts/how-to-play-2048/4.jpg" alt="4"></p>
<p>在慢慢熟悉了这个方法之后我开始嚣张了，开始觉得这个游戏太弱了，2048简直太弱，开始挑战4096但屡屡失败。就在当我觉得4096无望的时候，伟大的昌老师出现了，他在空间发了一个他玩到4096的照片，这时候我们就可以看到那种在泡沫剧里面常见的剧情，我被昌老师的一张图片所激励，废寝忘食地玩，最后成功完成4096大业。</p>
<p><img src="/images/posts/how-to-play-2048/5.jpg" alt="5"></p>
<p> 玩到4096后我继续玩，刷了个比较高的分数拿出来炫耀一番，不要脸地得到了各方奖赏，也就是在被奖赏的同时贸然答应了同学要把秘籍写出来，简直是太不要脸了。</p>
<p>不过对这个游戏的研究还没结束，有人说这个游戏的精髓就在这个蛇形的构造，其实不对，这个游戏真正的精髓在于懂得取舍和对付死局的能力。为什么我这么说呢，其实简单的来说，就是区分你玩10盘可以玩出2次4096，还是8次4096。废话不多说，我们开始来进入正题。</p>
<h2 id="取舍"><a href="#取舍" class="headerlink" title="取舍"></a>取舍</h2><p>关于取舍，就是我们走一些关键的步要顾大局，其实每一步都要顾大局，强迫症不改则乱大谋，这个必须要改，接下来我们举个例子吧。</p>
<p><img src="/images/posts/how-to-play-2048/6.jpg" alt="6"></p>
<p>这是最简单的例子，当出现这种局的时候你会怎么做呢？解这种局最忌讳的是因小失大，因为心中总是惦记着下面两个小的数，怎么也放不下这两个格子，以至于一直要急于把这两个小数解决。</p>
<p><img src="/images/posts/how-to-play-2048/7.jpg" alt="7"></p>
<p>其实纵观大局，只不过是失去了两个格子，我们称其为坏点，暂时放弃即可，用前三行解出一个512与底层的512会和即可解放，如若不放弃，就容易酿成这样的错误。</p>
<p><img src="/images/posts/how-to-play-2048/8.jpg" alt="8"></p>
<p>走到这一步，你可能解不了底层这个2（其实这个例子是可以的，但是很多时候你并不这么幸运），这个时候你唯一的方法还是放弃他，而此时你又多了一个坏点，这时候你只有11格可以解出一个512。可能少了一格你觉得差不太多，但如果你多了一格，你会多一份希望，坏点多一个，你成功的可能性就会低一点。</p>
<p><img src="/images/posts/how-to-play-2048/9.jpg" alt="9"></p>
<p>有了上面的经验，你应该明白遇到这种情况要怎么做了吧！</p>
<p><img src="/images/posts/how-to-play-2048/10.jpg" alt="10"></p>
<p>不过肯定有人会吐槽，用11格解一个512还是可以的。确实，用11格解一个512可能并不能难倒你，但是当数变更大的时候，你一定要做出正确的抉择，要不你连理论上的可能都没了。只是为了一个毫无用处的坏点让你输了整盘游戏，这是最不值得的输法，定要记住。</p>
<h2 id="死局"><a href="#死局" class="headerlink" title="死局"></a>死局</h2><p>接下来我们讲讲什么是死局。</p>
<p><img src="/images/posts/how-to-play-2048/11.jpg" alt="11"></p>
<p>其实准确来说，死局只是我给他取的一个难听的名字，因为死局并不一定意味这这盘已经输了，但是如果你不懂处理，那百分百是输了。</p>
<p><img src="/images/posts/how-to-play-2048/12.jpg" alt="12"></p>
<p>我统称这种左右下三个操作完全不能动弹的局为死局，其实很无奈，死局令我们破坏已定的阵型，最下面一行的数一般是最大的，如果被顶上去后果就是很难了。</p>
<p><img src="/images/posts/how-to-play-2048/13.jpg" alt="13"></p>
<p>当然这种时候你要学聪明了，看上面这种情况，我们肯定不罢休，谁都不想把最大的1024顶到第二排。所以这个时候肯定是往左操作。</p>
<p><img src="/images/posts/how-to-play-2048/14.jpg" alt="14"></p>
<p>如果运气好，顶起的数比较小，我们就可以往下划了，就比如上图，你需要做的就是将128和256顶起。如果这个2不是刷在256,下面而是512下面，这时候你可以选择再赌一把或者放弃，这取决于你对自己实力的评估，如果你觉得这个512你可以解出1024来你可以放弃继续赌，如果你确定你一定不可能解决这个512，那你一定要继续赌下去，因为对你来说这个512太难了，还不如赌一把来的现实。</p>
<p><img src="/images/posts/how-to-play-2048/15.jpg" alt="15"></p>
<p>而当你遇到这样的死局，你的选择可能就不多了，但是如果你觉得并非无解，那你就要做好取舍，依旧有机会成功。</p>
<p><img src="/images/posts/how-to-play-2048/16.jpg" alt="16"></p>
<p>这种局也是容易碰到的，他有一定的几率会让我们接下来直接带来一个坏点。因为我们不能向右和向下划，所以我们只能向左划（别跟我说向上划，那样要冒更大的风险）。</p>
<p><img src="/images/posts/how-to-play-2048/17.jpg" alt="17"></p>
<p>相信在通往4096的过程中你会经常遇到这样的情况，这样的情况有两种解决方法，第一就是直接放弃这个格子，对于这一局，在完成4096前它是一个好不了的坏点。如果你有信心用剩下的15格解出一个4096，那么这个坏点就彻底放弃吧。还有一个办法，就是在逼不得已的时候才用的，就是左右划动（其实适当的时候也可以选择向下划动），直到能将大数固定住，且其他位置留出的空余足够。</p>
<p><img src="/images/posts/how-to-play-2048/18.jpg" alt="18"></p>
<p>这是一个不错的例子，这个时候你就可以选择向上划。</p>
<p><img src="/images/posts/how-to-play-2048/19.png" alt="19"></p>
<p>在这个例子中，你有百分之七十五的机会可以顺利逃出此劫，只要数字不刷在感叹号所在位置，就可以顺利解除危机。在两个最大数的危机解除之后，你也要仔细规划让相对较大的数回归底边，比如128，我们要尽可能在底边解出256或者512的时候让他顺利回归，如若让它在在第三层慢慢变成一个256或者更大的数，底面就会出现一个甚至两个坏点。</p>
<p>当然我们都不希望遇到这些死局，那么有没有希望去避开这些死局呢？答案肯定是有的，不过不是绝对能够避开，只是尽最大努力去避开。</p>
<p><img src="/images/posts/how-to-play-2048/20.jpg" alt="20"></p>
<p>比如这种情况，如果想都不想就往下划，那就容易酿成大错，变成下面这种情况-&gt;</p>
<p><img src="/images/posts/how-to-play-2048/21.jpg" alt="21"></p>
<p>按照概率来说，遇到这个情况的概率是10%（出现2 的概率为90%，而出现在该位置的概率为1/9），虽然这个概率很小，但是我们要杜绝这样的情况就要时刻注意防止这样的情况发生，因为谁都不想时时刻刻去处理死局。</p>
<p><img src="/images/posts/how-to-play-2048/22.jpg" alt="22"></p>
<p>如果你不去扣细节，其实只要不遇到死局就可以继续，这就要大量消耗人品了，但如果你好好地注意细节，更多时候你靠的是实力，而非人品，你可以得到的分数就更高。就这个例子吧，如果你手快选择了向左划，那么你承受的风险就要比向下划更大，因为向下滑的话只有一个格子会迫使你下一步要冒险向右划，而如果你向左划，则是有两个格子会迫使你冒险。将风险降到最低，你才有更大几率玩到高分。</p>
<p><img src="/images/posts/how-to-play-2048/23.jpg" alt="23"></p>
<p>如果你刚刚不小心让情况发展到这个地步，没关系，我们完全可以承受，这个时候要怎么抉择呢？有的聪明的孩子肯定会说这32和256这两格已经是坏点了。是的，他们确实是坏点，但我们可以减少坏点。</p>
<p><img src="/images/posts/how-to-play-2048/24.png" alt="24"></p>
<p>虽然刚刚的128是在中间，但是我们此时将他收至最右边，这个时候我们只要放弃最底层的256，接下来的目标就是用前三层解出一个512即可。</p>
<p>其实我们会发现，最大数在中间两格的时候经常会出现坏点，所以，为了保护好整个阵型不受移动的影响，我们要每次都要尽快的保证正在奋斗的这一层稳固。</p>
<p><img src="/images/posts/how-to-play-2048/25.png" alt="25"></p>
<p>如果遇到以上情况你会怎么选择？如果往下划就是在给自己找坑，整个第三层层都会变的不稳固，正确的选择是向右边划（向左边划有一定风险，但并不大），然后接下来左右滑动都可以。</p>
<p><img src="/images/posts/how-to-play-2048/26.png" alt="26"></p>
<p>只要这个16的左边出现一个数，你就可以如愿以偿地和第三层的16解出一个32而并不影响第三层的稳定性。</p>
<p><img src="/images/posts/how-to-play-2048/27.png" alt="27"></p>
<p>这样是不是很管用呢，相信你能从这里体会到精髓。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="/images/posts/how-to-play-2048/28.png" alt="28"></p>
<p>说到这里你应该很快就会明白前两行你能解出的最大数对于你成功的重要性了，我的最高纪录是用前两行解出一个128，这是相当难的，这个就需要你的经验去解决了。如果你没有把握你就应该提前收掉前面的数，比如上面这个图，如果有能力你可以解出一个64去收一个4096，玩的再差我相信你也能凑个16去收，至于收16还是收32，这个你自己掂量着点，因为有时候你凑出一个16但它位置不在最右边，此时一个32才能救你，这些都要自己去慢慢琢磨。</p>
<p><img src="/images/posts/how-to-play-2048/29.jpg" alt="29"></p>
<p>这是我的最高纪录了，只能说在最后时刻人品没有爆发，只要其中随便一个2换成4或者4换成2我就有信心凑出个16384。这里面有一个坏点是32，其实当时我可以选择让他成为坏点还是留下他的，但是当时第二层有32并且不是在最右边，而格子又太挤了，我毅然地舍弃了他，决定要用两层解出128，但最后事与愿违，只能停留在这里了。希望大家满意，不过还有很多细节的东西我忘了，如果有补充的可以告诉我我可以加上去的。</p>
<h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>本文由 <a href="https://wadeee.github.io" title="Wade blog">Wade|陈伟城</a> 首发自 <a href="https://user.qzone.qq.com/363914451/blog/1402219431" target="_blank" rel="noopener">QQ空间</a></p>
<p>转载请保留以上链接</p>
]]></content>
  </entry>
</search>
